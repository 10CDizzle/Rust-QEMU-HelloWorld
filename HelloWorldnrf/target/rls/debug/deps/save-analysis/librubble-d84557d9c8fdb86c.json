{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble","program":"C:\\Users\\Chris\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rubble","--edition=2018","C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d84557d9c8fdb86c","-C","extra-filename=-d84557d9c8fdb86c","--out-dir","c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps","--extern","bitflags=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\libbitflags-24c98973ad943e39.rmeta","--extern","defmt=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\libdefmt-070251af54bd4254.rmeta","--extern","heapless=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\libheapless-ef84d1c035e8eb6f.rmeta","--extern","p256=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\libp256-924e379f610cf507.rmeta","--extern","rand_core=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\librand_core-b2d677ec2447da47.rmeta","--extern","sha2=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\libsha2-bb777f5c9a4cbf9f.rmeta","--extern","zerocopy=c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\libzerocopy-06ff989c0da2f54e.rmeta","--cap-lints","allow","-L","c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\build\\defmt-8859167ca79866c1\\out","--error-format=json","--sysroot","C:\\Users\\Chris\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Chris\\Documents\\GitHub\\Rust-QEMU-HelloWorld\\HelloWorldnrf\\target\\rls\\debug\\deps\\librubble-d84557d9c8fdb86c.rmeta"},"prelude":{"crate_id":{"name":"rubble","disambiguator":[8829445710062059294,0]},"crate_root":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src","external_crates":[{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11647781593125135854,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13810207351280985286,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10856308035441163175,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","num":4,"id":{"name":"zerocopy","disambiguator":[7570475970171020277,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","num":5,"id":{"name":"byteorder","disambiguator":[7908544157538532347,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","num":6,"id":{"name":"zerocopy_derive","disambiguator":[7352571237309828435,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":7,"id":{"name":"p256","disambiguator":[8453521332844230502,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":8,"id":{"name":"elliptic_curve","disambiguator":[3243347235511572998,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":9,"id":{"name":"subtle","disambiguator":[10627597646011171551,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":10,"id":{"name":"generic_array","disambiguator":[5896518835544192720,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":11,"id":{"name":"typenum","disambiguator":[10496950268944092639,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":12,"id":{"name":"zeroize","disambiguator":[6401908933321024840,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":13,"id":{"name":"ff","disambiguator":[7024791976915069600,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":14,"id":{"name":"rand_core","disambiguator":[11305855729385944999,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":15,"id":{"name":"group","disambiguator":[4033758777996047857,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","num":16,"id":{"name":"crypto_bigint","disambiguator":[16448736425761411049,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","num":17,"id":{"name":"bitflags","disambiguator":[3557972753565154422,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","num":18,"id":{"name":"heapless","disambiguator":[16029432480594989139,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","num":19,"id":{"name":"hash32","disambiguator":[17009628039806805635,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","num":20,"id":{"name":"spin","disambiguator":[16024638931431375625,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","num":21,"id":{"name":"lock_api","disambiguator":[5901320206284767740,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","num":22,"id":{"name":"scopeguard","disambiguator":[1251302162167888798,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","num":23,"id":{"name":"stable_deref_trait","disambiguator":[12664010342270292873,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","num":24,"id":{"name":"defmt","disambiguator":[8464012349163112382,0]}},{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","num":25,"id":{"name":"defmt_macros","disambiguator":[16483116146903777701,0]}}],"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":0,"byte_end":1613,"line_start":1,"line_end":49,"column_start":1,"column_end":66}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2175},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7185,"byte_end":7191,"line_start":38,"line_end":38,"column_start":24,"column_end":30},"alias_span":null,"name":"Handle","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7193,"byte_end":7204,"line_start":38,"line_end":38,"column_start":32,"column_end":43},"alias_span":null,"name":"HandleRange","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7230,"byte_end":7245,"line_start":39,"line_end":39,"column_start":24,"column_end":39},"alias_span":null,"name":"AttributeServer","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7247,"byte_end":7264,"line_start":39,"line_end":39,"column_start":41,"column_end":58},"alias_span":null,"name":"AttributeServerTx","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":2455},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7287,"byte_end":7294,"line_start":40,"line_end":40,"column_start":21,"column_end":28},"alias_span":null,"name":"AttUuid","value":"","parent":{"krate":0,"index":30}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94074,"byte_end":94075,"line_start":22,"line_end":22,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":644}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144446,"byte_end":144447,"line_start":134,"line_end":134,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"CompanyId","parent":{"krate":0,"index":1021}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144475,"byte_end":144485,"line_start":135,"line_end":135,"column_start":27,"column_end":37},"alias_span":null,"name":"Connection","value":"","parent":{"krate":0,"index":1021}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144517,"byte_end":144518,"line_start":136,"line_end":136,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"AddressKind, DeviceAddress","parent":{"krate":0,"index":1021}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144544,"byte_end":144545,"line_start":137,"line_end":137,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"FeatureSet","parent":{"krate":0,"index":1021}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144572,"byte_end":144573,"line_start":138,"line_end":138,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1021}},{"kind":"Use","ref_id":{"krate":0,"index":2492},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1436,"byte_end":1441,"line_start":44,"line_end":44,"column_start":22,"column_end":27},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":0,"byte_end":1613,"line_start":1,"line_end":49,"column_start":1,"column_end":66},"name":"","qualname":"::","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":10},{"krate":0,"index":30},{"krate":0,"index":346},{"krate":0,"index":428},{"krate":0,"index":620},{"krate":0,"index":644},{"krate":0,"index":731},{"krate":0,"index":737},{"krate":0,"index":810},{"krate":0,"index":1021},{"krate":0,"index":1933},{"krate":0,"index":1953},{"krate":0,"index":2019},{"krate":0,"index":2091},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2154}],"decl_id":null,"docs":" An experimental BLE stack.","sig":null,"attributes":[{"value":"/ An experimental BLE stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":0,"byte_end":30,"line_start":1,"line_end":1,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":31,"byte_end":34,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Tries to adhere to the *Bluetooth Core Specification v4.2* (at least for now).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":35,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":118,"byte_end":121,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Using the stack","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":122,"byte_end":143,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":144,"byte_end":147,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Rubble is runtime and hardware-agnostic: It does not need an RTOS (although you can certainly","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":148,"byte_end":245,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ use one if you want) and provides hardware interfaces that need to be implemented once for","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":246,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ every supported MCU family.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":341,"byte_end":372,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":373,"byte_end":376,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The only part that interacts directly with platform-specific interfaces is [`link`], Rubble's","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":377,"byte_end":474,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ BLE Link-Layer implementation. You have to provide it with a few hardware-specific services:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":475,"byte_end":571,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ * A microsecond-precision [`Timer`][time::Timer].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":572,"byte_end":625,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/ * A [`Transmitter`][link::Transmitter] that can send data and advertising channel packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":626,"byte_end":720,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/ * A processor for [`link::Cmd`], which tells the support code when to call Rubble's functions","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":721,"byte_end":818,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/   again.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":819,"byte_end":831,"line_start":16,"line_end":16,"column_start":1,"column_end":13}},{"value":"no_std","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":904,"byte_end":910,"line_start":19,"line_end":19,"column_start":24,"column_end":30}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1056,"byte_end":1082,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1134,"byte_end":1179,"line_start":24,"line_end":24,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5111,"byte_end":5114,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"Hex","qualname":"::utils::Hex","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Debug`-formats its contents in hexadecimal.\n","sig":null,"attributes":[{"value":"/ `Debug`-formats its contents in hexadecimal.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5028,"byte_end":5076,"line_start":91,"line_end":91,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5118,"byte_end":5123,"line_start":93,"line_end":93,"column_start":19,"column_end":24},"name":"0","qualname":"::utils::Hex::0","value":"T","parent":{"krate":0,"index":2165},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"att","qualname":"::att","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":74},{"krate":0,"index":133},{"krate":0,"index":245},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":311},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":339},{"krate":0,"index":341}],"decl_id":null,"docs":" Implementation of the Attribute Protocol (ATT).","sig":null,"attributes":[{"value":"/ Implementation of the Attribute Protocol (ATT).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5434,"byte_end":5485,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5486,"byte_end":5489,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ATT always runs over L2CAP channel `0x0004`, which is connected by default as soon as the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5490,"byte_end":5583,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ Link-Layer connection is established.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5584,"byte_end":5625,"line_start":4,"line_end":4,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5626,"byte_end":5629,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ATT is used by GATT, the *Generic Attribute Profile*, which introduces the concept of *Services*","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5630,"byte_end":5730,"line_start":6,"line_end":6,"column_start":1,"column_end":101}},{"value":"/ and *Characteristics* which can all be accessed and discovered over the Attribute Protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5731,"byte_end":5826,"line_start":7,"line_end":7,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5827,"byte_end":5830,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Attributes","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5831,"byte_end":5847,"line_start":9,"line_end":9,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5848,"byte_end":5851,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The ATT server hosts a list of *Attributes*, which consist of the following:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5852,"byte_end":5932,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5933,"byte_end":5936,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ * A 16-bit *Attribute Handle* ([`Handle`]) uniquely identifying the attribute.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":5937,"byte_end":6019,"line_start":13,"line_end":13,"column_start":1,"column_end":83}},{"value":"/ * A 16- or 128-bit UUID identifying the attribute type. This provides information about how to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6020,"byte_end":6118,"line_start":14,"line_end":14,"column_start":1,"column_end":99}},{"value":"/   interpret the attribute's value (eg. as a little-endian 32-bit integer).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6119,"byte_end":6197,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ * The attribute's *value*, consisting of a dynamically-sized byte array of up to 512 Bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6198,"byte_end":6293,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ * A set of *permissions*, restricting the operations that can be performed on the attribute.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6294,"byte_end":6390,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6391,"byte_end":6394,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ## Attribute Grouping","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6395,"byte_end":6420,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6421,"byte_end":6424,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The higher-level protocol layer using ATT (ie. GATT) may define a set of attribute types as","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6425,"byte_end":6520,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ *Grouping Attributes*. These attribute types are allowed for use in *Read By Group Type*","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6521,"byte_end":6613,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ requests, and can also influence the behavior of other requests (such as *Find By Type Value*).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6614,"byte_end":6713,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6714,"byte_end":6717,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ All *Grouping Attributes* can be seen as the start of a group of attributes. Groups are formed","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6718,"byte_end":6816,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ by indicating the *Group End Handle* to the client, which is the handle of the last attribute in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6817,"byte_end":6917,"line_start":26,"line_end":26,"column_start":1,"column_end":101}},{"value":"/ the group. The *Group End Handle* isn't known by the ATT server and must be provided by the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":6918,"byte_end":7013,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ higher-level protocol (GATT).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7014,"byte_end":7047,"line_start":28,"line_end":28,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2175},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14474,"byte_end":14480,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Handle","qualname":"::att::handle::Handle","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit handle uniquely identifying an attribute on an ATT server.","sig":null,"attributes":[{"value":"/ A 16-bit handle uniquely identifying an attribute on an ATT server.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14283,"byte_end":14354,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14355,"byte_end":14358,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The `0x0000` handle (`NULL`) is invalid and must not be used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14359,"byte_end":14424,"line_start":9,"line_end":9,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14676,"byte_end":14680,"line_start":16,"line_end":16,"column_start":15,"column_end":19},"name":"NULL","qualname":"::att::handle::Handle::NULL","value":"Self","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" The `0x0000` handle is not used for actual attributes, but as a special placeholder when no\n attribute handle is valid (eg. in error responses).\n","sig":null,"attributes":[{"value":"/ The `0x0000` handle is not used for actual attributes, but as a special placeholder when no","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14506,"byte_end":14601,"line_start":14,"line_end":14,"column_start":5,"column_end":100}},{"value":"/ attribute handle is valid (eg. in error responses).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14606,"byte_end":14661,"line_start":15,"line_end":15,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14782,"byte_end":14788,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"as_u16","qualname":"<Handle>::as_u16","value":"pub fn as_u16(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw 16-bit integer representing this handle.\n","sig":null,"attributes":[{"value":"/ Returns the raw 16-bit integer representing this handle.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14710,"byte_end":14770,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14888,"byte_end":14896,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Handle>::from_raw","value":"pub fn from_raw(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an attribute handle from a raw u16\n","sig":null,"attributes":[{"value":"/ Create an attribute handle from a raw u16","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14831,"byte_end":14876,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16758,"byte_end":16769,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"HandleRange","qualname":"::att::handle::HandleRange","value":"","parent":null,"children":[],"decl_id":null,"docs":" A (de)serializable handle range that has been checked for validity.\n","sig":null,"attributes":[{"value":"/ A (de)serializable handle range that has been checked for validity.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16658,"byte_end":16729,"line_start":91,"line_end":91,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16826,"byte_end":16829,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<HandleRange>::new","value":"pub fn new(Handle, Handle) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16963,"byte_end":16971,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"contains","qualname":"<HandleRange>::contains","value":"pub fn contains(&Self, Handle) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if an Handle is in a HandleRange\n","sig":null,"attributes":[{"value":"/ Checks if an Handle is in a HandleRange","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16908,"byte_end":16951,"line_start":100,"line_end":100,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":17177,"byte_end":17182,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"start","qualname":"<HandleRange>::start","value":"pub fn start(&Self) -> Handle","parent":null,"children":[],"decl_id":null,"docs":" Returns the lowest attribute handle value included in the range.\n","sig":null,"attributes":[{"value":"/ Returns the lowest attribute handle value included in the range.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":17097,"byte_end":17165,"line_start":105,"line_end":105,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":17325,"byte_end":17328,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"end","qualname":"<HandleRange>::end","value":"pub fn end(&Self) -> Handle","parent":null,"children":[],"decl_id":null,"docs":" Returns the last (highest) attribute handle value included in the range.\n","sig":null,"attributes":[{"value":"/ Returns the last (highest) attribute handle value included in the range.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":17237,"byte_end":17313,"line_start":110,"line_end":110,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2210},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":17884,"byte_end":17897,"line_start":14,"line_end":14,"column_start":9,"column_end":22},"name":"InvalidHandle","qualname":"::att::pdus::ErrorCode::InvalidHandle","value":"ErrorCode::InvalidHandle","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attempted to use an `Handle` that isn't valid on this server.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":17952,"byte_end":17968,"line_start":16,"line_end":16,"column_start":9,"column_end":25},"name":"ReadNotPermitted","qualname":"::att::pdus::ErrorCode::ReadNotPermitted","value":"ErrorCode::ReadNotPermitted","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute isn't readable.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18023,"byte_end":18040,"line_start":18,"line_end":18,"column_start":9,"column_end":26},"name":"WriteNotPermitted","qualname":"::att::pdus::ErrorCode::WriteNotPermitted","value":"ErrorCode::WriteNotPermitted","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute isn't writable.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2216},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18095,"byte_end":18105,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"InvalidPdu","qualname":"::att::pdus::ErrorCode::InvalidPdu","value":"ErrorCode::InvalidPdu","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute PDU is invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2218},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18194,"byte_end":18220,"line_start":22,"line_end":22,"column_start":9,"column_end":35},"name":"InsufficientAuthentication","qualname":"::att::pdus::ErrorCode::InsufficientAuthentication","value":"ErrorCode::InsufficientAuthentication","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Authentication needed before attribute can be read/written.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2220},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18288,"byte_end":18307,"line_start":24,"line_end":24,"column_start":9,"column_end":28},"name":"RequestNotSupported","qualname":"::att::pdus::ErrorCode::RequestNotSupported","value":"ErrorCode::RequestNotSupported","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Server doesn't support this operation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18378,"byte_end":18391,"line_start":26,"line_end":26,"column_start":9,"column_end":22},"name":"InvalidOffset","qualname":"::att::pdus::ErrorCode::InvalidOffset","value":"ErrorCode::InvalidOffset","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Offset was past the end of the attribute.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18479,"byte_end":18504,"line_start":28,"line_end":28,"column_start":9,"column_end":34},"name":"InsufficientAuthorization","qualname":"::att::pdus::ErrorCode::InsufficientAuthorization","value":"ErrorCode::InsufficientAuthorization","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Authorization needed before attribute can be read/written.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2226},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18585,"byte_end":18601,"line_start":30,"line_end":30,"column_start":9,"column_end":25},"name":"PrepareQueueFull","qualname":"::att::pdus::ErrorCode::PrepareQueueFull","value":"ErrorCode::PrepareQueueFull","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Too many \"prepare write\" requests have been queued.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2228},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18694,"byte_end":18711,"line_start":32,"line_end":32,"column_start":9,"column_end":26},"name":"AttributeNotFound","qualname":"::att::pdus::ErrorCode::AttributeNotFound","value":"ErrorCode::AttributeNotFound","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" No attribute found within the specified attribute handle range.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2230},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18803,"byte_end":18819,"line_start":34,"line_end":34,"column_start":9,"column_end":25},"name":"AttributeNotLong","qualname":"::att::pdus::ErrorCode::AttributeNotLong","value":"ErrorCode::AttributeNotLong","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute can't be read/written using *Read Key Blob* request.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2232},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":18910,"byte_end":18939,"line_start":36,"line_end":36,"column_start":9,"column_end":38},"name":"InsufficientEncryptionKeySize","qualname":"::att::pdus::ErrorCode::InsufficientEncryptionKeySize","value":"ErrorCode::InsufficientEncryptionKeySize","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" The encryption key in use is too weak to access an attribute.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2234},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19027,"byte_end":19054,"line_start":38,"line_end":38,"column_start":9,"column_end":36},"name":"InvalidAttributeValueLength","qualname":"::att::pdus::ErrorCode::InvalidAttributeValueLength","value":"ErrorCode::InvalidAttributeValueLength","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute value has an incorrect length for the operation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2236},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19155,"byte_end":19168,"line_start":40,"line_end":40,"column_start":9,"column_end":22},"name":"UnlikelyError","qualname":"::att::pdus::ErrorCode::UnlikelyError","value":"ErrorCode::UnlikelyError","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Request has encountered an \"unlikely\" error and could not be completed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2238},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19263,"byte_end":19285,"line_start":42,"line_end":42,"column_start":9,"column_end":31},"name":"InsufficientEncryption","qualname":"::att::pdus::ErrorCode::InsufficientEncryption","value":"ErrorCode::InsufficientEncryption","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute cannot be read/written without an encrypted connection.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2240},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19396,"byte_end":19416,"line_start":44,"line_end":44,"column_start":9,"column_end":29},"name":"UnsupportedGroupType","qualname":"::att::pdus::ErrorCode::UnsupportedGroupType","value":"ErrorCode::UnsupportedGroupType","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Attribute type is an invalid grouping attribute according to a higher-layer spec.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2242},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19504,"byte_end":19525,"line_start":46,"line_end":46,"column_start":9,"column_end":30},"name":"InsufficientResources","qualname":"::att::pdus::ErrorCode::InsufficientResources","value":"ErrorCode::InsufficientResources","parent":{"krate":0,"index":2209},"children":[],"decl_id":null,"docs":" Server didn't have enough resources to complete a request.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2209},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":17786,"byte_end":17795,"line_start":12,"line_end":12,"column_start":14,"column_end":23},"name":"ErrorCode","qualname":"::att::pdus::ErrorCode","value":"pub enum ErrorCode {\n    InvalidHandle,\n    ReadNotPermitted,\n    WriteNotPermitted,\n    InvalidPdu,\n    InsufficientAuthentication,\n    RequestNotSupported,\n    InvalidOffset,\n    InsufficientAuthorization,\n    PrepareQueueFull,\n    AttributeNotFound,\n    AttributeNotLong,\n    InsufficientEncryptionKeySize,\n    InvalidAttributeValueLength,\n    UnlikelyError,\n    InsufficientEncryption,\n    UnsupportedGroupType,\n    InsufficientResources,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2242},{"krate":0,"index":2244}],"decl_id":null,"docs":" Error codes that can be sent from the ATT server to the client in response to a request.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2306},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24425,"byte_end":24433,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"name":"ErrorRsp","qualname":"::att::pdus::Opcode::ErrorRsp","value":"Opcode::ErrorRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2308},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24450,"byte_end":24464,"line_start":207,"line_end":207,"column_start":9,"column_end":23},"name":"ExchangeMtuReq","qualname":"::att::pdus::Opcode::ExchangeMtuReq","value":"Opcode::ExchangeMtuReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2310},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24481,"byte_end":24495,"line_start":208,"line_end":208,"column_start":9,"column_end":23},"name":"ExchangeMtuRsp","qualname":"::att::pdus::Opcode::ExchangeMtuRsp","value":"Opcode::ExchangeMtuRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24512,"byte_end":24530,"line_start":209,"line_end":209,"column_start":9,"column_end":27},"name":"FindInformationReq","qualname":"::att::pdus::Opcode::FindInformationReq","value":"Opcode::FindInformationReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24547,"byte_end":24565,"line_start":210,"line_end":210,"column_start":9,"column_end":27},"name":"FindInformationRsp","qualname":"::att::pdus::Opcode::FindInformationRsp","value":"Opcode::FindInformationRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2316},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24582,"byte_end":24600,"line_start":211,"line_end":211,"column_start":9,"column_end":27},"name":"FindByTypeValueReq","qualname":"::att::pdus::Opcode::FindByTypeValueReq","value":"Opcode::FindByTypeValueReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24617,"byte_end":24635,"line_start":212,"line_end":212,"column_start":9,"column_end":27},"name":"FindByTypeValueRsp","qualname":"::att::pdus::Opcode::FindByTypeValueRsp","value":"Opcode::FindByTypeValueRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24652,"byte_end":24665,"line_start":213,"line_end":213,"column_start":9,"column_end":22},"name":"ReadByTypeReq","qualname":"::att::pdus::Opcode::ReadByTypeReq","value":"Opcode::ReadByTypeReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2322},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24682,"byte_end":24695,"line_start":214,"line_end":214,"column_start":9,"column_end":22},"name":"ReadByTypeRsp","qualname":"::att::pdus::Opcode::ReadByTypeRsp","value":"Opcode::ReadByTypeRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2324},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24712,"byte_end":24719,"line_start":215,"line_end":215,"column_start":9,"column_end":16},"name":"ReadReq","qualname":"::att::pdus::Opcode::ReadReq","value":"Opcode::ReadReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2326},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24736,"byte_end":24743,"line_start":216,"line_end":216,"column_start":9,"column_end":16},"name":"ReadRsp","qualname":"::att::pdus::Opcode::ReadRsp","value":"Opcode::ReadRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24760,"byte_end":24771,"line_start":217,"line_end":217,"column_start":9,"column_end":20},"name":"ReadBlobReq","qualname":"::att::pdus::Opcode::ReadBlobReq","value":"Opcode::ReadBlobReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2330},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24788,"byte_end":24799,"line_start":218,"line_end":218,"column_start":9,"column_end":20},"name":"ReadBlobRsp","qualname":"::att::pdus::Opcode::ReadBlobRsp","value":"Opcode::ReadBlobRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2332},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24816,"byte_end":24831,"line_start":219,"line_end":219,"column_start":9,"column_end":24},"name":"ReadMultipleReq","qualname":"::att::pdus::Opcode::ReadMultipleReq","value":"Opcode::ReadMultipleReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24848,"byte_end":24863,"line_start":220,"line_end":220,"column_start":9,"column_end":24},"name":"ReadMultipleRsp","qualname":"::att::pdus::Opcode::ReadMultipleRsp","value":"Opcode::ReadMultipleRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2336},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24880,"byte_end":24894,"line_start":221,"line_end":221,"column_start":9,"column_end":23},"name":"ReadByGroupReq","qualname":"::att::pdus::Opcode::ReadByGroupReq","value":"Opcode::ReadByGroupReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2338},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24911,"byte_end":24925,"line_start":222,"line_end":222,"column_start":9,"column_end":23},"name":"ReadByGroupRsp","qualname":"::att::pdus::Opcode::ReadByGroupRsp","value":"Opcode::ReadByGroupRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24942,"byte_end":24950,"line_start":223,"line_end":223,"column_start":9,"column_end":17},"name":"WriteReq","qualname":"::att::pdus::Opcode::WriteReq","value":"Opcode::WriteReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24967,"byte_end":24975,"line_start":224,"line_end":224,"column_start":9,"column_end":17},"name":"WriteRsp","qualname":"::att::pdus::Opcode::WriteRsp","value":"Opcode::WriteRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2344},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24992,"byte_end":25004,"line_start":225,"line_end":225,"column_start":9,"column_end":21},"name":"WriteCommand","qualname":"::att::pdus::Opcode::WriteCommand","value":"Opcode::WriteCommand","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25021,"byte_end":25039,"line_start":226,"line_end":226,"column_start":9,"column_end":27},"name":"SignedWriteCommand","qualname":"::att::pdus::Opcode::SignedWriteCommand","value":"Opcode::SignedWriteCommand","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25056,"byte_end":25071,"line_start":227,"line_end":227,"column_start":9,"column_end":24},"name":"PrepareWriteReq","qualname":"::att::pdus::Opcode::PrepareWriteReq","value":"Opcode::PrepareWriteReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25088,"byte_end":25103,"line_start":228,"line_end":228,"column_start":9,"column_end":24},"name":"PrepareWriteRsp","qualname":"::att::pdus::Opcode::PrepareWriteRsp","value":"Opcode::PrepareWriteRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25120,"byte_end":25135,"line_start":229,"line_end":229,"column_start":9,"column_end":24},"name":"ExecuteWriteReq","qualname":"::att::pdus::Opcode::ExecuteWriteReq","value":"Opcode::ExecuteWriteReq","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2354},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25152,"byte_end":25167,"line_start":230,"line_end":230,"column_start":9,"column_end":24},"name":"ExecuteWriteRsp","qualname":"::att::pdus::Opcode::ExecuteWriteRsp","value":"Opcode::ExecuteWriteRsp","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2356},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25184,"byte_end":25207,"line_start":231,"line_end":231,"column_start":9,"column_end":32},"name":"HandleValueNotification","qualname":"::att::pdus::Opcode::HandleValueNotification","value":"Opcode::HandleValueNotification","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2358},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25224,"byte_end":25245,"line_start":232,"line_end":232,"column_start":9,"column_end":30},"name":"HandleValueIndication","qualname":"::att::pdus::Opcode::HandleValueIndication","value":"Opcode::HandleValueIndication","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2360},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25262,"byte_end":25285,"line_start":233,"line_end":233,"column_start":9,"column_end":32},"name":"HandleValueConfirmation","qualname":"::att::pdus::Opcode::HandleValueConfirmation","value":"Opcode::HandleValueConfirmation","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":24404,"byte_end":24410,"line_start":205,"line_end":205,"column_start":14,"column_end":20},"name":"Opcode","qualname":"::att::pdus::Opcode","value":"pub enum Opcode {\n    ErrorRsp,\n    ExchangeMtuReq,\n    ExchangeMtuRsp,\n    FindInformationReq,\n    FindInformationRsp,\n    FindByTypeValueReq,\n    FindByTypeValueRsp,\n    ReadByTypeReq,\n    ReadByTypeRsp,\n    ReadReq,\n    ReadRsp,\n    ReadBlobReq,\n    ReadBlobRsp,\n    ReadMultipleReq,\n    ReadMultipleRsp,\n    ReadByGroupReq,\n    ReadByGroupRsp,\n    WriteReq,\n    WriteRsp,\n    WriteCommand,\n    SignedWriteCommand,\n    PrepareWriteReq,\n    PrepareWriteRsp,\n    ExecuteWriteReq,\n    ExecuteWriteRsp,\n    HandleValueNotification,\n    HandleValueIndication,\n    HandleValueConfirmation,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2350},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2362}],"decl_id":null,"docs":" Specifies an ATT operation to perform.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25393,"byte_end":25396,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"raw","qualname":"<Opcode>::raw","value":"pub fn raw(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw byte corresponding to the opcode `self`.\n","sig":null,"attributes":[{"value":"/ Returns the raw byte corresponding to the opcode `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25321,"byte_end":25381,"line_start":238,"line_end":238,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25659,"byte_end":25675,"line_start":247,"line_end":247,"column_start":12,"column_end":28},"name":"is_authenticated","qualname":"<Opcode>::is_authenticated","value":"pub fn is_authenticated(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `Signature` bit in this opcode is set.","sig":null,"attributes":[{"value":"/ Returns whether the `Signature` bit in this opcode is set.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25447,"byte_end":25509,"line_start":243,"line_end":243,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25514,"byte_end":25517,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ If the bit is set, this is an authenticated operation. The opcode parameters are followed by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25522,"byte_end":25618,"line_start":245,"line_end":245,"column_start":5,"column_end":101}},{"value":"/ a 12-Byte signature.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25623,"byte_end":25647,"line_start":246,"line_end":246,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":26010,"byte_end":26020,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"is_command","qualname":"<Opcode>::is_command","value":"pub fn is_command(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `Command` bit in this opcode is set.","sig":null,"attributes":[{"value":"/ Returns whether the `Command` bit in this opcode is set.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25735,"byte_end":25795,"line_start":251,"line_end":251,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25800,"byte_end":25803,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Commands sent to the server are not followed by a server response (ie. it is not indicated","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25808,"byte_end":25902,"line_start":253,"line_end":253,"column_start":5,"column_end":99}},{"value":"/ whether they succeed). Unimplemented commands should be ignored, according to the spec.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25907,"byte_end":25998,"line_start":254,"line_end":254,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42558,"byte_end":42573,"line_start":14,"line_end":14,"column_start":12,"column_end":27},"name":"AttributeServer","qualname":"::att::server::AttributeServer","value":"AttributeServer {  }","parent":null,"children":[{"krate":0,"index":193}],"decl_id":null,"docs":" An Attribute Protocol server providing read and write access to stored attributes.\n","sig":null,"attributes":[{"value":"/ An Attribute Protocol server providing read and write access to stored attributes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42460,"byte_end":42546,"line_start":13,"line_end":13,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42759,"byte_end":42762,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<AttributeServer<A>>::new","value":"pub fn new(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an `AttributeServer` hosting attributes from an `AttributeProvider`.\n","sig":null,"attributes":[{"value":"/ Creates an `AttributeServer` hosting attributes from an `AttributeProvider`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42667,"byte_end":42747,"line_start":19,"line_end":19,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":43144,"byte_end":43155,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"with_sender","qualname":"<AttributeServer<A>>::with_sender","value":"pub fn with_sender<'a>(&'a mut Self, Sender) -> AttributeServerTx","parent":null,"children":[],"decl_id":null,"docs":" Prepares for performing a server-initiated action (eg. sending a notification/indication).","sig":null,"attributes":[{"value":"/ Prepares for performing a server-initiated action (eg. sending a notification/indication).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42817,"byte_end":42911,"line_start":24,"line_end":24,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42916,"byte_end":42919,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that `sender` has at least `RSP_PDU_SIZE` bytes of free space","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42924,"byte_end":43012,"line_start":26,"line_end":26,"column_start":5,"column_end":93}},{"value":"/ available.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":43017,"byte_end":43031,"line_start":27,"line_end":27,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":43036,"byte_end":43039,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It is usually not necessary to use this function. Instead, call `L2CAPStateTx::att`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":43044,"byte_end":43132,"line_start":29,"line_end":29,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":43397,"byte_end":43405,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"provider","qualname":"<AttributeServer<A>>::provider","value":"pub fn provider(&mut Self) -> &mut A","parent":null,"children":[],"decl_id":null,"docs":" Provides mutable access to the underlying `AttributeProvider`.\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the underlying `AttributeProvider`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":43319,"byte_end":43385,"line_start":37,"line_end":37,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60060,"byte_end":60077,"line_start":445,"line_end":445,"column_start":12,"column_end":29},"name":"AttributeServerTx","qualname":"::att::server::AttributeServerTx","value":"AttributeServerTx {  }","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"decl_id":null,"docs":" An ATT server handle that can send packets and initiate actions.","sig":null,"attributes":[{"value":"/ An ATT server handle that can send packets and initiate actions.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":59825,"byte_end":59893,"line_start":441,"line_end":441,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":59894,"byte_end":59897,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ This type is needed for any server-initiated procedure, where the server sends out a packet on","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":59898,"byte_end":59996,"line_start":443,"line_end":443,"column_start":1,"column_end":99}},{"value":"/ its own instead of reacting to a client packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":59997,"byte_end":60048,"line_start":444,"line_end":444,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60679,"byte_end":60689,"line_start":460,"line_end":460,"column_start":12,"column_end":22},"name":"notify_raw","qualname":"<AttributeServerTx>::notify_raw","value":"pub fn notify_raw(Self, Handle, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Sends an attribute value notification to the connected client.","sig":null,"attributes":[{"value":"/ Sends an attribute value notification to the connected client.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60257,"byte_end":60323,"line_start":453,"line_end":453,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60328,"byte_end":60331,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ Notifications are not acknowledged by the client.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60336,"byte_end":60389,"line_start":455,"line_end":455,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60394,"byte_end":60397,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ If `value` is too large to be transmitted in a single `ATT_MTU`, it will be truncated to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60402,"byte_end":60494,"line_start":457,"line_end":457,"column_start":5,"column_end":97}},{"value":"/ fit. A client may fetch the rest of the truncated value by using a *Read Blob Request*.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60499,"byte_end":60590,"line_start":458,"line_end":458,"column_start":5,"column_end":96}},{"value":"/ If this is unwanted, only notify with a `value` of 19 Bytes or less.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60595,"byte_end":60667,"line_start":459,"line_end":459,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61401,"byte_end":61407,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"Uuid16","qualname":"::att::uuid::AttUuid::Uuid16","value":"AttUuid::Uuid16(Uuid16)","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2459},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61421,"byte_end":61428,"line_start":10,"line_end":10,"column_start":5,"column_end":12},"name":"Uuid128","qualname":"::att::uuid::AttUuid::Uuid128","value":"AttUuid::Uuid128(Uuid128)","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2455},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61387,"byte_end":61394,"line_start":8,"line_end":8,"column_start":10,"column_end":17},"name":"AttUuid","qualname":"::att::uuid::AttUuid","value":"pub enum AttUuid { Uuid16(Uuid16), Uuid128(Uuid128), }","parent":null,"children":[{"krate":0,"index":2456},{"krate":0,"index":2459}],"decl_id":null,"docs":" ATT protocol UUID (either a 16 or a 128-bit UUID).","sig":null,"attributes":[{"value":"/ ATT protocol UUID (either a 16 or a 128-bit UUID).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61210,"byte_end":61264,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61265,"byte_end":61268,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ 32-bit UUIDs are not supported by ATT and must be converted to 128-bit UUIDs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61269,"byte_end":61350,"line_start":6,"line_end":6,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7336,"byte_end":7345,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::att::Attribute","value":"Attribute { att_type, handle, value }","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"decl_id":null,"docs":" An ATT server attribute\n","sig":null,"attributes":[{"value":"/ An ATT server attribute","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7297,"byte_end":7324,"line_start":42,"line_end":42,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7486,"byte_end":7494,"line_start":48,"line_end":48,"column_start":9,"column_end":17},"name":"att_type","qualname":"::att::Attribute::att_type","value":"att::uuid::AttUuid","parent":{"krate":0,"index":306},"children":[],"decl_id":null,"docs":" The type of the attribute as a UUID16, EG \"Primary Service\" or \"Anaerobic Heart Rate Lower Limit\"\n","sig":null,"attributes":[{"value":"/ The type of the attribute as a UUID16, EG \"Primary Service\" or \"Anaerobic Heart Rate Lower Limit\"","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7376,"byte_end":7477,"line_start":47,"line_end":47,"column_start":5,"column_end":106}}]},{"kind":"Field","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7564,"byte_end":7570,"line_start":50,"line_end":50,"column_start":9,"column_end":15},"name":"handle","qualname":"::att::Attribute::handle","value":"att::handle::Handle","parent":{"krate":0,"index":306},"children":[],"decl_id":null,"docs":" Unique server-side identifer for attribute\n","sig":null,"attributes":[{"value":"/ Unique server-side identifer for attribute","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7509,"byte_end":7555,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7729,"byte_end":7734,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"value","qualname":"::att::Attribute::value","value":"T","parent":{"krate":0,"index":306},"children":[],"decl_id":null,"docs":" Attribute values can be any fixed length or variable length octet array, which if too large\n can be sent across multiple PDUs\n","sig":null,"attributes":[{"value":"/ Attribute values can be any fixed length or variable length octet array, which if too large","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7584,"byte_end":7679,"line_start":51,"line_end":51,"column_start":5,"column_end":100}},{"value":"/ can be sent across multiple PDUs","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7684,"byte_end":7720,"line_start":52,"line_end":52,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7822,"byte_end":7825,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<Attribute<T>>::new","value":"pub fn new(AttUuid, Handle, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new attribute.\n","sig":null,"attributes":[{"value":"/ Creates a new attribute.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7782,"byte_end":7810,"line_start":57,"line_end":57,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8084,"byte_end":8089,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"value","qualname":"<Attribute<T>>::value","value":"pub fn value(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the attribute's value as a slice.\n","sig":null,"attributes":[{"value":"/ Retrieves the attribute's value as a slice.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8025,"byte_end":8072,"line_start":67,"line_end":67,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8210,"byte_end":8219,"line_start":73,"line_end":73,"column_start":12,"column_end":21},"name":"set_value","qualname":"<Attribute<T>>::set_value","value":"pub fn set_value(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Overrides the previously set attribute's value.\n","sig":null,"attributes":[{"value":"/ Overrides the previously set attribute's value.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8147,"byte_end":8198,"line_start":72,"line_end":72,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8322,"byte_end":8330,"line_start":79,"line_end":79,"column_start":5,"column_end":13},"name":"Readable","qualname":"::att::AttributeAccessPermissions::Readable","value":"AttributeAccessPermissions::Readable","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8336,"byte_end":8345,"line_start":80,"line_end":80,"column_start":5,"column_end":14},"name":"Writeable","qualname":"::att::AttributeAccessPermissions::Writeable","value":"AttributeAccessPermissions::Writeable","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8351,"byte_end":8371,"line_start":81,"line_end":81,"column_start":5,"column_end":25},"name":"ReadableAndWriteable","qualname":"::att::AttributeAccessPermissions::ReadableAndWriteable","value":"AttributeAccessPermissions::ReadableAndWriteable","parent":{"krate":0,"index":316},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8289,"byte_end":8315,"line_start":78,"line_end":78,"column_start":10,"column_end":36},"name":"AttributeAccessPermissions","qualname":"::att::AttributeAccessPermissions","value":"pub enum AttributeAccessPermissions {\n    Readable,\n    Writeable,\n    ReadableAndWriteable,\n}","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":321}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9132,"byte_end":9149,"line_start":108,"line_end":108,"column_start":11,"column_end":28},"name":"AttributeProvider","qualname":"::att::AttributeProvider","value":"AttributeProvider","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" Trait for attribute sets that can be hosted by an `AttributeServer`.\n","sig":null,"attributes":[{"value":"/ Trait for attribute sets that can be hosted by an `AttributeServer`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9049,"byte_end":9121,"line_start":107,"line_end":107,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9704,"byte_end":9722,"line_start":117,"line_end":117,"column_start":8,"column_end":26},"name":"for_attrs_in_range","qualname":"::att::AttributeProvider::for_attrs_in_range","value":"pub fn for_attrs_in_range<impl FnMut(&Self, &Attribute<dyn AsRef<[u8]>>) -> Result<(), Error>: FnMut(&Self,\n                                                                                                     &Attribute<dyn\n                                                                                                                AsRef<[u8]>>)\n                          ->\n                          Result<(),\n                                 Error>>(&mut Self, HandleRange,\n                                         impl FnMut(&Self, &Attribute<dyn AsRef<[u8]>>) -> Result<(), Error>)\n-> Result<(), Error>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Calls a closure `f` with every attribute whose handle is inside `range`, ascending.","sig":null,"attributes":[{"value":"/ Calls a closure `f` with every attribute whose handle is inside `range`, ascending.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9156,"byte_end":9243,"line_start":109,"line_end":109,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9248,"byte_end":9251,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If `f` returns an error, this function will stop calling `f` and propagate the error","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9256,"byte_end":9344,"line_start":111,"line_end":111,"column_start":5,"column_end":93}},{"value":"/ upwards. If `f` returns `Ok(())`, iteration will continue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9349,"byte_end":9411,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9416,"byte_end":9419,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ This function would ideally return an iterator instead of invoking a callback, but it's not","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9424,"byte_end":9519,"line_start":114,"line_end":114,"column_start":5,"column_end":100}},{"value":"/ currently possible to express the iterator type generically (it would need lifetime-generic","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9524,"byte_end":9619,"line_start":115,"line_end":115,"column_start":5,"column_end":100}},{"value":"/ associated types), and all workarounds seem to be severely limiting.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9624,"byte_end":9696,"line_start":116,"line_end":116,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10012,"byte_end":10028,"line_start":125,"line_end":125,"column_start":8,"column_end":24},"name":"is_grouping_attr","qualname":"::att::AttributeProvider::is_grouping_attr","value":"pub fn is_grouping_attr(&Self, AttUuid) -> bool","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Returns whether `uuid` is a valid grouping attribute type that can be used in *Read By\n Group Type* requests.\n","sig":null,"attributes":[{"value":"/ Returns whether `uuid` is a valid grouping attribute type that can be used in *Read By","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9884,"byte_end":9974,"line_start":123,"line_end":123,"column_start":5,"column_end":95}},{"value":"/ Group Type* requests.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":9979,"byte_end":10004,"line_start":124,"line_end":124,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10868,"byte_end":10877,"line_start":142,"line_end":142,"column_start":8,"column_end":17},"name":"group_end","qualname":"::att::AttributeProvider::group_end","value":"pub fn group_end(&Self, Handle) -> Option<&Attribute<dyn AsRef<[u8]>>>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Queries the last attribute that is part of the attribute group denoted by the grouping\n attribute at `handle`.","sig":null,"attributes":[{"value":"/ Queries the last attribute that is part of the attribute group denoted by the grouping","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10065,"byte_end":10155,"line_start":127,"line_end":127,"column_start":5,"column_end":95}},{"value":"/ attribute at `handle`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10160,"byte_end":10186,"line_start":128,"line_end":128,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10191,"byte_end":10194,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ If `handle` does not refer to a grouping attribute, returns `None`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10199,"byte_end":10270,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10275,"byte_end":10278,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Groups themselves are collections of attributes. An attribute is in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10283,"byte_end":10354,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ exactly zero or one groups.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10359,"byte_end":10390,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10395,"byte_end":10398,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ For primary services and secondary services, the BLE specification gives","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10403,"byte_end":10479,"line_start":135,"line_end":135,"column_start":5,"column_end":81}},{"value":"/ exact definitions of what's in the group. The group begins with the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10484,"byte_end":10555,"line_start":136,"line_end":136,"column_start":5,"column_end":76}},{"value":"/ \"primary service\" or \"secondary service\" attribute, is followed by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10560,"byte_end":10630,"line_start":137,"line_end":137,"column_start":5,"column_end":75}},{"value":"/ the various attributes contained within that service, and ends with the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10635,"byte_end":10710,"line_start":138,"line_end":138,"column_start":5,"column_end":80}},{"value":"/ last attribute contained within that service.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10715,"byte_end":10764,"line_start":139,"line_end":139,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10769,"byte_end":10772,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ TODO: document what the BLE spec has to say about grouping for characteristics.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10777,"byte_end":10860,"line_start":141,"line_end":141,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11361,"byte_end":11384,"line_start":152,"line_end":152,"column_start":8,"column_end":31},"name":"attr_access_permissions","qualname":"::att::AttributeProvider::attr_access_permissions","value":"pub fn attr_access_permissions(&Self, Handle) -> AttributeAccessPermissions","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Retrieves the permissions for the given attribute.","sig":null,"attributes":[{"value":"/ Retrieves the permissions for the given attribute.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":10946,"byte_end":11000,"line_start":144,"line_end":144,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11005,"byte_end":11008,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ These are used purely for access control within rubble, and won't be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11013,"byte_end":11085,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/ communicated with clients. They should be coordinated beforehand as part","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11090,"byte_end":11166,"line_start":147,"line_end":147,"column_start":5,"column_end":81}},{"value":"/ of a larger protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11171,"byte_end":11196,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11201,"byte_end":11204,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Defaults to read-only. If this is overwritten and some attributes are made writeable,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11209,"byte_end":11298,"line_start":150,"line_end":150,"column_start":5,"column_end":94}},{"value":"/ `write_attribute` must be implemented as well.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11303,"byte_end":11353,"line_start":151,"line_end":151,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11900,"byte_end":11910,"line_start":165,"line_end":165,"column_start":8,"column_end":18},"name":"write_attr","qualname":"::att::AttributeProvider::write_attr","value":"pub fn write_attr(&mut Self, Handle, &[u8]) -> Result<(), Error>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Attempts to write data to the given attribute.","sig":null,"attributes":[{"value":"/ Attempts to write data to the given attribute.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11497,"byte_end":11547,"line_start":156,"line_end":156,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11552,"byte_end":11555,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This will only be called on handles for which","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11560,"byte_end":11609,"line_start":158,"line_end":158,"column_start":5,"column_end":54}},{"value":"/ `attribute_access_permissions` returns","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11614,"byte_end":11656,"line_start":159,"line_end":159,"column_start":5,"column_end":47}},{"value":"/ [`AttributeAccessPermissions::Writeable`]","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11661,"byte_end":11706,"line_start":160,"line_end":160,"column_start":5,"column_end":50}},{"value":"/ or [`AttributeAccessPermissions::ReadableAndWriteable`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11711,"byte_end":11771,"line_start":161,"line_end":161,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11776,"byte_end":11779,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ By default, panics on all writes. This must be overwritten if","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11784,"byte_end":11849,"line_start":163,"line_end":163,"column_start":5,"column_end":70}},{"value":"/ `attribute_access_permissions` is.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":11854,"byte_end":11892,"line_start":164,"line_end":164,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12328,"byte_end":12345,"line_start":175,"line_end":175,"column_start":8,"column_end":25},"name":"read_attr_dynamic","qualname":"::att::AttributeProvider::read_attr_dynamic","value":"pub fn read_attr_dynamic(&mut Self, Handle, &mut [u8]) -> Option<usize>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" If this read is from dynamic data fill the buffer and return the length of the data.\n If not return None.","sig":null,"attributes":[{"value":"/ If this read is from dynamic data fill the buffer and return the length of the data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12110,"byte_end":12198,"line_start":169,"line_end":169,"column_start":5,"column_end":93}},{"value":"/ If not return None.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12203,"byte_end":12226,"line_start":170,"line_end":170,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12231,"byte_end":12234,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Currently the buffer is 256 bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12239,"byte_end":12277,"line_start":172,"line_end":172,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12282,"byte_end":12285,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ By default returns `None`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12290,"byte_end":12320,"line_start":174,"line_end":174,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12626,"byte_end":12644,"line_start":181,"line_end":181,"column_start":8,"column_end":26},"name":"prepare_write_attr","qualname":"::att::AttributeProvider::prepare_write_attr","value":"pub fn prepare_write_attr(&mut Self, Handle, u16, &[u8]) -> Result<(), Error>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" In order to write data longer than what would fit one write request the procedure is explained in\n BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part F section 3.4.6.\n","sig":null,"attributes":[{"value":"/ In order to write data longer than what would fit one write request the procedure is explained in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12437,"byte_end":12538,"line_start":179,"line_end":179,"column_start":5,"column_end":106}},{"value":"/ BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part F section 3.4.6.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12543,"byte_end":12618,"line_start":180,"line_end":180,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13057,"byte_end":13075,"line_start":192,"line_end":192,"column_start":8,"column_end":26},"name":"execute_write_attr","qualname":"::att::AttributeProvider::execute_write_attr","value":"pub fn execute_write_attr(&mut Self, u8) -> Result<(), Error>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" In order to write data longer than what would fit one write request the procedure is explained in\n BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part F section 3.4.6.\n","sig":null,"attributes":[{"value":"/ In order to write data longer than what would fit one write request the procedure is explained in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12868,"byte_end":12969,"line_start":190,"line_end":190,"column_start":5,"column_end":106}},{"value":"/ BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part F section 3.4.6.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":12974,"byte_end":13049,"line_start":191,"line_end":191,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13342,"byte_end":13358,"line_start":197,"line_end":197,"column_start":8,"column_end":24},"name":"find_information","qualname":"::att::AttributeProvider::find_information","value":"pub fn find_information(&mut Self, HandleRange, &mut Sender)\n-> Result<(), Error>","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" See BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part F section 3.4.3.1 on what to implement here.\n","sig":null,"attributes":[{"value":"/ See BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part F section 3.4.3.1 on what to implement here.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13227,"byte_end":13334,"line_start":196,"line_end":196,"column_start":5,"column_end":112}}]},{"kind":"Struct","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13705,"byte_end":13717,"line_start":209,"line_end":209,"column_start":12,"column_end":24},"name":"NoAttributes","qualname":"::att::NoAttributes","value":"","parent":null,"children":[],"decl_id":null,"docs":" An empty attribute set.","sig":null,"attributes":[{"value":"/ An empty attribute set.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13609,"byte_end":13636,"line_start":206,"line_end":206,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13637,"byte_end":13640,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ FIXME: Is this even legal according to the spec?","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13641,"byte_end":13693,"line_start":208,"line_end":208,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"beacon","qualname":"::beacon","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":407},{"krate":0,"index":411},{"krate":0,"index":418},{"krate":0,"index":421}],"decl_id":null,"docs":" BLE beacon support, without dealing with Link-Layer stuff.\n","sig":null,"attributes":[{"value":"/ BLE beacon support, without dealing with Link-Layer stuff.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":63501,"byte_end":63563,"line_start":1,"line_end":1,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":63986,"byte_end":63992,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Beacon","qualname":"::beacon::Beacon","value":"Beacon {  }","parent":null,"children":[{"krate":0,"index":402}],"decl_id":null,"docs":" A BLE beacon.","sig":null,"attributes":[{"value":"/ A BLE beacon.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":63891,"byte_end":63908,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":63909,"byte_end":63912,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ FIXME: This has to randomly offset the broadcast interval","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":63913,"byte_end":63974,"line_start":14,"line_end":14,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64409,"byte_end":64412,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<Beacon>::new","value":"pub fn new(DeviceAddress, &[AdStructure]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new beacon that will broadcast a packet on all advertisement\n channels.","sig":null,"attributes":[{"value":"/ Creates a new beacon that will broadcast a packet on all advertisement","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64033,"byte_end":64107,"line_start":20,"line_end":20,"column_start":5,"column_end":79}},{"value":"/ channels.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64112,"byte_end":64125,"line_start":21,"line_end":21,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64130,"byte_end":64133,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64138,"byte_end":64154,"line_start":23,"line_end":23,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64159,"byte_end":64162,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ * **`addr`**: Address of the beacon device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64167,"byte_end":64214,"line_start":25,"line_end":25,"column_start":5,"column_end":52}},{"value":"/ * **`data`**: Data to broadcast. This must fit within a single PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64219,"byte_end":64290,"line_start":26,"line_end":26,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64295,"byte_end":64298,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64303,"byte_end":64315,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64320,"byte_end":64323,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ If `data` doesn't fit in a single PDU, an error will be returned.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64328,"byte_end":64397,"line_start":30,"line_end":30,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64693,"byte_end":64702,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<Beacon>::broadcast","value":"pub fn broadcast<T: Transmitter>(&Self, &mut T)","parent":null,"children":[],"decl_id":null,"docs":" Broadcasts the beacon data using `tx`.","sig":null,"attributes":[{"value":"/ Broadcasts the beacon data using `tx`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64568,"byte_end":64610,"line_start":36,"line_end":36,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64615,"byte_end":64618,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This will broadcast once on every advertising channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64623,"byte_end":64681,"line_start":38,"line_end":38,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65452,"byte_end":65464,"line_start":57,"line_end":57,"column_start":11,"column_end":23},"name":"ScanCallback","qualname":"::beacon::ScanCallback","value":"ScanCallback","parent":null,"children":[{"krate":0,"index":408}],"decl_id":null,"docs":" Callback for the [`BeaconScanner`].\n","sig":null,"attributes":[{"value":"/ Callback for the [`BeaconScanner`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65402,"byte_end":65441,"line_start":56,"line_end":56,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65751,"byte_end":65757,"line_start":64,"line_end":64,"column_start":8,"column_end":14},"name":"beacon","qualname":"::beacon::ScanCallback::beacon","value":"pub fn beacon<'a, I>(&mut Self, DeviceAddress, I) where I: Iterator<Item =\nAdStructure>","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Called when a beacon is received and has passed the configured device address filter.","sig":null,"attributes":[{"value":"/ Called when a beacon is received and has passed the configured device address filter.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65471,"byte_end":65560,"line_start":58,"line_end":58,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65565,"byte_end":65568,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65573,"byte_end":65589,"line_start":60,"line_end":60,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65594,"byte_end":65597,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ * **`adv_addr`**: Address of the device sending the beacon.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65602,"byte_end":65665,"line_start":62,"line_end":62,"column_start":5,"column_end":68}},{"value":"/ * **`adv_data`**: Advertising data structures attached to the beacon.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65670,"byte_end":65743,"line_start":63,"line_end":63,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65948,"byte_end":65961,"line_start":70,"line_end":70,"column_start":12,"column_end":25},"name":"BeaconScanner","qualname":"::beacon::BeaconScanner","value":"BeaconScanner {  }","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"decl_id":null,"docs":" A passive scanner for non-connectable beacon advertisements.\n","sig":null,"attributes":[{"value":"/ A passive scanner for non-connectable beacon advertisements.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":65872,"byte_end":65936,"line_start":69,"line_end":69,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66243,"byte_end":66246,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"new","qualname":"<BeaconScanner<C, filter::AllowAll>>::new","value":"pub fn new(C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BeaconScanner` that will report beacons from any device.\n","sig":null,"attributes":[{"value":"/ Creates a `BeaconScanner` that will report beacons from any device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66160,"byte_end":66231,"line_start":78,"line_end":78,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66469,"byte_end":66480,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"with_filter","qualname":"<BeaconScanner<C, F>>::with_filter","value":"pub fn with_filter(C, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BeaconScanner` with a custom device filter.\n","sig":null,"attributes":[{"value":"/ Creates a `BeaconScanner` with a custom device filter.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66399,"byte_end":66457,"line_start":85,"line_end":85,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":67093,"byte_end":67102,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"configure","qualname":"<BeaconScanner<C, F>>::configure","value":"pub fn configure(&mut Self, Instant, Duration) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Configures the `BeaconScanner` and returns a `Cmd` to apply to the radio.","sig":null,"attributes":[{"value":"/ Configures the `BeaconScanner` and returns a `Cmd` to apply to the radio.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66730,"byte_end":66807,"line_start":95,"line_end":95,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66812,"byte_end":66815,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The `next_update` field of the returned `Cmd` specifies when to call `timer_update` the next","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66820,"byte_end":66916,"line_start":97,"line_end":97,"column_start":5,"column_end":101}},{"value":"/ time. The timer used for this does not have to be very accurate, it is only used to switch","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66921,"byte_end":67015,"line_start":98,"line_end":98,"column_start":5,"column_end":99}},{"value":"/ to the next advertising channel after `interval` elapses.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":67020,"byte_end":67081,"line_start":99,"line_end":99,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":67675,"byte_end":67687,"line_start":119,"line_end":119,"column_start":12,"column_end":24},"name":"timer_update","qualname":"<BeaconScanner<C, F>>::timer_update","value":"pub fn timer_update(&mut Self, Instant) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BeaconScanner` after the configured timer has fired.","sig":null,"attributes":[{"value":"/ Updates the `BeaconScanner` after the configured timer has fired.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":67509,"byte_end":67578,"line_start":116,"line_end":116,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":67583,"byte_end":67586,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This switches to the next advertising channel and will listen there.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":67591,"byte_end":67663,"line_start":118,"line_end":118,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":68219,"byte_end":68237,"line_start":138,"line_end":138,"column_start":12,"column_end":30},"name":"process_adv_packet","qualname":"<BeaconScanner<C, F>>::process_adv_packet","value":"pub fn process_adv_packet(&mut Self, Header, &[u8], bool) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Processes a received advertising channel packet.","sig":null,"attributes":[{"value":"/ Processes a received advertising channel packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":68033,"byte_end":68085,"line_start":134,"line_end":134,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":68090,"byte_end":68093,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ This should be called whenever the radio receives a packet on the configured advertising","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":68098,"byte_end":68190,"line_start":136,"line_end":136,"column_start":5,"column_end":97}},{"value":"/ channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":68195,"byte_end":68207,"line_start":137,"line_end":137,"column_start":5,"column_end":17}}]},{"kind":"Mod","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bytes","qualname":"::bytes","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":456},{"krate":0,"index":460},{"krate":0,"index":469},{"krate":0,"index":473},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":487},{"krate":0,"index":491},{"krate":0,"index":495},{"krate":0,"index":499},{"krate":0,"index":503},{"krate":0,"index":507},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":521},{"krate":0,"index":525},{"krate":0,"index":530},{"krate":0,"index":534},{"krate":0,"index":551},{"krate":0,"index":555},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":2468},{"krate":0,"index":2473},{"krate":0,"index":2481},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":602},{"krate":0,"index":608},{"krate":0,"index":612},{"krate":0,"index":616}],"decl_id":null,"docs":" Utilities for decoding from and encoding into bytes.","sig":null,"attributes":[{"value":"/ Utilities for decoding from and encoding into bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":68967,"byte_end":69023,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69024,"byte_end":69027,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines zero-copy (de)serialization traits, [`ToBytes`] and [`FromBytes`], as well","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69028,"byte_end":69126,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ as the helper structs [`ByteWriter`] and [`ByteReader`], which wrap a `&mut [u8]` or `&[u8]`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69127,"byte_end":69223,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ and offer useful utilities to read and write values.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69224,"byte_end":69280,"line_start":5,"line_end":5,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69281,"byte_end":69284,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All types that end up getting transmitted over the air will want to implement [`ToBytes`] and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69285,"byte_end":69382,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ [`FromBytes`]. This includes the raw PDUs sent and received on advertising and data channels,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69383,"byte_end":69480,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ as well as messages used by a high-level protocol transferred over L2CAP.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69481,"byte_end":69558,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69559,"byte_end":69562,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Also defined in this module is the [`BytesOr`] type, which can be used to store objects and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69563,"byte_end":69658,"line_start":11,"line_end":11,"column_start":1,"column_end":96}},{"value":"/ slices of objects either as a direct reference or as a `&[u8]` that is lazily decoded.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69659,"byte_end":69749,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69750,"byte_end":69753,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ToBytes`]: trait.ToBytes.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69754,"byte_end":69789,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/ [`FromBytes`]: trait.FromBytes.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69790,"byte_end":69829,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"/ [`ByteWriter`]: struct.ByteWriter.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69830,"byte_end":69872,"line_start":16,"line_end":16,"column_start":1,"column_end":43}},{"value":"/ [`ByteReader`]: struct.ByteReader.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69873,"byte_end":69915,"line_start":17,"line_end":17,"column_start":1,"column_end":43}},{"value":"/ [`BytesOr`]: struct.BytesOr.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":69916,"byte_end":69952,"line_start":18,"line_end":18,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72315,"byte_end":72322,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"BytesOr","qualname":"::bytes::BytesOr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Reference to a `T`, or to a byte slice that can be decoded as a `T`.","sig":null,"attributes":[{"value":"/ Reference to a `T`, or to a byte slice that can be decoded as a `T`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70068,"byte_end":70140,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70141,"byte_end":70144,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Motivation","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70145,"byte_end":70161,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70162,"byte_end":70165,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Many packets can contain dynamically-sized lists of objects. These packets all need to implement","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70166,"byte_end":70266,"line_start":30,"line_end":30,"column_start":1,"column_end":101}},{"value":"/ [`ToBytes`] and [`FromBytes`]. For [`FromBytes`], it is impossible to go from `&[u8]` to `&[T]`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70267,"byte_end":70367,"line_start":31,"line_end":31,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70368,"byte_end":70371,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A workaround is to just store the `&[u8]` and decode `T`s only when necessary. However, this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70372,"byte_end":70468,"line_start":33,"line_end":33,"column_start":1,"column_end":97}},{"value":"/ isn't very type-safe and also makes it difficult to create the type when you have a list of","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70469,"byte_end":70564,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ `T`s, but can't easily get a `&[u8]` (such as when creating a packet to be sent out). You'd have","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70565,"byte_end":70665,"line_start":35,"line_end":35,"column_start":1,"column_end":101}},{"value":"/ to define your own byte buffer and serialize the `T`s into it, which is problematic due to the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70666,"byte_end":70764,"line_start":36,"line_end":36,"column_start":1,"column_end":99}},{"value":"/ potentially unknown size requirement and lifetime management.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70765,"byte_end":70830,"line_start":37,"line_end":37,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70831,"byte_end":70834,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ A workaround around the workaround would be to use 2 types for the same packet: One storing a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70835,"byte_end":70932,"line_start":39,"line_end":39,"column_start":1,"column_end":98}},{"value":"/ `&[u8]` and implementing [`FromBytes`] which can only do *deserialization*, and one storing a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":70933,"byte_end":71030,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ `&[T]` and implementing [`ToBytes`], which can only do *serialization*. This has the obvious","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71031,"byte_end":71127,"line_start":41,"line_end":41,"column_start":1,"column_end":97}},{"value":"/ drawback of essentially duplicating all packet definitions.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71128,"byte_end":71191,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71192,"byte_end":71195,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Rubble's solution for this is `BytesOr`: It can store either an `&[u8]` or a `&T` (where `T`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71196,"byte_end":71292,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ might be a slice), and always implements [`ToBytes`] and [`FromBytes`] if `T` does. Methods","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71293,"byte_end":71388,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ allowing access to the stored `T` (or the elements in the `&[T]` slice) will either directly","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71389,"byte_end":71485,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"/ return the value, or decode it using its [`FromBytes`] implementation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71486,"byte_end":71560,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71561,"byte_end":71564,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ When encoding a `T`, [`BytesOr::from_ref`] can be used to store a `&T` in a `BytesOr`, which can","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71565,"byte_end":71665,"line_start":49,"line_end":49,"column_start":1,"column_end":101}},{"value":"/ then be turned into bytes via [`ToBytes`]. When decoding data, [`FromBytes`] can be used to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71666,"byte_end":71761,"line_start":50,"line_end":50,"column_start":1,"column_end":96}},{"value":"/ create a `BytesOr` from bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71762,"byte_end":71796,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71797,"byte_end":71800,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This type can also be used in structures when storing a `T` directly is not desirable due to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71801,"byte_end":71897,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/ size concerns: It could be inside a rarely-encountered variant or would blow up the total size","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71898,"byte_end":71996,"line_start":54,"line_end":54,"column_start":1,"column_end":99}},{"value":"/ of the containing enum). The size of `BytesOr` is currently 2 `usize`s plus a discriminant byte,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":71997,"byte_end":72097,"line_start":55,"line_end":55,"column_start":1,"column_end":101}},{"value":"/ but could potentially be (unsafely) reduced further, should that be required.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72098,"byte_end":72179,"line_start":56,"line_end":56,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72180,"byte_end":72183,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ [`ToBytes`]: trait.ToBytes.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72184,"byte_end":72219,"line_start":58,"line_end":58,"column_start":1,"column_end":36}},{"value":"/ [`FromBytes`]: trait.FromBytes.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72220,"byte_end":72259,"line_start":59,"line_end":59,"column_start":1,"column_end":40}},{"value":"/ [`BytesOr::from_ref`]: #method.from_ref","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72260,"byte_end":72303,"line_start":60,"line_end":60,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73621,"byte_end":73629,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"from_ref","qualname":"<BytesOr>::from_ref","value":"pub fn from_ref(&'a T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BytesOr` that holds on to a `T` via reference.","sig":null,"attributes":[{"value":"/ Creates a `BytesOr` that holds on to a `T` via reference.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73378,"byte_end":73439,"line_start":105,"line_end":105,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73444,"byte_end":73447,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ For creating a `BytesOr` that references a byte slice, the [`FromBytes`] impl(s) can be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73452,"byte_end":73543,"line_start":107,"line_end":107,"column_start":5,"column_end":96}},{"value":"/ used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73548,"byte_end":73557,"line_start":108,"line_end":108,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73562,"byte_end":73565,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ [`FromBytes`]: trait.FromBytes.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73570,"byte_end":73609,"line_start":110,"line_end":110,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75961,"byte_end":75965,"line_start":172,"line_end":172,"column_start":12,"column_end":16},"name":"read","qualname":"<BytesOr>::read","value":"pub fn read(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the `T`, possibly by parsing the stored bytes.","sig":null,"attributes":[{"value":"/ Reads the `T`, possibly by parsing the stored bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75643,"byte_end":75699,"line_start":166,"line_end":166,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75704,"byte_end":75707,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ If `self` already stores a reference to a `T`, the `T` will just be copied out. If `self`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75712,"byte_end":75805,"line_start":168,"line_end":168,"column_start":5,"column_end":98}},{"value":"/ stores a byte slice, the `T` will be parsed using its [`FromBytes`] implementation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75810,"byte_end":75897,"line_start":169,"line_end":169,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75902,"byte_end":75905,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ [`FromBytes`]: trait.FromBytes.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75910,"byte_end":75949,"line_start":171,"line_end":171,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76523,"byte_end":76527,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"iter","qualname":"<BytesOr>::iter","value":"pub fn iter(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all `T`s stored in `self` (which is just one `T` in this case).","sig":null,"attributes":[{"value":"/ Returns an iterator over all `T`s stored in `self` (which is just one `T` in this case).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76329,"byte_end":76421,"line_start":186,"line_end":186,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76426,"byte_end":76429,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ This method exists to mirror its twin implemented for `BytesOr<'a, [T]>`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76434,"byte_end":76511,"line_start":188,"line_end":188,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76803,"byte_end":76807,"line_start":198,"line_end":198,"column_start":12,"column_end":16},"name":"iter","qualname":"<BytesOr>::iter","value":"pub fn iter(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all `T`s stored in `self`.","sig":null,"attributes":[{"value":"/ Returns an iterator over all `T`s stored in `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76667,"byte_end":76722,"line_start":195,"line_end":195,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76727,"byte_end":76730,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ The iterator will copy or decode `T`s out of `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76735,"byte_end":76791,"line_start":197,"line_end":197,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77986,"byte_end":77996,"line_start":237,"line_end":237,"column_start":12,"column_end":22},"name":"ByteWriter","qualname":"::bytes::ByteWriter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper around a byte slice that can be used to encode data into bytes.","sig":null,"attributes":[{"value":"/ Wrapper around a byte slice that can be used to encode data into bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77785,"byte_end":77860,"line_start":233,"line_end":233,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77861,"byte_end":77864,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ All `write_*` methods on this type will return `Error::Eof` when the underlying buffer slice is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77865,"byte_end":77964,"line_start":235,"line_end":235,"column_start":1,"column_end":100}},{"value":"/ full.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77965,"byte_end":77974,"line_start":236,"line_end":236,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78105,"byte_end":78108,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteWriter>::new","value":"pub fn new(&'a mut [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that will write to `buf`.\n","sig":null,"attributes":[{"value":"/ Creates a writer that will write to `buf`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78047,"byte_end":78093,"line_start":240,"line_end":240,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78291,"byte_end":78300,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"into_rest","qualname":"<ByteWriter>::into_rest","value":"pub fn into_rest(Self) -> &'a mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Consumes `self` and returns the part of the contained buffer that has not yet been written\n to.\n","sig":null,"attributes":[{"value":"/ Consumes `self` and returns the part of the contained buffer that has not yet been written","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78173,"byte_end":78267,"line_start":245,"line_end":245,"column_start":5,"column_end":99}},{"value":"/ to.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78272,"byte_end":78279,"line_start":246,"line_end":246,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78531,"byte_end":78535,"line_start":254,"line_end":254,"column_start":12,"column_end":16},"name":"rest","qualname":"<ByteWriter>::rest","value":"pub fn rest(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw buffer this `ByteWriter` would write to.","sig":null,"attributes":[{"value":"/ Returns the raw buffer this `ByteWriter` would write to.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78351,"byte_end":78411,"line_start":251,"line_end":251,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78416,"byte_end":78419,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Combined with `skip`, this method allows advanced operations on the underlying byte buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78424,"byte_end":78519,"line_start":253,"line_end":253,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78987,"byte_end":78991,"line_start":263,"line_end":263,"column_start":12,"column_end":16},"name":"skip","qualname":"<ByteWriter>::skip","value":"pub fn skip(&mut Self, usize) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Skips the given number of bytes in the output data without writing anything there.","sig":null,"attributes":[{"value":"/ Skips the given number of bytes in the output data without writing anything there.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78588,"byte_end":78674,"line_start":258,"line_end":258,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78679,"byte_end":78682,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is a potentially dangerous operation that should only be used when necessary (eg. when","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78687,"byte_end":78782,"line_start":260,"line_end":260,"column_start":5,"column_end":100}},{"value":"/ the skipped data will be filled in by other code). If the skipped bytes are *not* written,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78787,"byte_end":78881,"line_start":261,"line_end":261,"column_start":5,"column_end":99}},{"value":"/ they will probably contain garbage data from an earlier use of the underlying buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78886,"byte_end":78975,"line_start":262,"line_end":262,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79871,"byte_end":79880,"line_start":282,"line_end":282,"column_start":12,"column_end":21},"name":"split_off","qualname":"<ByteWriter>::split_off","value":"pub fn split_off(&mut Self, usize) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates and returns another `ByteWriter` that can write to the next `len` Bytes in the\n buffer.","sig":null,"attributes":[{"value":"/ Creates and returns another `ByteWriter` that can write to the next `len` Bytes in the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79264,"byte_end":79354,"line_start":273,"line_end":273,"column_start":5,"column_end":95}},{"value":"/ buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79359,"byte_end":79370,"line_start":274,"line_end":274,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79375,"byte_end":79378,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ `self` will be modified to point after the split-off bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79383,"byte_end":79446,"line_start":276,"line_end":276,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79451,"byte_end":79454,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Note that if the created `ByteWriter` is not used, the bytes will contain whatever contents","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79459,"byte_end":79554,"line_start":278,"line_end":278,"column_start":5,"column_end":100}},{"value":"/ they had before creating `self` (ie. most likely garbage data left over from earlier use).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79559,"byte_end":79653,"line_start":279,"line_end":279,"column_start":5,"column_end":99}},{"value":"/ If you are really sure you want that, `skip` is a more explicit way of accomplishing that.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79658,"byte_end":79752,"line_start":280,"line_end":280,"column_start":5,"column_end":99}},{"value":"must_use =\n  \"data from ByteWriter will contain garbage if not used (use skip() if this is intended)\"","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":79757,"byte_end":79859,"line_start":281,"line_end":281,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80578,"byte_end":80592,"line_start":302,"line_end":302,"column_start":12,"column_end":26},"name":"split_next_mut","qualname":"<ByteWriter>::split_next_mut","value":"pub fn split_next_mut(&mut Self) -> Option<&'a mut u8>","parent":null,"children":[],"decl_id":null,"docs":" Splits off the next byte in the buffer.","sig":null,"attributes":[{"value":"/ Splits off the next byte in the buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80211,"byte_end":80254,"line_start":293,"line_end":293,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80259,"byte_end":80262,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The writer will be advanced to point to the rest of the underlying buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80267,"byte_end":80345,"line_start":295,"line_end":295,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80350,"byte_end":80353,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This allows filling in the value of the byte later, after writing more data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80358,"byte_end":80438,"line_start":297,"line_end":297,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80443,"byte_end":80446,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ For a similar, but more flexible operation, see [`split_off`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80451,"byte_end":80517,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80522,"byte_end":80525,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ [`split_off`]: #method.split_off","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80530,"byte_end":80566,"line_start":301,"line_end":301,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81060,"byte_end":81070,"line_start":316,"line_end":316,"column_start":12,"column_end":22},"name":"space_left","qualname":"<ByteWriter>::space_left","value":"pub fn space_left(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that can be written to `self` until it is full.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that can be written to `self` until it is full.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":80969,"byte_end":81048,"line_start":315,"line_end":315,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81325,"byte_end":81336,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"write_slice","qualname":"<ByteWriter>::write_slice","value":"pub fn write_slice(&mut Self, &[u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Writes all bytes from `other` to `self`.","sig":null,"attributes":[{"value":"/ Writes all bytes from `other` to `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81121,"byte_end":81165,"line_start":320,"line_end":320,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81170,"byte_end":81173,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::Eof` when `self` does not have enough space left to fit `other`. In that","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81178,"byte_end":81270,"line_start":322,"line_end":322,"column_start":5,"column_end":97}},{"value":"/ case, `self` will not be modified.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81275,"byte_end":81313,"line_start":323,"line_end":323,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81805,"byte_end":81825,"line_start":338,"line_end":338,"column_start":12,"column_end":32},"name":"write_slice_truncate","qualname":"<ByteWriter>::write_slice_truncate","value":"pub fn write_slice_truncate(&mut Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Writes as many bytes as can fit from `other` into `self`.","sig":null,"attributes":[{"value":"/ Writes as many bytes as can fit from `other` into `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81679,"byte_end":81740,"line_start":335,"line_end":335,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81745,"byte_end":81748,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":81753,"byte_end":81793,"line_start":337,"line_end":337,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82129,"byte_end":82137,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"write_u8","qualname":"<ByteWriter>::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single byte to `self`.","sig":null,"attributes":[{"value":"/ Writes a single byte to `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82022,"byte_end":82057,"line_start":345,"line_end":345,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82062,"byte_end":82065,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::Eof` when no space is left.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82070,"byte_end":82117,"line_start":347,"line_end":347,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82499,"byte_end":82511,"line_start":358,"line_end":358,"column_start":12,"column_end":24},"name":"write_u16_le","qualname":"<ByteWriter>::write_u16_le","value":"pub fn write_u16_le(&mut Self, u16) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Writes a `u16` to `self`, using Little Endian byte order.","sig":null,"attributes":[{"value":"/ Writes a `u16` to `self`, using Little Endian byte order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82293,"byte_end":82354,"line_start":354,"line_end":354,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82359,"byte_end":82362,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If `self` does not have enough space left, an error will be returned and no bytes will be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82367,"byte_end":82460,"line_start":356,"line_end":356,"column_start":5,"column_end":98}},{"value":"/ written to `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82465,"byte_end":82487,"line_start":357,"line_end":357,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82822,"byte_end":82834,"line_start":366,"line_end":366,"column_start":12,"column_end":24},"name":"write_u32_le","qualname":"<ByteWriter>::write_u32_le","value":"pub fn write_u32_le(&mut Self, u32) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Writes a `u32` to `self`, using Little Endian byte order.","sig":null,"attributes":[{"value":"/ Writes a `u32` to `self`, using Little Endian byte order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82616,"byte_end":82677,"line_start":362,"line_end":362,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82682,"byte_end":82685,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ If `self` does not have enough space left, an error will be returned and no bytes will be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82690,"byte_end":82783,"line_start":364,"line_end":364,"column_start":5,"column_end":98}},{"value":"/ written to `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82788,"byte_end":82810,"line_start":365,"line_end":365,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83145,"byte_end":83157,"line_start":374,"line_end":374,"column_start":12,"column_end":24},"name":"write_u64_le","qualname":"<ByteWriter>::write_u64_le","value":"pub fn write_u64_le(&mut Self, u64) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Writes a `u64` to `self`, using Little Endian byte order.","sig":null,"attributes":[{"value":"/ Writes a `u64` to `self`, using Little Endian byte order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":82939,"byte_end":83000,"line_start":370,"line_end":370,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83005,"byte_end":83008,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If `self` does not have enough space left, an error will be returned and no bytes will be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83013,"byte_end":83106,"line_start":372,"line_end":372,"column_start":5,"column_end":98}},{"value":"/ written to `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83111,"byte_end":83133,"line_start":373,"line_end":373,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83334,"byte_end":83343,"line_start":379,"line_end":379,"column_start":12,"column_end":21},"name":"write_obj","qualname":"<ByteWriter>::write_obj","value":"pub fn write_obj<T: zerocopy::AsBytes>(&mut Self, &T) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Writes a value to the stream by transmuting it to bytes.\n","sig":null,"attributes":[{"value":"/ Writes a value to the stream by transmuting it to bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83262,"byte_end":83322,"line_start":378,"line_end":378,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83524,"byte_end":83534,"line_start":385,"line_end":385,"column_start":12,"column_end":22},"name":"ByteReader","qualname":"::bytes::ByteReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Allows reading values from a borrowed byte slice.\n","sig":null,"attributes":[{"value":"/ Allows reading values from a borrowed byte slice.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83459,"byte_end":83512,"line_start":384,"line_end":384,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83665,"byte_end":83668,"line_start":389,"line_end":389,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteReader>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `ByteReader` that will read from the given byte slice.\n","sig":null,"attributes":[{"value":"/ Creates a new `ByteReader` that will read from the given byte slice.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83581,"byte_end":83653,"line_start":388,"line_end":388,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83850,"byte_end":83862,"line_start":395,"line_end":395,"column_start":12,"column_end":24},"name":"as_raw_bytes","qualname":"<ByteReader>::as_raw_bytes","value":"pub fn as_raw_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the raw bytes in `self`, without advancing `self` or reading any\n data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the raw bytes in `self`, without advancing `self` or reading any","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83733,"byte_end":83824,"line_start":393,"line_end":393,"column_start":5,"column_end":96}},{"value":"/ data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83829,"byte_end":83838,"line_start":394,"line_end":394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84027,"byte_end":84036,"line_start":401,"line_end":401,"column_start":12,"column_end":21},"name":"into_rest","qualname":"<ByteReader>::into_rest","value":"pub fn into_rest(Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Consumes `self` and returns the part of the contained buffer that has not yet been read\n from.\n","sig":null,"attributes":[{"value":"/ Consumes `self` and returns the part of the contained buffer that has not yet been read","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83910,"byte_end":84001,"line_start":399,"line_end":399,"column_start":5,"column_end":96}},{"value":"/ from.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84006,"byte_end":84015,"line_start":400,"line_end":400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84301,"byte_end":84305,"line_start":409,"line_end":409,"column_start":12,"column_end":16},"name":"skip","qualname":"<ByteReader>::skip","value":"pub fn skip(&mut Self, usize) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Skips the given number of bytes in the input data without inspecting them.","sig":null,"attributes":[{"value":"/ Skips the given number of bytes in the input data without inspecting them.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84083,"byte_end":84161,"line_start":405,"line_end":405,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84166,"byte_end":84169,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This is a potentially dangerous operation that should only be used when the bytes really do","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84174,"byte_end":84269,"line_start":407,"line_end":407,"column_start":5,"column_end":100}},{"value":"/ not matter.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84274,"byte_end":84289,"line_start":408,"line_end":408,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85054,"byte_end":85063,"line_start":427,"line_end":427,"column_start":12,"column_end":21},"name":"split_off","qualname":"<ByteReader>::split_off","value":"pub fn split_off(&mut Self, usize) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates and returns another `ByteReader` that will read from the next `len` Bytes in the\n buffer.","sig":null,"attributes":[{"value":"/ Creates and returns another `ByteReader` that will read from the next `len` Bytes in the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84517,"byte_end":84609,"line_start":418,"line_end":418,"column_start":5,"column_end":97}},{"value":"/ buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84614,"byte_end":84625,"line_start":419,"line_end":419,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84630,"byte_end":84633,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ `self` will be modified to point after the split-off bytes, and will continue reading from","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84638,"byte_end":84732,"line_start":421,"line_end":421,"column_start":5,"column_end":99}},{"value":"/ there.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84737,"byte_end":84747,"line_start":422,"line_end":422,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84752,"byte_end":84755,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Note that if the created `ByteReader` is not used, the bytes will be ignored. If you are","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84760,"byte_end":84852,"line_start":424,"line_end":424,"column_start":5,"column_end":97}},{"value":"/ really sure you want that, `skip` is a more explicit way of accomplishing that.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84857,"byte_end":84940,"line_start":425,"line_end":425,"column_start":5,"column_end":88}},{"value":"must_use =\n  \"data from ByteReader will be ignored if not used (use skip() if this is intended)\"","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":84945,"byte_end":85042,"line_start":426,"line_end":426,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85424,"byte_end":85434,"line_start":438,"line_end":438,"column_start":12,"column_end":22},"name":"bytes_left","qualname":"<ByteReader>::bytes_left","value":"pub fn bytes_left(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that can still be read from `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that can still be read from `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85345,"byte_end":85412,"line_start":437,"line_end":437,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85650,"byte_end":85658,"line_start":445,"line_end":445,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ByteReader>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether `self` is at the end of the underlying buffer (EOF).","sig":null,"attributes":[{"value":"/ Returns whether `self` is at the end of the underlying buffer (EOF).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85485,"byte_end":85557,"line_start":442,"line_end":442,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85562,"byte_end":85565,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ If this returns `true`, no data can be read from `self` anymore.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85570,"byte_end":85638,"line_start":444,"line_end":444,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85835,"byte_end":85843,"line_start":451,"line_end":451,"column_start":12,"column_end":20},"name":"read_obj","qualname":"<ByteReader>::read_obj","value":"pub fn read_obj<T: zerocopy::FromBytes + zerocopy::Unaligned>(&mut Self)\n-> Result<&'a T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a `zerocopy`-supported object from the stream by transmuting an appropriate number of\n bytes.\n","sig":null,"attributes":[{"value":"/ Reads a `zerocopy`-supported object from the stream by transmuting an appropriate number of","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85713,"byte_end":85808,"line_start":449,"line_end":449,"column_start":5,"column_end":100}},{"value":"/ bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":85813,"byte_end":85823,"line_start":450,"line_end":450,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86347,"byte_end":86357,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"read_slice","qualname":"<ByteReader>::read_slice","value":"pub fn read_slice(&mut Self, usize) -> Result<&'a [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a byte slice of length `len` from `self`.","sig":null,"attributes":[{"value":"/ Reads a byte slice of length `len` from `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86155,"byte_end":86206,"line_start":460,"line_end":460,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86211,"byte_end":86214,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ If `self` contains less than `len` bytes, `Error::Eof` will be returned and `self` will not","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86219,"byte_end":86314,"line_start":462,"line_end":462,"column_start":5,"column_end":100}},{"value":"/ be modified.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86319,"byte_end":86335,"line_start":463,"line_end":463,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86863,"byte_end":86873,"line_start":478,"line_end":478,"column_start":12,"column_end":22},"name":"read_array","qualname":"<ByteReader>::read_array","value":"pub fn read_array<S>(&mut Self) -> Result<S, Error> where S: Default +\nAsMut<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Reads a byte-array-like type `S` from `self`.","sig":null,"attributes":[{"value":"/ Reads a byte-array-like type `S` from `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86612,"byte_end":86661,"line_start":474,"line_end":474,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86666,"byte_end":86669,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ `S` must implement `Default` and `AsMut<[u8]>`, which allows using small arrays up to 32","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86674,"byte_end":86766,"line_start":476,"line_end":476,"column_start":5,"column_end":97}},{"value":"/ bytes as well as datastructures from `alloc` (eg. `Box<[u8]>` or `Vec<u8>`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":86771,"byte_end":86851,"line_start":477,"line_end":477,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87297,"byte_end":87306,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"read_rest","qualname":"<ByteReader>::read_rest","value":"pub fn read_rest(&mut Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Reads the remaining bytes from `self`.\n","sig":null,"attributes":[{"value":"/ Reads the remaining bytes from `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87243,"byte_end":87285,"line_start":493,"line_end":493,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87512,"byte_end":87519,"line_start":503,"line_end":503,"column_start":12,"column_end":19},"name":"read_u8","qualname":"<ByteReader>::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8, Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a single byte from `self`.","sig":null,"attributes":[{"value":"/ Reads a single byte from `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87405,"byte_end":87441,"line_start":500,"line_end":500,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87446,"byte_end":87449,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::Eof` when `self` is empty.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87454,"byte_end":87500,"line_start":502,"line_end":502,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87684,"byte_end":87695,"line_start":508,"line_end":508,"column_start":12,"column_end":23},"name":"read_u16_le","qualname":"<ByteReader>::read_u16_le","value":"pub fn read_u16_le(&mut Self) -> Result<u16, Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a `u16` from `self`, using Little Endian byte order.\n","sig":null,"attributes":[{"value":"/ Reads a `u16` from `self`, using Little Endian byte order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87610,"byte_end":87672,"line_start":507,"line_end":507,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87901,"byte_end":87912,"line_start":514,"line_end":514,"column_start":12,"column_end":23},"name":"read_u32_le","qualname":"<ByteReader>::read_u32_le","value":"pub fn read_u32_le(&mut Self) -> Result<u32, Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a `u32` from `self`, using Little Endian byte order.\n","sig":null,"attributes":[{"value":"/ Reads a `u32` from `self`, using Little Endian byte order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":87827,"byte_end":87889,"line_start":513,"line_end":513,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88118,"byte_end":88129,"line_start":520,"line_end":520,"column_start":12,"column_end":23},"name":"read_u64_le","qualname":"<ByteReader>::read_u64_le","value":"pub fn read_u64_le(&mut Self) -> Result<u64, Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a `u64` from `self`, using Little Endian byte order.\n","sig":null,"attributes":[{"value":"/ Reads a `u64` from `self`, using Little Endian byte order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88044,"byte_end":88106,"line_start":519,"line_end":519,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88320,"byte_end":88327,"line_start":527,"line_end":527,"column_start":11,"column_end":18},"name":"ToBytes","qualname":"::bytes::ToBytes","value":"ToBytes","parent":null,"children":[{"krate":0,"index":579}],"decl_id":null,"docs":" Trait for encoding a value into a byte buffer.\n","sig":null,"attributes":[{"value":"/ Trait for encoding a value into a byte buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88259,"byte_end":88309,"line_start":526,"line_end":526,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88650,"byte_end":88658,"line_start":533,"line_end":533,"column_start":8,"column_end":16},"name":"to_bytes","qualname":"::bytes::ToBytes::to_bytes","value":"pub fn to_bytes(&Self, &mut ByteWriter) -> Result<(), Error>","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Converts `self` to bytes and writes them into `writer`, advancing `writer` to point past the\n encoded value.","sig":null,"attributes":[{"value":"/ Converts `self` to bytes and writes them into `writer`, advancing `writer` to point past the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88334,"byte_end":88430,"line_start":528,"line_end":528,"column_start":5,"column_end":101}},{"value":"/ encoded value.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88435,"byte_end":88453,"line_start":529,"line_end":529,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88458,"byte_end":88461,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ If `writer` does not contain enough space, an error will be returned and the state of the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88466,"byte_end":88559,"line_start":531,"line_end":531,"column_start":5,"column_end":98}},{"value":"/ buffer is unspecified (eg. `self` may be partially written into `writer`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88564,"byte_end":88642,"line_start":532,"line_end":532,"column_start":5,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88779,"byte_end":88788,"line_start":537,"line_end":537,"column_start":11,"column_end":20},"name":"FromBytes","qualname":"::bytes::FromBytes","value":"FromBytes<'a>: Sized","parent":null,"children":[{"krate":0,"index":582}],"decl_id":null,"docs":" Trait for decoding values from a byte slice.\n","sig":null,"attributes":[{"value":"/ Trait for decoding values from a byte slice.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88720,"byte_end":88768,"line_start":536,"line_end":536,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":89141,"byte_end":89151,"line_start":543,"line_end":543,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::bytes::FromBytes::from_bytes","value":"pub fn from_bytes(&mut ByteReader) -> Result<Self, Error>","parent":{"krate":0,"index":580},"children":[],"decl_id":null,"docs":" Decode a `Self` from a byte slice, advancing `bytes` to point past the data that was read.","sig":null,"attributes":[{"value":"/ Decode a `Self` from a byte slice, advancing `bytes` to point past the data that was read.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88806,"byte_end":88900,"line_start":538,"line_end":538,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88905,"byte_end":88908,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ If `bytes` contains data not valid for the target type, or contains an insufficient number","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88913,"byte_end":89007,"line_start":540,"line_end":540,"column_start":5,"column_end":99}},{"value":"/ of bytes, an error will be returned and the state of `bytes` is unspecified (it can point to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":89012,"byte_end":89108,"line_start":541,"line_end":541,"column_start":5,"column_end":101}},{"value":"/ arbitrary data).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":89113,"byte_end":89133,"line_start":542,"line_end":542,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2468},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":89998,"byte_end":90003,"line_start":576,"line_end":576,"column_start":12,"column_end":17},"name":"Field","qualname":"::bytes::Field","value":"Field {  }","parent":null,"children":[{"krate":0,"index":2471},{"krate":0,"index":2472}],"decl_id":null,"docs":" A zerocopy-compatible field of type `T`, but represented as `PRIM`.\n","sig":null,"attributes":[{"value":"/ A zerocopy-compatible field of type `T`, but represented as `PRIM`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":89842,"byte_end":89913,"line_start":573,"line_end":573,"column_start":1,"column_end":72}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":89966,"byte_end":89986,"line_start":575,"line_end":575,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90457,"byte_end":90460,"line_start":597,"line_end":597,"column_start":12,"column_end":15},"name":"new","qualname":"<Field<PRIM, T>>::new","value":"pub fn new(PRIM) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90577,"byte_end":90580,"line_start":604,"line_end":604,"column_start":12,"column_end":15},"name":"raw","qualname":"<Field<PRIM, T>>::raw","value":"pub fn raw(&Self) -> &PRIM","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90689,"byte_end":90694,"line_start":609,"line_end":609,"column_start":12,"column_end":17},"name":"value","qualname":"<Field<PRIM, T>>::value","value":"pub fn value(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Extracts the typed representation of `self`.\n","sig":null,"attributes":[{"value":"/ Extracts the typed representation of `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90629,"byte_end":90677,"line_start":608,"line_end":608,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91529,"byte_end":91536,"line_start":639,"line_end":639,"column_start":11,"column_end":18},"name":"RawRepr","qualname":"::bytes::RawRepr","value":"RawRepr<T>","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" Indicates that a type can be cheaply converted from and to a raw representation of type `T`.","sig":null,"attributes":[{"value":"/ Indicates that a type can be cheaply converted from and to a raw representation of type `T`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91239,"byte_end":91335,"line_start":635,"line_end":635,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91336,"byte_end":91339,"line_start":636,"line_end":636,"column_start":1,"column_end":4}},{"value":"/ This is meant to be used with [`Field`], and allows representing types as their raw contents in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91340,"byte_end":91439,"line_start":637,"line_end":637,"column_start":1,"column_end":100}},{"value":"/ memory, while allowing ergonomic conversion to their typed representation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91440,"byte_end":91518,"line_start":638,"line_end":638,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91549,"byte_end":91557,"line_start":640,"line_end":640,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::bytes::RawRepr::from_raw","value":"pub fn from_raw(T) -> Self","parent":{"krate":0,"index":616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91582,"byte_end":91588,"line_start":641,"line_end":641,"column_start":8,"column_end":14},"name":"as_raw","qualname":"::bytes::RawRepr::as_raw","value":"pub fn as_raw(&Self) -> T","parent":{"krate":0,"index":616},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"config","qualname":"::config","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":640},{"krate":0,"index":642}],"decl_id":null,"docs":" Stack configuration trait.\n","sig":null,"attributes":[{"value":"/ Stack configuration trait.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":91605,"byte_end":91635,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92193,"byte_end":92199,"line_start":15,"line_end":15,"column_start":11,"column_end":17},"name":"Config","qualname":"::config::Config","value":"Config","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639}],"decl_id":null,"docs":" Trait for Rubble stack configurations.","sig":null,"attributes":[{"value":"/ Trait for Rubble stack configurations.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":91852,"byte_end":91894,"line_start":9,"line_end":9,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":91895,"byte_end":91898,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of types to be used throughout the layers of the BLE stack, which","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":91899,"byte_end":91996,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ define capabilities, data structures, data, and hardware interface types to be used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":91997,"byte_end":92085,"line_start":12,"line_end":12,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92086,"byte_end":92089,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Every application must define a type implementing this trait and supply it to the stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92090,"byte_end":92182,"line_start":14,"line_end":14,"column_start":1,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92262,"byte_end":92267,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Timer","qualname":"::config::Config::Timer","value":"type Timer: Timer;","parent":{"krate":0,"index":635},"children":[],"decl_id":null,"docs":" A time source with microsecond resolution.\n","sig":null,"attributes":[{"value":"/ A time source with microsecond resolution.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92206,"byte_end":92252,"line_start":16,"line_end":16,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92330,"byte_end":92341,"line_start":20,"line_end":20,"column_start":10,"column_end":21},"name":"Transmitter","qualname":"::config::Config::Transmitter","value":"type Transmitter: Transmitter;","parent":{"krate":0,"index":635},"children":[],"decl_id":null,"docs":" The BLE packet transmitter (radio).\n","sig":null,"attributes":[{"value":"/ The BLE packet transmitter (radio).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92281,"byte_end":92320,"line_start":19,"line_end":19,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92498,"byte_end":92511,"line_start":25,"line_end":25,"column_start":10,"column_end":23},"name":"ChannelMapper","qualname":"::config::Config::ChannelMapper","value":"type ChannelMapper: ChannelMapper;","parent":{"krate":0,"index":635},"children":[],"decl_id":null,"docs":" The L2CAP channel mapper in use.","sig":null,"attributes":[{"value":"/ The L2CAP channel mapper in use.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92361,"byte_end":92397,"line_start":22,"line_end":22,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92402,"byte_end":92405,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This type also provides access to the attributes hosted by the ATT server.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92410,"byte_end":92488,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92668,"byte_end":92679,"line_start":29,"line_end":29,"column_start":10,"column_end":21},"name":"PacketQueue","qualname":"::config::Config::PacketQueue","value":"type PacketQueue: PacketQueue;","parent":{"krate":0,"index":635},"children":[],"decl_id":null,"docs":" The packet queue to use for exchanging data between the real-time Link-Layer and\n non-realtime parts of the stack.\n","sig":null,"attributes":[{"value":"/ The packet queue to use for exchanging data between the real-time Link-Layer and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92533,"byte_end":92617,"line_start":27,"line_end":27,"column_start":5,"column_end":89}},{"value":"/ non-realtime parts of the stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\config.rs","byte_start":92622,"byte_end":92658,"line_start":28,"line_end":28,"column_start":5,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecdh","qualname":"::ecdh","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":703},{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":715},{"krate":0,"index":717}],"decl_id":null,"docs":" Elliptic Curve Diffie-Hellman (ECDH) on P-256.","sig":null,"attributes":[{"value":"/ Elliptic Curve Diffie-Hellman (ECDH) on P-256.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93062,"byte_end":93112,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93113,"byte_end":93116,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ BLE uses ECDH on P-256 for pairing. This module provides an interface for plugging in different","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93117,"byte_end":93216,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ implementations of the P-256 operations. The main consumer of this module is the [`security`]","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93217,"byte_end":93314,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ module; refer to that for more info about pairing and encryption in BLE.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93315,"byte_end":93391,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93392,"byte_end":93395,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The primary trait in this module is [`EcdhProvider`]. Rubble comes with 2 built-in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93396,"byte_end":93482,"line_start":7,"line_end":7,"column_start":1,"column_end":87}},{"value":"/ implementations of that trait:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93483,"byte_end":93517,"line_start":8,"line_end":8,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93518,"byte_end":93521,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * [`P256Provider`] and [`P256SecretKey`]: These use the pure-Rust [`p256`] crate and are always","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93522,"byte_end":93621,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/   available.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93622,"byte_end":93638,"line_start":11,"line_end":11,"column_start":1,"column_end":17}},{"value":"/ * [`RingProvider`] and [`RingSecretKey`] (behind the **`ring`** Cargo feature): These use the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93639,"byte_end":93736,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/   [*ring*][ring] library to provide the operations. Note that *ring* does not support","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93737,"byte_end":93826,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/   `#![no_std]` operation, so this is mostly useful for tests and other non-embedded usage.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93827,"byte_end":93921,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93922,"byte_end":93925,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`security`]: crate::security","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93926,"byte_end":93959,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/ [ring]: https://github.com/briansmith/ring","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":93960,"byte_end":94006,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/ [`p256`]: https://docs.rs/p256","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94007,"byte_end":94041,"line_start":18,"line_end":18,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100809,"byte_end":100821,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"P256Provider","qualname":"::ecdh::p256::P256Provider","value":"P256Provider {  }","parent":null,"children":[],"decl_id":null,"docs":" An ECDH provider using the pure-Rust `p256` crate.\n","sig":null,"attributes":[{"value":"/ An ECDH provider using the pure-Rust `p256` crate.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100743,"byte_end":100797,"line_start":11,"line_end":11,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100889,"byte_end":100892,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<P256Provider>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance.\n","sig":null,"attributes":[{"value":"/ Creates a new instance.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100850,"byte_end":100877,"line_start":15,"line_end":15,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":101765,"byte_end":101778,"line_start":47,"line_end":47,"column_start":12,"column_end":25},"name":"P256SecretKey","qualname":"::ecdh::p256::P256SecretKey","value":"P256SecretKey {  }","parent":null,"children":[{"krate":0,"index":681}],"decl_id":null,"docs":" A secret key generated by a [`P256Provider`].","sig":null,"attributes":[{"value":"/ A secret key generated by a [`P256Provider`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":101653,"byte_end":101702,"line_start":44,"line_end":44,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":101703,"byte_end":101706,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`P256Provider`]: struct.P256Provider.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":101707,"byte_end":101753,"line_start":46,"line_end":46,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94974,"byte_end":94983,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::ecdh::PublicKey","value":"","parent":null,"children":[],"decl_id":null,"docs":" A P-256 public key (point on the curve) in uncompressed format.","sig":null,"attributes":[{"value":"/ A P-256 public key (point on the curve) in uncompressed format.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94216,"byte_end":94283,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94284,"byte_end":94287,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The encoding is as specified in *[SEC 1: Elliptic Curve Cryptography]*, but without the leading","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94288,"byte_end":94387,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"/ `0x04` byte: The first 32 Bytes are the big-endian encoding of the point's X coordinate, and the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94388,"byte_end":94488,"line_start":36,"line_end":36,"column_start":1,"column_end":101}},{"value":"/ remaining 32 Bytes are the Y coordinate, encoded the same way.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94489,"byte_end":94555,"line_start":37,"line_end":37,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94556,"byte_end":94559,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Note that this type does not provide any validity guarantees (unlike [`PrivateKey`]","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94560,"byte_end":94647,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ implementors): It is possible to represent invalid public P-256 keys, such as the point at","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94648,"byte_end":94742,"line_start":40,"line_end":40,"column_start":1,"column_end":95}},{"value":"/ infinity, with this type. The other APIs in this module are designed to take that into account.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94743,"byte_end":94842,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94843,"byte_end":94846,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [SEC 1: Elliptic Curve Cryptography]: http://www.secg.org/sec1-v2.pdf","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94847,"byte_end":94920,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ [`PrivateKey`]: trait.PrivateKey.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94921,"byte_end":94962,"line_start":44,"line_end":44,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":94984,"byte_end":94996,"line_start":45,"line_end":45,"column_start":22,"column_end":34},"name":"0","qualname":"::ecdh::PublicKey::0","value":"[u8; 64]","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95204,"byte_end":95216,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"SharedSecret","qualname":"::ecdh::SharedSecret","value":"","parent":null,"children":[],"decl_id":null,"docs":" A shared secret resulting from an ECDH key agreement.","sig":null,"attributes":[{"value":"/ A shared secret resulting from an ECDH key agreement.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95000,"byte_end":95057,"line_start":47,"line_end":47,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95058,"byte_end":95061,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ This is returned by implementations of [`SecretKey::agree`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95062,"byte_end":95126,"line_start":49,"line_end":49,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95127,"byte_end":95130,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`SecretKey::agree`]: trait.SecretKey.html#tymethod.agree","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95131,"byte_end":95192,"line_start":51,"line_end":51,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95217,"byte_end":95229,"line_start":52,"line_end":52,"column_start":25,"column_end":37},"name":"0","qualname":"::ecdh::SharedSecret::0","value":"[u8; 32]","parent":{"krate":0,"index":703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2489},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95421,"byte_end":95437,"line_start":58,"line_end":58,"column_start":12,"column_end":28},"name":"InvalidPublicKey","qualname":"::ecdh::InvalidPublicKey","value":"InvalidPublicKey {  }","parent":null,"children":[],"decl_id":null,"docs":" Error returned by [`SecretKey::agree`] when the public key of the other party is invalid.","sig":null,"attributes":[{"value":"/ Error returned by [`SecretKey::agree`] when the public key of the other party is invalid.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95233,"byte_end":95326,"line_start":54,"line_end":54,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95327,"byte_end":95330,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`SecretKey::agree`]: trait.SecretKey.html#tymethod.agree","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95331,"byte_end":95392,"line_start":56,"line_end":56,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95525,"byte_end":95528,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<InvalidPublicKey>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `InvalidPublicKey` error.\n","sig":null,"attributes":[{"value":"/ Creates a new `InvalidPublicKey` error.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95470,"byte_end":95513,"line_start":61,"line_end":61,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95761,"byte_end":95773,"line_start":74,"line_end":74,"column_start":11,"column_end":23},"name":"EcdhProvider","qualname":"::ecdh::EcdhProvider","value":"EcdhProvider","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713}],"decl_id":null,"docs":" Trait for ECDH providers.\n","sig":null,"attributes":[{"value":"/ Trait for ECDH providers.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95721,"byte_end":95750,"line_start":73,"line_end":73,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95827,"byte_end":95836,"line_start":76,"line_end":76,"column_start":10,"column_end":19},"name":"SecretKey","qualname":"::ecdh::EcdhProvider::SecretKey","value":"type SecretKey: SecretKey;","parent":{"krate":0,"index":711},"children":[],"decl_id":null,"docs":" Provider-defined secret key type.\n","sig":null,"attributes":[{"value":"/ Provider-defined secret key type.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95780,"byte_end":95817,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96295,"byte_end":96311,"line_start":86,"line_end":86,"column_start":8,"column_end":24},"name":"generate_keypair","qualname":"::ecdh::EcdhProvider::generate_keypair","value":"pub fn generate_keypair<R>(&mut Self, &mut R) -> (Self::SecretKey, PublicKey)\nwhere R: RngCore + CryptoRng","parent":{"krate":0,"index":711},"children":[],"decl_id":null,"docs":" Generates a P-256 key pair using cryptographically strong randomness.","sig":null,"attributes":[{"value":"/ Generates a P-256 key pair using cryptographically strong randomness.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95854,"byte_end":95927,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95932,"byte_end":95935,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Implementors must ensure that they only return valid private/public key pairs from this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95940,"byte_end":96031,"line_start":80,"line_end":80,"column_start":5,"column_end":96}},{"value":"/ method.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96036,"byte_end":96047,"line_start":81,"line_end":81,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96052,"byte_end":96055,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Rubble will pass a cryptographically secure random number generator `rng` to this function","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96060,"byte_end":96154,"line_start":83,"line_end":83,"column_start":5,"column_end":99}},{"value":"/ that may be used to obtain entropy for key generation. Implementations may also use their","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96159,"byte_end":96252,"line_start":84,"line_end":84,"column_start":5,"column_end":98}},{"value":"/ own RNG if they so choose.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96257,"byte_end":96287,"line_start":85,"line_end":85,"column_start":5,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96699,"byte_end":96708,"line_start":96,"line_end":96,"column_start":11,"column_end":20},"name":"SecretKey","qualname":"::ecdh::SecretKey","value":"SecretKey: Sized","parent":null,"children":[{"krate":0,"index":716}],"decl_id":null,"docs":" Secret key operations required by Rubble.","sig":null,"attributes":[{"value":"/ Secret key operations required by Rubble.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96416,"byte_end":96461,"line_start":91,"line_end":91,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96462,"byte_end":96465,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This API imposes no requirements on the representation or location of secret keys. This means","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96466,"byte_end":96563,"line_start":93,"line_end":93,"column_start":1,"column_end":98}},{"value":"/ that it should be possible to implement this trait even for keys stored in some secure key","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96564,"byte_end":96658,"line_start":94,"line_end":94,"column_start":1,"column_end":95}},{"value":"/ storage like a smartcard.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96659,"byte_end":96688,"line_start":95,"line_end":95,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97181,"byte_end":97186,"line_start":107,"line_end":107,"column_start":8,"column_end":13},"name":"agree","qualname":"::ecdh::SecretKey::agree","value":"pub fn agree(Self, &PublicKey) -> Result<SharedSecret, InvalidPublicKey>","parent":{"krate":0,"index":715},"children":[],"decl_id":null,"docs":" Performs ECDH key agreement using an ephemeral secret key `self` and the public key of the\n other party.","sig":null,"attributes":[{"value":"/ Performs ECDH key agreement using an ephemeral secret key `self` and the public key of the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96722,"byte_end":96816,"line_start":97,"line_end":97,"column_start":5,"column_end":99}},{"value":"/ other party.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96821,"byte_end":96837,"line_start":98,"line_end":98,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96842,"byte_end":96845,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Here, \"ephemeral\" just means that this method takes `self` by value. This allows","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96850,"byte_end":96934,"line_start":100,"line_end":100,"column_start":5,"column_end":89}},{"value":"/ implementing `SecretKey` for providers that enforce single-use keys using Rust ownership","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96939,"byte_end":97031,"line_start":101,"line_end":101,"column_start":5,"column_end":97}},{"value":"/ (like *ring*).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97036,"byte_end":97054,"line_start":102,"line_end":102,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97059,"byte_end":97062,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97067,"byte_end":97079,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97084,"byte_end":97087,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If `foreign_key` is an invalid public key, implementors must return an error.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97092,"byte_end":97173,"line_start":106,"line_end":106,"column_start":5,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97506,"byte_end":97515,"line_start":114,"line_end":114,"column_start":8,"column_end":17},"name":"run_tests","qualname":"::ecdh::run_tests","value":"pub fn run_tests<impl EcdhProvider: EcdhProvider>(impl EcdhProvider)","parent":null,"children":[],"decl_id":null,"docs":" Runs Rubble's P-256 provider testsuite against `provider`.","sig":null,"attributes":[{"value":"/ Runs Rubble's P-256 provider testsuite against `provider`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97264,"byte_end":97326,"line_start":110,"line_end":110,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97327,"byte_end":97330,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Note that this is just a quick smoke test that does not provide any assurance about security","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97331,"byte_end":97427,"line_start":112,"line_end":112,"column_start":1,"column_end":97}},{"value":"/ properties. The P-256 provider should have a dedicated test suite.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":97428,"byte_end":97498,"line_start":113,"line_end":113,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2493},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106158,"byte_end":106171,"line_start":11,"line_end":11,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::error::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Packet specified an invalid length value or was too short.","sig":null,"attributes":[{"value":"/ Packet specified an invalid length value or was too short.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":105954,"byte_end":106016,"line_start":7,"line_end":7,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106021,"byte_end":106024,"line_start":8,"line_end":8,"column_start":5,"column_end":8}},{"value":"/ This indicates a protocol violation, so the connection should","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106029,"byte_end":106094,"line_start":9,"line_end":9,"column_start":5,"column_end":70}},{"value":"/ considered lost (if one is currently established).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106099,"byte_end":106153,"line_start":10,"line_end":10,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106220,"byte_end":106232,"line_start":14,"line_end":14,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::error::Error::InvalidValue","value":"Error::InvalidValue","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Invalid value supplied for field.\n","sig":null,"attributes":[{"value":"/ Invalid value supplied for field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106178,"byte_end":106215,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2497},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106512,"byte_end":106515,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"Eof","qualname":"::error::Error::Eof","value":"Error::Eof","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Unexpectedly reached EOF while reading or writing data.","sig":null,"attributes":[{"value":"/ Unexpectedly reached EOF while reading or writing data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106239,"byte_end":106298,"line_start":16,"line_end":16,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106303,"byte_end":106306,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ This is returned when the application tries to fit too much data into a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106311,"byte_end":106386,"line_start":18,"line_end":18,"column_start":5,"column_end":80}},{"value":"/ PDU or other fixed-size buffer, and also when reaching EOF prematurely","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106391,"byte_end":106465,"line_start":19,"line_end":19,"column_start":5,"column_end":79}},{"value":"/ while reading data from a buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106470,"byte_end":106507,"line_start":20,"line_end":20,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2499},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106572,"byte_end":106587,"line_start":24,"line_end":24,"column_start":5,"column_end":20},"name":"IncompleteParse","qualname":"::error::Error::IncompleteParse","value":"Error::IncompleteParse","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" Parsing didn't consume the entire buffer.\n","sig":null,"attributes":[{"value":"/ Parsing didn't consume the entire buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106522,"byte_end":106567,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":2492},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":105942,"byte_end":105947,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error { InvalidLength, InvalidValue, Eof, IncompleteParse, }","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2495},{"krate":0,"index":2497},{"krate":0,"index":2499}],"decl_id":null,"docs":" Errors returned by the BLE stack.\n","sig":null,"attributes":[{"value":"/ Errors returned by the BLE stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":105830,"byte_end":105867,"line_start":3,"line_end":3,"column_start":1,"column_end":38}},{"value":"non_exhaustive","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":105915,"byte_end":105932,"line_start":5,"line_end":5,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gatt","qualname":"::gatt","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":805}],"decl_id":null,"docs":" Implementation of the Generic Attribute Profile (GATT).","sig":null,"attributes":[{"value":"/ Implementation of the Generic Attribute Profile (GATT).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":106976,"byte_end":107035,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107036,"byte_end":107039,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ GATT describes a service framework that uses the Attribute Protocol for discovery and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107040,"byte_end":107129,"line_start":3,"line_end":3,"column_start":1,"column_end":90}},{"value":"/ interaction","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107130,"byte_end":107145,"line_start":4,"line_end":4,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"characteristic","qualname":"::gatt::characteristic","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2535},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2583},{"krate":0,"index":2586},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2609},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":2638},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2819},{"krate":0,"index":2820}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113391,"byte_end":113401,"line_start":5,"line_end":5,"column_start":16,"column_end":26},"name":"Properties","qualname":"::gatt::characteristic::Properties","value":"Properties {  }","parent":null,"children":[{"krate":0,"index":2517}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2556},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113422,"byte_end":113431,"line_start":6,"line_end":6,"column_start":15,"column_end":24},"name":"BROADCAST","qualname":"::gatt::characteristic::Properties::BROADCAST","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113457,"byte_end":113461,"line_start":7,"line_end":7,"column_start":15,"column_end":19},"name":"READ","qualname":"::gatt::characteristic::Properties::READ","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2558},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113492,"byte_end":113504,"line_start":8,"line_end":8,"column_start":15,"column_end":27},"name":"WRITE_NO_RSP","qualname":"::gatt::characteristic::Properties::WRITE_NO_RSP","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2559},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113527,"byte_end":113532,"line_start":9,"line_end":9,"column_start":15,"column_end":20},"name":"WRITE","qualname":"::gatt::characteristic::Properties::WRITE","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2560},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113562,"byte_end":113568,"line_start":10,"line_end":10,"column_start":15,"column_end":21},"name":"NOTIFY","qualname":"::gatt::characteristic::Properties::NOTIFY","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113597,"byte_end":113605,"line_start":11,"line_end":11,"column_start":15,"column_end":23},"name":"INDICATE","qualname":"::gatt::characteristic::Properties::INDICATE","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2562},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113632,"byte_end":113643,"line_start":12,"line_end":12,"column_start":15,"column_end":26},"name":"AUTH_WRITES","qualname":"::gatt::characteristic::Properties::AUTH_WRITES","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2563},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":113667,"byte_end":113675,"line_start":13,"line_end":13,"column_start":15,"column_end":23},"name":"EXTENDED","qualname":"::gatt::characteristic::Properties::EXTENDED","value":"Self","parent":{"krate":0,"index":2555},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114014,"byte_end":114028,"line_start":30,"line_end":30,"column_start":11,"column_end":25},"name":"Characteristic","qualname":"::gatt::characteristic::Characteristic","value":"Characteristic","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":752}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114041,"byte_end":114046,"line_start":31,"line_end":31,"column_start":11,"column_end":16},"name":"PROPS","qualname":"::gatt::characteristic::Characteristic::PROPS","value":"Properties","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114125,"byte_end":114129,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"UUID","qualname":"::gatt::characteristic::Characteristic::UUID","value":"AttUuid","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" The UUID assigned to the characteristic type.\n","sig":null,"attributes":[{"value":"/ The UUID assigned to the characteristic type.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114065,"byte_end":114114,"line_start":33,"line_end":33,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114154,"byte_end":114166,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"BatteryLevel","qualname":"::gatt::characteristic::BatteryLevel","value":"BatteryLevel {  }","parent":null,"children":[{"krate":0,"index":754}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114265,"byte_end":114268,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<BatteryLevel>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114377,"byte_end":114387,"line_start":48,"line_end":48,"column_start":12,"column_end":22},"name":"percentage","qualname":"<BatteryLevel>::percentage","value":"pub fn percentage(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2639},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114680,"byte_end":114687,"line_start":60,"line_end":60,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::gatt::characteristic::Appearance::Unknown","value":"Appearance::Unknown","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2642},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114697,"byte_end":114709,"line_start":61,"line_end":61,"column_start":5,"column_end":17},"name":"GenericPhone","qualname":"::gatt::characteristic::Appearance::GenericPhone","value":"Appearance::GenericPhone","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2645},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114720,"byte_end":114735,"line_start":62,"line_end":62,"column_start":5,"column_end":20},"name":"GenericComputer","qualname":"::gatt::characteristic::Appearance::GenericComputer","value":"Appearance::GenericComputer","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2648},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114747,"byte_end":114759,"line_start":63,"line_end":63,"column_start":5,"column_end":17},"name":"GenericWatch","qualname":"::gatt::characteristic::Appearance::GenericWatch","value":"Appearance::GenericWatch","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2651},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114771,"byte_end":114782,"line_start":64,"line_end":64,"column_start":5,"column_end":16},"name":"SportsWatch","qualname":"::gatt::characteristic::Appearance::SportsWatch","value":"Appearance::SportsWatch","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2654},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114794,"byte_end":114806,"line_start":65,"line_end":65,"column_start":5,"column_end":17},"name":"GenericClock","qualname":"::gatt::characteristic::Appearance::GenericClock","value":"Appearance::GenericClock","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2657},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114818,"byte_end":114832,"line_start":66,"line_end":66,"column_start":5,"column_end":19},"name":"GenericDisplay","qualname":"::gatt::characteristic::Appearance::GenericDisplay","value":"Appearance::GenericDisplay","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114872,"byte_end":114892,"line_start":67,"line_end":67,"column_start":5,"column_end":25},"name":"GenericRemoteControl","qualname":"::gatt::characteristic::Appearance::GenericRemoteControl","value":"Appearance::GenericRemoteControl","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2663},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114904,"byte_end":114921,"line_start":68,"line_end":68,"column_start":5,"column_end":22},"name":"GenericEyeGlasses","qualname":"::gatt::characteristic::Appearance::GenericEyeGlasses","value":"Appearance::GenericEyeGlasses","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2666},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114933,"byte_end":114943,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"GenericTag","qualname":"::gatt::characteristic::Appearance::GenericTag","value":"Appearance::GenericTag","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2669},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114955,"byte_end":114969,"line_start":70,"line_end":70,"column_start":5,"column_end":19},"name":"GenericKeyring","qualname":"::gatt::characteristic::Appearance::GenericKeyring","value":"Appearance::GenericKeyring","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114981,"byte_end":114999,"line_start":71,"line_end":71,"column_start":5,"column_end":23},"name":"GenericMediaPlayer","qualname":"::gatt::characteristic::Appearance::GenericMediaPlayer","value":"Appearance::GenericMediaPlayer","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2675},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115011,"byte_end":115032,"line_start":72,"line_end":72,"column_start":5,"column_end":26},"name":"GenericBarcodeScanner","qualname":"::gatt::characteristic::Appearance::GenericBarcodeScanner","value":"Appearance::GenericBarcodeScanner","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2678},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115044,"byte_end":115062,"line_start":73,"line_end":73,"column_start":5,"column_end":23},"name":"GenericThermometer","qualname":"::gatt::characteristic::Appearance::GenericThermometer","value":"Appearance::GenericThermometer","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2681},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115074,"byte_end":115088,"line_start":74,"line_end":74,"column_start":5,"column_end":19},"name":"ThermometerEar","qualname":"::gatt::characteristic::Appearance::ThermometerEar","value":"Appearance::ThermometerEar","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2684},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115100,"byte_end":115122,"line_start":75,"line_end":75,"column_start":5,"column_end":27},"name":"GenericHeartRateSensor","qualname":"::gatt::characteristic::Appearance::GenericHeartRateSensor","value":"Appearance::GenericHeartRateSensor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2687},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115134,"byte_end":115147,"line_start":76,"line_end":76,"column_start":5,"column_end":18},"name":"HeartRateBelt","qualname":"::gatt::characteristic::Appearance::HeartRateBelt","value":"Appearance::HeartRateBelt","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2690},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115160,"byte_end":115180,"line_start":78,"line_end":78,"column_start":5,"column_end":25},"name":"GenericBloodPressure","qualname":"::gatt::characteristic::Appearance::GenericBloodPressure","value":"Appearance::GenericBloodPressure","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2693},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115192,"byte_end":115208,"line_start":79,"line_end":79,"column_start":5,"column_end":21},"name":"BloodPressureArm","qualname":"::gatt::characteristic::Appearance::BloodPressureArm","value":"Appearance::BloodPressureArm","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2696},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115220,"byte_end":115238,"line_start":80,"line_end":80,"column_start":5,"column_end":23},"name":"BloodPressureWrist","qualname":"::gatt::characteristic::Appearance::BloodPressureWrist","value":"Appearance::BloodPressureWrist","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2699},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115251,"byte_end":115271,"line_start":82,"line_end":82,"column_start":5,"column_end":25},"name":"HumanInterfaceDevice","qualname":"::gatt::characteristic::Appearance::HumanInterfaceDevice","value":"Appearance::HumanInterfaceDevice","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2702},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115283,"byte_end":115291,"line_start":83,"line_end":83,"column_start":5,"column_end":13},"name":"Keyboard","qualname":"::gatt::characteristic::Appearance::Keyboard","value":"Appearance::Keyboard","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2705},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115303,"byte_end":115308,"line_start":84,"line_end":84,"column_start":5,"column_end":10},"name":"Mouse","qualname":"::gatt::characteristic::Appearance::Mouse","value":"Appearance::Mouse","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2708},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115320,"byte_end":115328,"line_start":85,"line_end":85,"column_start":5,"column_end":13},"name":"Joystick","qualname":"::gatt::characteristic::Appearance::Joystick","value":"Appearance::Joystick","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2711},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115340,"byte_end":115347,"line_start":86,"line_end":86,"column_start":5,"column_end":12},"name":"Gamepad","qualname":"::gatt::characteristic::Appearance::Gamepad","value":"Appearance::Gamepad","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2714},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115359,"byte_end":115374,"line_start":87,"line_end":87,"column_start":5,"column_end":20},"name":"DigitizerTablet","qualname":"::gatt::characteristic::Appearance::DigitizerTablet","value":"Appearance::DigitizerTablet","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2717},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115386,"byte_end":115396,"line_start":88,"line_end":88,"column_start":5,"column_end":15},"name":"CardReader","qualname":"::gatt::characteristic::Appearance::CardReader","value":"Appearance::CardReader","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2720},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115408,"byte_end":115418,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"DigitalPen","qualname":"::gatt::characteristic::Appearance::DigitalPen","value":"Appearance::DigitalPen","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2723},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115430,"byte_end":115444,"line_start":90,"line_end":90,"column_start":5,"column_end":19},"name":"BarcodeScanner","qualname":"::gatt::characteristic::Appearance::BarcodeScanner","value":"Appearance::BarcodeScanner","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2726},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115457,"byte_end":115476,"line_start":92,"line_end":92,"column_start":5,"column_end":24},"name":"GenericGlucoseMeter","qualname":"::gatt::characteristic::Appearance::GenericGlucoseMeter","value":"Appearance::GenericGlucoseMeter","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2729},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115490,"byte_end":115517,"line_start":94,"line_end":94,"column_start":5,"column_end":32},"name":"GenericRunningWalkingSensor","qualname":"::gatt::characteristic::Appearance::GenericRunningWalkingSensor","value":"Appearance::GenericRunningWalkingSensor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2732},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115530,"byte_end":115556,"line_start":95,"line_end":95,"column_start":5,"column_end":31},"name":"RunningWalkingSensorInShoe","qualname":"::gatt::characteristic::Appearance::RunningWalkingSensorInShoe","value":"Appearance::RunningWalkingSensorInShoe","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2735},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115569,"byte_end":115595,"line_start":96,"line_end":96,"column_start":5,"column_end":31},"name":"RunningWalkingSensorOnShoe","qualname":"::gatt::characteristic::Appearance::RunningWalkingSensorOnShoe","value":"Appearance::RunningWalkingSensorOnShoe","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2738},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115608,"byte_end":115633,"line_start":97,"line_end":97,"column_start":5,"column_end":30},"name":"RunningWalkingSensorOnHip","qualname":"::gatt::characteristic::Appearance::RunningWalkingSensorOnHip","value":"Appearance::RunningWalkingSensorOnHip","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115646,"byte_end":115660,"line_start":98,"line_end":98,"column_start":5,"column_end":19},"name":"GenericCycling","qualname":"::gatt::characteristic::Appearance::GenericCycling","value":"Appearance::GenericCycling","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2744},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115673,"byte_end":115688,"line_start":99,"line_end":99,"column_start":5,"column_end":20},"name":"CyclingComputer","qualname":"::gatt::characteristic::Appearance::CyclingComputer","value":"Appearance::CyclingComputer","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2747},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115701,"byte_end":115719,"line_start":100,"line_end":100,"column_start":5,"column_end":23},"name":"CyclingSpeedSensor","qualname":"::gatt::characteristic::Appearance::CyclingSpeedSensor","value":"Appearance::CyclingSpeedSensor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2750},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115732,"byte_end":115752,"line_start":101,"line_end":101,"column_start":5,"column_end":25},"name":"CyclingCadenceSensor","qualname":"::gatt::characteristic::Appearance::CyclingCadenceSensor","value":"Appearance::CyclingCadenceSensor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2753},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115765,"byte_end":115783,"line_start":102,"line_end":102,"column_start":5,"column_end":23},"name":"CyclingPowerSensor","qualname":"::gatt::characteristic::Appearance::CyclingPowerSensor","value":"Appearance::CyclingPowerSensor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115796,"byte_end":115824,"line_start":103,"line_end":103,"column_start":5,"column_end":33},"name":"CyclingSpeedAndCadenceSensor","qualname":"::gatt::characteristic::Appearance::CyclingSpeedAndCadenceSensor","value":"Appearance::CyclingSpeedAndCadenceSensor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115838,"byte_end":115858,"line_start":105,"line_end":105,"column_start":5,"column_end":25},"name":"GenericPulseOximeter","qualname":"::gatt::characteristic::Appearance::GenericPulseOximeter","value":"Appearance::GenericPulseOximeter","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2762},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115871,"byte_end":115893,"line_start":106,"line_end":106,"column_start":5,"column_end":27},"name":"PulseOximeterFingertip","qualname":"::gatt::characteristic::Appearance::PulseOximeterFingertip","value":"Appearance::PulseOximeterFingertip","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2765},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115906,"byte_end":115928,"line_start":107,"line_end":107,"column_start":5,"column_end":27},"name":"PulseOximeterWristWorn","qualname":"::gatt::characteristic::Appearance::PulseOximeterWristWorn","value":"Appearance::PulseOximeterWristWorn","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2768},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115942,"byte_end":115960,"line_start":109,"line_end":109,"column_start":5,"column_end":23},"name":"GenericWeightScale","qualname":"::gatt::characteristic::Appearance::GenericWeightScale","value":"Appearance::GenericWeightScale","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2771},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":115974,"byte_end":116003,"line_start":111,"line_end":111,"column_start":5,"column_end":34},"name":"GenericPersonalMobilityDevice","qualname":"::gatt::characteristic::Appearance::GenericPersonalMobilityDevice","value":"Appearance::GenericPersonalMobilityDevice","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2774},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116016,"byte_end":116033,"line_start":112,"line_end":112,"column_start":5,"column_end":22},"name":"PoweredWheelchair","qualname":"::gatt::characteristic::Appearance::PoweredWheelchair","value":"Appearance::PoweredWheelchair","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2777},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116046,"byte_end":116061,"line_start":113,"line_end":113,"column_start":5,"column_end":20},"name":"MobilityScooter","qualname":"::gatt::characteristic::Appearance::MobilityScooter","value":"Appearance::MobilityScooter","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116074,"byte_end":116105,"line_start":114,"line_end":114,"column_start":5,"column_end":36},"name":"GenericContinuousGlucoseMonitor","qualname":"::gatt::characteristic::Appearance::GenericContinuousGlucoseMonitor","value":"Appearance::GenericContinuousGlucoseMonitor","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2783},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116119,"byte_end":116137,"line_start":116,"line_end":116,"column_start":5,"column_end":23},"name":"GenericInsulinPump","qualname":"::gatt::characteristic::Appearance::GenericInsulinPump","value":"Appearance::GenericInsulinPump","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2786},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116163,"byte_end":116181,"line_start":117,"line_end":117,"column_start":5,"column_end":23},"name":"DurableInsulinPump","qualname":"::gatt::characteristic::Appearance::DurableInsulinPump","value":"Appearance::DurableInsulinPump","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2789},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116207,"byte_end":116224,"line_start":118,"line_end":118,"column_start":5,"column_end":22},"name":"PatchInsulingPump","qualname":"::gatt::characteristic::Appearance::PatchInsulingPump","value":"Appearance::PatchInsulingPump","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2792},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116251,"byte_end":116261,"line_start":119,"line_end":119,"column_start":5,"column_end":15},"name":"InsulinPen","qualname":"::gatt::characteristic::Appearance::InsulinPen","value":"Appearance::InsulinPen","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2795},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116295,"byte_end":116320,"line_start":120,"line_end":120,"column_start":5,"column_end":30},"name":"GenericMedicationDelivery","qualname":"::gatt::characteristic::Appearance::GenericMedicationDelivery","value":"Appearance::GenericMedicationDelivery","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2798},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116363,"byte_end":116391,"line_start":122,"line_end":122,"column_start":5,"column_end":33},"name":"GenericOutdoorSportsActivity","qualname":"::gatt::characteristic::Appearance::GenericOutdoorSportsActivity","value":"Appearance::GenericOutdoorSportsActivity","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2801},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116404,"byte_end":116426,"line_start":123,"line_end":123,"column_start":5,"column_end":27},"name":"LocationDisplayService","qualname":"::gatt::characteristic::Appearance::LocationDisplayService","value":"Appearance::LocationDisplayService","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2804},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116439,"byte_end":116474,"line_start":124,"line_end":124,"column_start":5,"column_end":40},"name":"LocationAndNavigationDisplayService","qualname":"::gatt::characteristic::Appearance::LocationAndNavigationDisplayService","value":"Appearance::LocationAndNavigationDisplayService","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2807},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116487,"byte_end":116498,"line_start":125,"line_end":125,"column_start":5,"column_end":16},"name":"LocationPod","qualname":"::gatt::characteristic::Appearance::LocationPod","value":"Appearance::LocationPod","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2810},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":116511,"byte_end":116535,"line_start":126,"line_end":126,"column_start":5,"column_end":29},"name":"LocationAndNavigationPod","qualname":"::gatt::characteristic::Appearance::LocationAndNavigationPod","value":"Appearance::LocationAndNavigationPod","parent":{"krate":0,"index":2638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2638},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114663,"byte_end":114673,"line_start":59,"line_end":59,"column_start":10,"column_end":20},"name":"Appearance","qualname":"::gatt::characteristic::Appearance","value":"pub enum Appearance {\n    Unknown = ,\n    GenericPhone = ,\n    GenericComputer = ,\n    GenericWatch = ,\n    SportsWatch = ,\n    GenericClock = ,\n    GenericDisplay = ,\n    GenericRemoteControl = ,\n    GenericEyeGlasses = ,\n    GenericTag = ,\n    GenericKeyring = ,\n    GenericMediaPlayer = ,\n    GenericBarcodeScanner = ,\n    GenericThermometer = ,\n    ThermometerEar = ,\n    GenericHeartRateSensor = ,\n    HeartRateBelt = ,\n    GenericBloodPressure = ,\n    BloodPressureArm = ,\n    BloodPressureWrist = ,\n    HumanInterfaceDevice = ,\n    Keyboard = ,\n    Mouse = ,\n    Joystick = ,\n    Gamepad = ,\n    DigitizerTablet = ,\n    CardReader = ,\n    DigitalPen = ,\n    BarcodeScanner = ,\n    GenericGlucoseMeter = ,\n    GenericRunningWalkingSensor = ,\n    RunningWalkingSensorInShoe = ,\n    RunningWalkingSensorOnShoe = ,\n    RunningWalkingSensorOnHip = ,\n    GenericCycling = ,\n    CyclingComputer = ,\n    CyclingSpeedSensor = ,\n    CyclingCadenceSensor = ,\n    CyclingPowerSensor = ,\n    CyclingSpeedAndCadenceSensor = ,\n    GenericPulseOximeter = ,\n    PulseOximeterFingertip = ,\n    PulseOximeterWristWorn = ,\n    GenericWeightScale = ,\n    GenericPersonalMobilityDevice = ,\n    PoweredWheelchair = ,\n    MobilityScooter = ,\n    GenericContinuousGlucoseMonitor = ,\n    GenericInsulinPump = ,\n    DurableInsulinPump = ,\n    PatchInsulingPump = ,\n    InsulinPen = ,\n    GenericMedicationDelivery = ,\n    GenericOutdoorSportsActivity = ,\n    LocationDisplayService = ,\n    LocationAndNavigationDisplayService = ,\n    LocationPod = ,\n    LocationAndNavigationPod = ,\n}","parent":null,"children":[{"krate":0,"index":2639},{"krate":0,"index":2642},{"krate":0,"index":2645},{"krate":0,"index":2648},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2657},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2675},{"krate":0,"index":2678},{"krate":0,"index":2681},{"krate":0,"index":2684},{"krate":0,"index":2687},{"krate":0,"index":2690},{"krate":0,"index":2693},{"krate":0,"index":2696},{"krate":0,"index":2699},{"krate":0,"index":2702},{"krate":0,"index":2705},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2717},{"krate":0,"index":2720},{"krate":0,"index":2723},{"krate":0,"index":2726},{"krate":0,"index":2729},{"krate":0,"index":2732},{"krate":0,"index":2735},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2747},{"krate":0,"index":2750},{"krate":0,"index":2753},{"krate":0,"index":2756},{"krate":0,"index":2759},{"krate":0,"index":2762},{"krate":0,"index":2765},{"krate":0,"index":2768},{"krate":0,"index":2771},{"krate":0,"index":2774},{"krate":0,"index":2777},{"krate":0,"index":2780},{"krate":0,"index":2783},{"krate":0,"index":2786},{"krate":0,"index":2789},{"krate":0,"index":2792},{"krate":0,"index":2795},{"krate":0,"index":2798},{"krate":0,"index":2801},{"krate":0,"index":2804},{"krate":0,"index":2807},{"krate":0,"index":2810}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107406,"byte_end":107425,"line_start":14,"line_end":14,"column_start":12,"column_end":31},"name":"BatteryServiceAttrs","qualname":"::gatt::BatteryServiceAttrs","value":"BatteryServiceAttrs {  }","parent":null,"children":[{"krate":0,"index":791}],"decl_id":null,"docs":" A demo `AttributeProvider` that will enumerate as a *Battery Service*.\n","sig":null,"attributes":[{"value":"/ A demo `AttributeProvider` that will enumerate as a *Battery Service*.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107320,"byte_end":107394,"line_start":13,"line_end":13,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107516,"byte_end":107519,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<BatteryServiceAttrs>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109735,"byte_end":109751,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"MidiServiceAttrs","qualname":"::gatt::MidiServiceAttrs","value":"MidiServiceAttrs {  }","parent":null,"children":[{"krate":0,"index":801}],"decl_id":null,"docs":" A demo `AttributeProvider` that will enumerate as a *Midi Service*.","sig":null,"attributes":[{"value":"/ A demo `AttributeProvider` that will enumerate as a *Midi Service*.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109564,"byte_end":109635,"line_start":83,"line_end":83,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109636,"byte_end":109639,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Also refer to <https://www.midi.org/specifications-old/item/bluetooth-le-midi>.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109640,"byte_end":109723,"line_start":85,"line_end":85,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109978,"byte_end":109981,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<MidiServiceAttrs>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"l2cap","qualname":"::l2cap","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":887},{"krate":0,"index":2895},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2905},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":890},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":916},{"krate":0,"index":920},{"krate":0,"index":924},{"krate":0,"index":931},{"krate":0,"index":937},{"krate":0,"index":939},{"krate":0,"index":943},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":953},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":964},{"krate":0,"index":968},{"krate":0,"index":2917},{"krate":0,"index":2920},{"krate":0,"index":971},{"krate":0,"index":978},{"krate":0,"index":983},{"krate":0,"index":995},{"krate":0,"index":1001},{"krate":0,"index":1010},{"krate":0,"index":1016}],"decl_id":null,"docs":" The Logical Link Control and Adaptation Protocol (L2CAP).","sig":null,"attributes":[{"value":"/ The Logical Link Control and Adaptation Protocol (L2CAP).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116547,"byte_end":116608,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116609,"byte_end":116612,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Note that LE and Classic Bluetooth differ quite a bit on this layer, even though they're","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116613,"byte_end":116705,"line_start":3,"line_end":3,"column_start":1,"column_end":93}},{"value":"/ supposed to share L2CAP. We're only implementing the LE bits.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116706,"byte_end":116771,"line_start":4,"line_end":4,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116772,"byte_end":116775,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ L2CAP provides \"channels\" to the upper layers that are mapped to the physical transport below","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116776,"byte_end":116873,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ the L2CAP layer (the LE Link Layer or whatever Classic Bluetooth does). A channel is identified","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116874,"byte_end":116973,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ by a 16-bit ID (also see [`Channel`]), a few of which are reserved.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":116974,"byte_end":117045,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117046,"byte_end":117049,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ A minimal implementation for Classic Bluetooth must support the L2CAP signaling channel","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117050,"byte_end":117141,"line_start":10,"line_end":10,"column_start":1,"column_end":92}},{"value":"/ (`0x0001`). A minimal implementation for BLE has to support the L2CAP LE signaling channel","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117142,"byte_end":117236,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ (`0x0005`), the Attribute Protocol channel (`0x0004`), and the LE Security Manager channel","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117237,"byte_end":117331,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ (`0x0006`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117332,"byte_end":117347,"line_start":13,"line_end":13,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117348,"byte_end":117351,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Establishing new connection-oriented channels, as well as transferring data over the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117352,"byte_end":117440,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"/ connectionless channel (`0x0002`) makes use of *Protocol/Service Multiplexers* (PSMs), which are","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117441,"byte_end":117541,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"/ numbers identifying the protocol or service to use. These numbers are either defined by the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117542,"byte_end":117637,"line_start":17,"line_end":17,"column_start":1,"column_end":96}},{"value":"/ Bluetooth SIG or allocated dynamically for use with the Service Discovery Protocol (SDP). The","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117638,"byte_end":117735,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/ preallocated numbers are hosted online [here][l2c].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117736,"byte_end":117791,"line_start":19,"line_end":19,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117792,"byte_end":117795,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [l2c]: https://www.bluetooth.com/specifications/assigned-numbers/logical-link-control","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":117796,"byte_end":117885,"line_start":21,"line_end":21,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2895},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119494,"byte_end":119501,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"Channel","qualname":"::l2cap::Channel","value":"","parent":null,"children":[],"decl_id":null,"docs":" An L2CAP channel identifier (CID).","sig":null,"attributes":[{"value":"/ An L2CAP channel identifier (CID).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118276,"byte_end":118314,"line_start":34,"line_end":34,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118315,"byte_end":118318,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Channels are basically like TCP ports. A `Protocol` can listen on a channel and is connected to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118319,"byte_end":118418,"line_start":36,"line_end":36,"column_start":1,"column_end":100}},{"value":"/ a channel on the other device to which all responses are addressed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118419,"byte_end":118490,"line_start":37,"line_end":37,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118491,"byte_end":118494,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ A number of channel identifiers are reserved for predefined functions:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118495,"byte_end":118569,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118570,"byte_end":118573,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ * `0x0000`: The null identifier. Must never be used as a destination endpoint.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118574,"byte_end":118656,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/ * `0x0001`: L2CAP signaling channel (Classic Bluetooth only).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118657,"byte_end":118722,"line_start":42,"line_end":42,"column_start":1,"column_end":66}},{"value":"/ * `0x0002`: Connectionless channel (Classic Bluetooth only).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118723,"byte_end":118787,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ * `0x0003`: AMP manager (not relevant for Classic and LE Bluetooth).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118788,"byte_end":118860,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ * `0x0004`: Attribute protocol (ATT). BLE only.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118861,"byte_end":118912,"line_start":45,"line_end":45,"column_start":1,"column_end":52}},{"value":"/ * `0x0005`: LE L2CAP signaling channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118913,"byte_end":118956,"line_start":46,"line_end":46,"column_start":1,"column_end":44}},{"value":"/ * `0x0006`: LE Security Manager protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":118957,"byte_end":119002,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/ * `0x0007`: Classic Bluetooth Security Manager protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119003,"byte_end":119063,"line_start":48,"line_end":48,"column_start":1,"column_end":61}},{"value":"/ * `0x0008`-`0x003E`: Reserved.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119064,"byte_end":119098,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"/ * `0x003F`: AMP test manager (not relevant for Classic and LE Bluetooth).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119099,"byte_end":119176,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119177,"byte_end":119180,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ For BLE, channels `0x0040`-`0x007F` are dynamically allocated, while `0x0080` and beyond are","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119181,"byte_end":119277,"line_start":52,"line_end":52,"column_start":1,"column_end":97}},{"value":"/ reserved and should not be used (as of *Bluetooth 4.2*).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119278,"byte_end":119338,"line_start":53,"line_end":53,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119339,"byte_end":119342,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ For classic Bluetooth, all channels `0x0040`-`0xFFFF` are available for dynamic allocation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119343,"byte_end":119438,"line_start":55,"line_end":55,"column_start":1,"column_end":96}}]},{"kind":"Const","id":{"krate":0,"index":891},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119619,"byte_end":119623,"line_start":61,"line_end":61,"column_start":15,"column_end":19},"name":"NULL","qualname":"::l2cap::Channel::NULL","value":"Self","parent":{"krate":0,"index":890},"children":[],"decl_id":null,"docs":" The null channel identifier. Must not be used as a destination endpoint.\n","sig":null,"attributes":[{"value":"/ The null channel identifier. Must not be used as a destination endpoint.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119528,"byte_end":119604,"line_start":60,"line_end":60,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119722,"byte_end":119725,"line_start":64,"line_end":64,"column_start":15,"column_end":18},"name":"ATT","qualname":"::l2cap::Channel::ATT","value":"Self","parent":{"krate":0,"index":890},"children":[],"decl_id":null,"docs":" The channel used by the Attribute Protocol (ATT).\n","sig":null,"attributes":[{"value":"/ The channel used by the Attribute Protocol (ATT).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119654,"byte_end":119707,"line_start":63,"line_end":63,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119819,"byte_end":119831,"line_start":67,"line_end":67,"column_start":15,"column_end":27},"name":"LE_SIGNALING","qualname":"::l2cap::Channel::LE_SIGNALING","value":"Self","parent":{"krate":0,"index":890},"children":[],"decl_id":null,"docs":" LE L2CAP signaling channel (connectionless).\n","sig":null,"attributes":[{"value":"/ LE L2CAP signaling channel (connectionless).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119756,"byte_end":119804,"line_start":66,"line_end":66,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119909,"byte_end":119928,"line_start":70,"line_end":70,"column_start":15,"column_end":34},"name":"LE_SECURITY_MANAGER","qualname":"::l2cap::Channel::LE_SECURITY_MANAGER","value":"Self","parent":{"krate":0,"index":890},"children":[],"decl_id":null,"docs":" LE Security Manager channel.\n","sig":null,"attributes":[{"value":"/ LE Security Manager channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119862,"byte_end":119894,"line_start":69,"line_end":69,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120027,"byte_end":120033,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<Channel>::as_raw","value":"pub fn as_raw(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the channel identifier (CID) as a raw `u16`.\n","sig":null,"attributes":[{"value":"/ Returns the channel identifier (CID) as a raw `u16`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119959,"byte_end":120015,"line_start":72,"line_end":72,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120395,"byte_end":120417,"line_start":82,"line_end":82,"column_start":12,"column_end":34},"name":"is_connection_oriented","qualname":"<Channel>::is_connection_oriented","value":"pub fn is_connection_oriented(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is connection-oriented.","sig":null,"attributes":[{"value":"/ Returns whether this channel is connection-oriented.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120076,"byte_end":120132,"line_start":77,"line_end":77,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120137,"byte_end":120140,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ L2CAP PDUs addressed to connection-oriented channels are called *B-frames* if the channel is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120145,"byte_end":120241,"line_start":79,"line_end":79,"column_start":5,"column_end":101}},{"value":"/ in \"Basic Mode\", and can be either *S-frames* or *I-frames* if the channel is in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120246,"byte_end":120330,"line_start":80,"line_end":80,"column_start":5,"column_end":89}},{"value":"/ retransmission/flow control/streaming modes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120335,"byte_end":120383,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120630,"byte_end":120647,"line_start":89,"line_end":89,"column_start":12,"column_end":29},"name":"is_connectionless","qualname":"<Channel>::is_connectionless","value":"pub fn is_connectionless(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is connectionless.","sig":null,"attributes":[{"value":"/ Returns whether this channel is connectionless.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120480,"byte_end":120531,"line_start":86,"line_end":86,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120536,"byte_end":120539,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ L2CAP PDUs addressed to connectionless channels are called *G-frames*.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120544,"byte_end":120618,"line_start":88,"line_end":88,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121411,"byte_end":121424,"line_start":119,"line_end":119,"column_start":11,"column_end":24},"name":"ChannelMapper","qualname":"::l2cap::ChannelMapper","value":"ChannelMapper","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"decl_id":null,"docs":" Trait for L2CAP channel mappers that provide access to the protocol or service behind a CID.\n","sig":null,"attributes":[{"value":"/ Trait for L2CAP channel mappers that provide access to the protocol or service behind a CID.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121304,"byte_end":121400,"line_start":118,"line_end":118,"column_start":1,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":907},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121491,"byte_end":121508,"line_start":121,"line_end":121,"column_start":10,"column_end":27},"name":"AttributeProvider","qualname":"::l2cap::ChannelMapper::AttributeProvider","value":"type AttributeProvider: AttributeProvider;","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" The attribute provider used by the ATT server.\n","sig":null,"attributes":[{"value":"/ The attribute provider used by the ATT server.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121431,"byte_end":121481,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121625,"byte_end":121631,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"lookup","qualname":"::l2cap::ChannelMapper::lookup","value":"pub fn lookup(&mut Self, Channel) -> Option<ChannelData<, dyn ProtocolObj>>","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Look up what's connected to `channel` (eg. the `Protocol` to which to forward).\n","sig":null,"attributes":[{"value":"/ Look up what's connected to `channel` (eg. the `Protocol` to which to forward).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121534,"byte_end":121617,"line_start":123,"line_end":123,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121797,"byte_end":121800,"line_start":127,"line_end":127,"column_start":8,"column_end":11},"name":"att","qualname":"::l2cap::ChannelMapper::att","value":"pub fn att(&mut Self)\n-> ChannelData<, AttributeServer<Self::AttributeProvider>>","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" Returns information about the Attribute Protocol on channel `0x0004`.\n","sig":null,"attributes":[{"value":"/ Returns information about the Attribute Protocol on channel `0x0004`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121716,"byte_end":121789,"line_start":126,"line_end":126,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121940,"byte_end":121951,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"ChannelData","qualname":"::l2cap::ChannelData","value":"ChannelData {  }","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915}],"decl_id":null,"docs":" Data associated with a connected L2CAP channel.\n","sig":null,"attributes":[{"value":"/ Data associated with a connected L2CAP channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121877,"byte_end":121928,"line_start":130,"line_end":130,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123689,"byte_end":123705,"line_start":182,"line_end":182,"column_start":12,"column_end":28},"name":"response_channel","qualname":"<ChannelData>::response_channel","value":"pub fn response_channel(&Self) -> Channel","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Channel` to which the response should be sent.\n","sig":null,"attributes":[{"value":"/ Returns the `Channel` to which the response should be sent.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123614,"byte_end":123677,"line_start":181,"line_end":181,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124266,"byte_end":124274,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"pdu_size","qualname":"<ChannelData>::pdu_size","value":"pub fn pdu_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the PDU size required by the protocol.","sig":null,"attributes":[{"value":"/ Returns the PDU size required by the protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123767,"byte_end":123817,"line_start":186,"line_end":186,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123822,"byte_end":123825,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ This is the minimum size in Bytes the protocol needs to have provided for any of its","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123830,"byte_end":123918,"line_start":188,"line_end":188,"column_start":5,"column_end":93}},{"value":"/ outgoing PDUs. `Protocol` implementations may make use of additional space as well, but this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123923,"byte_end":124019,"line_start":189,"line_end":189,"column_start":5,"column_end":101}},{"value":"/ is the very minimum.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124024,"byte_end":124048,"line_start":190,"line_end":190,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124053,"byte_end":124056,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The L2CAP implementation will not forward incoming PDUs to the protocol unless this amount","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124061,"byte_end":124155,"line_start":192,"line_end":192,"column_start":5,"column_end":99}},{"value":"/ of space is available in the TX buffer. This guarantees that the response will always fit.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124160,"byte_end":124254,"line_start":193,"line_end":193,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124380,"byte_end":124388,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"protocol","qualname":"<ChannelData>::protocol","value":"pub fn protocol(&mut Self) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Returns the protocol connected to the channel.\n","sig":null,"attributes":[{"value":"/ Returns the protocol connected to the channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124318,"byte_end":124368,"line_start":198,"line_end":198,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124693,"byte_end":124706,"line_start":207,"line_end":207,"column_start":12,"column_end":25},"name":"into_protocol","qualname":"<ChannelData>::into_protocol","value":"pub fn into_protocol(Self) -> &'a mut P","parent":null,"children":[],"decl_id":null,"docs":" Consumes `self` and returns the protocol connected to the channel, with lifetime `'a`.","sig":null,"attributes":[{"value":"/ Consumes `self` and returns the protocol connected to the channel, with lifetime `'a`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124445,"byte_end":124535,"line_start":203,"line_end":203,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124540,"byte_end":124543,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This can be useful when the lifetime of the reference must not be tied to `self`, as would","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124548,"byte_end":124642,"line_start":205,"line_end":205,"column_start":5,"column_end":99}},{"value":"/ be the case with `protocol()`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124647,"byte_end":124681,"line_start":206,"line_end":206,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125103,"byte_end":125116,"line_start":220,"line_end":220,"column_start":12,"column_end":25},"name":"BleChannelMap","qualname":"::l2cap::BleChannelMap","value":"BleChannelMap {  }","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936}],"decl_id":null,"docs":" A fixed BLE channel map that provides only the required channel endpoints and does not allow\n dynamic channels.","sig":null,"attributes":[{"value":"/ A fixed BLE channel map that provides only the required channel endpoints and does not allow","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124759,"byte_end":124855,"line_start":212,"line_end":212,"column_start":1,"column_end":97}},{"value":"/ dynamic channels.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124856,"byte_end":124877,"line_start":213,"line_end":213,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124878,"byte_end":124881,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ The channels are mapped as follows (no other channels are supported):","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124882,"byte_end":124955,"line_start":215,"line_end":215,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124956,"byte_end":124959,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ * `0x0004`: Attribute protocol (ATT).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":124960,"byte_end":125001,"line_start":217,"line_end":217,"column_start":1,"column_end":42}},{"value":"/ * `0x0005`: LE L2CAP signaling channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125002,"byte_end":125045,"line_start":218,"line_end":218,"column_start":1,"column_end":44}},{"value":"/ * `0x0006`: LE Security Manager protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125046,"byte_end":125091,"line_start":219,"line_end":219,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125598,"byte_end":125603,"line_start":232,"line_end":232,"column_start":12,"column_end":17},"name":"empty","qualname":"<BleChannelMap<NoAttributes, NoSecurity>>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new channel map with no backing data for the connected protocols.","sig":null,"attributes":[{"value":"/ Creates a new channel map with no backing data for the connected protocols.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125301,"byte_end":125380,"line_start":227,"line_end":227,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125385,"byte_end":125388,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This means:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125393,"byte_end":125408,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/ * The attribute server on channel `0x0004` will host an empty attribute set.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125413,"byte_end":125493,"line_start":230,"line_end":230,"column_start":5,"column_end":85}},{"value":"/ * The security manager on channel `0x0006` will not support pairing or any security.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125498,"byte_end":125586,"line_start":231,"line_end":231,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125866,"byte_end":125881,"line_start":242,"line_end":242,"column_start":12,"column_end":27},"name":"with_attributes","qualname":"<BleChannelMap<A, NoSecurity>>::with_attributes","value":"pub fn with_attributes(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126152,"byte_end":126170,"line_start":251,"line_end":251,"column_start":12,"column_end":30},"name":"attribute_provider","qualname":"<BleChannelMap<A, NoSecurity>>::attribute_provider","value":"pub fn attribute_provider(&mut Self) -> &mut A","parent":null,"children":[],"decl_id":null,"docs":" Provides mutable access to the underlying `AttributeProvider`.\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the underlying `AttributeProvider`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126074,"byte_end":126140,"line_start":250,"line_end":250,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":949},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127083,"byte_end":127094,"line_start":276,"line_end":276,"column_start":11,"column_end":22},"name":"ProtocolObj","qualname":"::l2cap::ProtocolObj","value":"ProtocolObj","parent":null,"children":[{"krate":0,"index":950}],"decl_id":null,"docs":" Trait for protocols that sit on top of L2CAP (object-safe part).","sig":null,"attributes":[{"value":"/ Trait for protocols that sit on top of L2CAP (object-safe part).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126925,"byte_end":126993,"line_start":273,"line_end":273,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126994,"byte_end":126997,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ A protocol can be connected to an L2CAP channel via a `ChannelMapper`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126998,"byte_end":127072,"line_start":275,"line_end":275,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127698,"byte_end":127713,"line_start":288,"line_end":288,"column_start":8,"column_end":23},"name":"process_message","qualname":"::l2cap::ProtocolObj::process_message","value":"pub fn process_message(&mut Self, &[u8], Sender) -> Result<(), Error>","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" Process a message sent to the protocol.","sig":null,"attributes":[{"value":"/ Process a message sent to the protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127101,"byte_end":127144,"line_start":277,"line_end":277,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127149,"byte_end":127152,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ The message is reassembled by L2CAP already, and the `responder` is guaranteed to fit a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127157,"byte_end":127248,"line_start":279,"line_end":279,"column_start":5,"column_end":96}},{"value":"/ protocol payload of at least `Protocol::RSP_PDU_SIZE` Bytes, as defined by the protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127253,"byte_end":127345,"line_start":280,"line_end":280,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127350,"byte_end":127353,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127358,"byte_end":127370,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127375,"byte_end":127378,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ This method should only return an error when a critical problem occurs that can not be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127383,"byte_end":127473,"line_start":284,"line_end":284,"column_start":5,"column_end":95}},{"value":"/ recovered from and that can not be reported back to the connected device using the protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127478,"byte_end":127574,"line_start":285,"line_end":285,"column_start":5,"column_end":101}},{"value":"/ This means that only things like unrecoverable protocol parsing errors should return an","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127579,"byte_end":127670,"line_start":286,"line_end":286,"column_start":5,"column_end":96}},{"value":"/ error here.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127675,"byte_end":127690,"line_start":287,"line_end":287,"column_start":5,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":951},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127949,"byte_end":127957,"line_start":294,"line_end":294,"column_start":11,"column_end":19},"name":"Protocol","qualname":"::l2cap::Protocol","value":"Protocol: ProtocolObj","parent":null,"children":[{"krate":0,"index":952}],"decl_id":null,"docs":" Trait for protocols that sit on top of L2CAP (non-object-safe part).","sig":null,"attributes":[{"value":"/ Trait for protocols that sit on top of L2CAP (non-object-safe part).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127789,"byte_end":127861,"line_start":291,"line_end":291,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127862,"byte_end":127865,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ This extends the `ProtocolObj` trait with other protocol properties.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127866,"byte_end":127938,"line_start":293,"line_end":293,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128174,"byte_end":128186,"line_start":299,"line_end":299,"column_start":11,"column_end":23},"name":"RSP_PDU_SIZE","qualname":"::l2cap::Protocol::RSP_PDU_SIZE","value":"u8","parent":{"krate":0,"index":951},"children":[],"decl_id":null,"docs":" Minimum size needed by PDUs sent by this protocol.","sig":null,"attributes":[{"value":"/ Minimum size needed by PDUs sent by this protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127977,"byte_end":128031,"line_start":295,"line_end":295,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128036,"byte_end":128039,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Incoming PDUs will only be forwarded to the protocol if there is at least this much space in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128044,"byte_end":128140,"line_start":297,"line_end":297,"column_start":5,"column_end":101}},{"value":"/ the TX buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128145,"byte_end":128163,"line_start":298,"line_end":298,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2917},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129784,"byte_end":129794,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"L2CAPState","qualname":"::l2cap::L2CAPState","value":"L2CAPState {  }","parent":null,"children":[{"krate":0,"index":2919}],"decl_id":null,"docs":" L2CAP channel manager and responder.\n","sig":null,"attributes":[{"value":"/ L2CAP channel manager and responder.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129715,"byte_end":129755,"line_start":361,"line_end":361,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129956,"byte_end":129959,"line_start":369,"line_end":369,"column_start":12,"column_end":15},"name":"new","qualname":"<L2CAPState<M>>::new","value":"pub fn new(M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new L2CAP state using the given channel configuration.\n","sig":null,"attributes":[{"value":"/ Creates a new L2CAP state using the given channel configuration.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129876,"byte_end":129944,"line_start":368,"line_end":368,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130084,"byte_end":130086,"line_start":374,"line_end":374,"column_start":12,"column_end":14},"name":"tx","qualname":"<L2CAPState<M>>::tx","value":"pub fn tx<'a, P: Producer>(&'a mut Self, &'a mut P) -> L2CAPStateTx","parent":null,"children":[],"decl_id":null,"docs":" Gives this instance the ability to transmit packets.\n","sig":null,"attributes":[{"value":"/ Gives this instance the ability to transmit packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130016,"byte_end":130072,"line_start":373,"line_end":373,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130287,"byte_end":130301,"line_start":379,"line_end":379,"column_start":12,"column_end":26},"name":"channel_mapper","qualname":"<L2CAPState<M>>::channel_mapper","value":"pub fn channel_mapper(&mut Self) -> &mut M","parent":null,"children":[],"decl_id":null,"docs":" Provides mutable access to the underlying `ChannelMapper`.\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the underlying `ChannelMapper`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130213,"byte_end":130275,"line_start":378,"line_end":378,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":978},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130609,"byte_end":130615,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"Sender","qualname":"::l2cap::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982}],"decl_id":null,"docs":" Provides a way to send a L2CAP message with preallocated storage.","sig":null,"attributes":[{"value":"/ Provides a way to send a L2CAP message with preallocated storage.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130359,"byte_end":130428,"line_start":384,"line_end":384,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130429,"byte_end":130432,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ This can be done either in response to an incoming packet (via `ProtocolObj::process_msg`), or","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130433,"byte_end":130531,"line_start":386,"line_end":386,"column_start":1,"column_end":99}},{"value":"/ as a device-initiated packet (eg. an attribute notification).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130532,"byte_end":130597,"line_start":387,"line_end":387,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131869,"byte_end":131873,"line_start":427,"line_end":427,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender>::send","value":"pub fn send<P: ToBytes>(&mut Self, P) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Enqueues an L2CAP message to be sent over the data connection.","sig":null,"attributes":[{"value":"/ Enqueues an L2CAP message to be sent over the data connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131565,"byte_end":131631,"line_start":421,"line_end":421,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131636,"byte_end":131639,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ L2CAP header (including the destination endpoint's channel) and the data channel PDU header","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131644,"byte_end":131739,"line_start":423,"line_end":423,"column_start":5,"column_end":100}},{"value":"/ will be added automatically.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131744,"byte_end":131776,"line_start":424,"line_end":424,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131781,"byte_end":131784,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ This will fail if there's not enough space left in the TX queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":131789,"byte_end":131857,"line_start":426,"line_end":426,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132401,"byte_end":132410,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"send_with","qualname":"<Sender>::send_with","value":"pub fn send_with<T, E,\n                 impl FnOnce(&mut ByteWriter<'_>) -> Result<T, E>: FnOnce(&mut ByteWriter)\n                 ->\n                 Result<T,\n                        E>>(&mut Self,\n                            impl FnOnce(&mut ByteWriter<'_>) -> Result<T, E>)\n-> Result<T, E> where E: From<Error>","parent":null,"children":[],"decl_id":null,"docs":" Enqueues an L2CAP message encoded by a closure.","sig":null,"attributes":[{"value":"/ Enqueues an L2CAP message encoded by a closure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132001,"byte_end":132052,"line_start":431,"line_end":431,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132057,"byte_end":132060,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ L2CAP header and data channel PDU header will be added automatically. The closure `f` only","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132065,"byte_end":132159,"line_start":433,"line_end":433,"column_start":5,"column_end":99}},{"value":"/ has to write the protocol PDU to transmit over L2CAP.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132164,"byte_end":132221,"line_start":434,"line_end":434,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132226,"byte_end":132229,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ The L2CAP implementation will ensure that there are exactly `Protocol::RSP_PDU_SIZE` Bytes","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132234,"byte_end":132328,"line_start":436,"line_end":436,"column_start":5,"column_end":99}},{"value":"/ available in the `ByteWriter` passed to the closure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":132333,"byte_end":132389,"line_start":437,"line_end":437,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134596,"byte_end":134608,"line_start":501,"line_end":501,"column_start":12,"column_end":24},"name":"L2CAPStateTx","qualname":"::l2cap::L2CAPStateTx","value":"L2CAPStateTx {  }","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000}],"decl_id":null,"docs":" An `L2CAPState` with the ability to transmit packets.","sig":null,"attributes":[{"value":"/ An `L2CAPState` with the ability to transmit packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134480,"byte_end":134537,"line_start":498,"line_end":498,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134538,"byte_end":134541,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ Derefs to the underlying `L2CAPState`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134542,"byte_end":134584,"line_start":500,"line_end":500,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":135032,"byte_end":135045,"line_start":511,"line_end":511,"column_start":12,"column_end":25},"name":"process_start","qualname":"<L2CAPStateTx>::process_start","value":"pub fn process_start(&mut Self, &[u8]) -> Consume<()>","parent":null,"children":[],"decl_id":null,"docs":" Process the start of a new L2CAP message (or a complete, unfragmented message).","sig":null,"attributes":[{"value":"/ Process the start of a new L2CAP message (or a complete, unfragmented message).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134771,"byte_end":134854,"line_start":507,"line_end":507,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134859,"byte_end":134862,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ If the incoming message is unfragmented, it will be forwarded to the protocol listening on","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134867,"byte_end":134961,"line_start":509,"line_end":509,"column_start":5,"column_end":99}},{"value":"/ the addressed channel, and a response may be sent.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134966,"byte_end":135020,"line_start":510,"line_end":510,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":135637,"byte_end":135649,"line_start":528,"line_end":528,"column_start":12,"column_end":24},"name":"process_cont","qualname":"<L2CAPStateTx>::process_cont","value":"pub fn process_cont(&mut Self, &[u8]) -> Consume<()>","parent":null,"children":[],"decl_id":null,"docs":" Process continuation of an L2CAP message.","sig":null,"attributes":[{"value":"/ Process continuation of an L2CAP message.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":135513,"byte_end":135558,"line_start":525,"line_end":525,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":135563,"byte_end":135566,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ This is not yet implemented and will always panic.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":135571,"byte_end":135625,"line_start":527,"line_end":527,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":137044,"byte_end":137047,"line_start":562,"line_end":562,"column_start":12,"column_end":15},"name":"att","qualname":"<L2CAPStateTx>::att","value":"pub fn att(&mut Self)\n-> Option<att::AttributeServerTx<, M::AttributeProvider>>","parent":null,"children":[],"decl_id":null,"docs":" Prepares for sending data using the Attribute Protocol.","sig":null,"attributes":[{"value":"/ Prepares for sending data using the Attribute Protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136505,"byte_end":136564,"line_start":553,"line_end":553,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136569,"byte_end":136572,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ This will reserve sufficient space in the outgoing PDU buffer to send any ATT PDU, and then","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136577,"byte_end":136672,"line_start":555,"line_end":555,"column_start":5,"column_end":100}},{"value":"/ return an `AttributeServerTx` instance that can be used to initiate an ATT-specific","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136677,"byte_end":136764,"line_start":556,"line_end":556,"column_start":5,"column_end":92}},{"value":"/ procedure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136769,"byte_end":136783,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136788,"byte_end":136791,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there's not enough space in the TX packet queue to send an ATT PDU. If","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136796,"byte_end":136888,"line_start":559,"line_end":559,"column_start":5,"column_end":97}},{"value":"/ that happens, calling this method again at a later time (after the Link-Layer had time to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136893,"byte_end":136986,"line_start":560,"line_end":560,"column_start":5,"column_end":98}},{"value":"/ transmit more packets) might succeed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":136991,"byte_end":137032,"line_start":561,"line_end":561,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"link","qualname":"::link","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1131},{"krate":0,"index":1263},{"krate":0,"index":1299},{"krate":0,"index":1317},{"krate":0,"index":1449},{"krate":0,"index":1508},{"krate":0,"index":1523},{"krate":0,"index":1542},{"krate":0,"index":1595},{"krate":0,"index":1654},{"krate":0,"index":1754},{"krate":0,"index":1811},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1877},{"krate":0,"index":1880},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1913},{"krate":0,"index":1918},{"krate":0,"index":3685},{"krate":0,"index":3689},{"krate":0,"index":3691},{"krate":0,"index":3693},{"krate":0,"index":3701},{"krate":0,"index":3703},{"krate":0,"index":3705},{"krate":0,"index":3715},{"krate":0,"index":3717},{"krate":0,"index":1929}],"decl_id":null,"docs":" Link-Layer.","sig":null,"attributes":[{"value":"/ Link-Layer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":138892,"byte_end":138907,"line_start":1,"line_end":1,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":138908,"byte_end":138911,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Note that a hardware BLE radio will already implement a few aspects of the link layer (such as","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":138912,"byte_end":139010,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ CRC calculation, preamble generation, etc.). Consider this module to be a construction kit for","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139011,"byte_end":139109,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ BLE Link-Layers: Take whatever your hardware can do, supplement it with a few condiments from","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139110,"byte_end":139207,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ this module, and you get a (hopefully) working Link-Layer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139208,"byte_end":139270,"line_start":6,"line_end":6,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139271,"byte_end":139274,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Refer to the official *Link Layer Specification* for details and more graphics and tables.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139275,"byte_end":139369,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139370,"byte_end":139373,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Packet Format","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139374,"byte_end":139393,"line_start":10,"line_end":10,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139394,"byte_end":139397,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ All following graphics are based on the Bluetooth specification. If a field is marked with `-`,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139398,"byte_end":139497,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ it should be set to 0 when sending such a packet, and ignored when receiving it (the spec calls","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139498,"byte_end":139597,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ these \"RFU\" = Reserved for Future Use).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139598,"byte_end":139641,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139642,"byte_end":139645,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ All values are transmitted in little-endian bit order unless otherwise noted. All fields in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139646,"byte_end":139741,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ graphics are ordered starting with the field transmitted first (LSB).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139742,"byte_end":139815,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139816,"byte_end":139819,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The following graphic illustrates the raw in-air packet format. The packet transfers a PDU whose","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139820,"byte_end":139920,"line_start":19,"line_end":19,"column_start":1,"column_end":101}},{"value":"/ format depends on whether it is sent on an *advertising channel* or a *data channel*.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":139921,"byte_end":140010,"line_start":20,"line_end":20,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140011,"byte_end":140014,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140015,"byte_end":140029,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/ LSB                                                     MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140030,"byte_end":140093,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/ +-----------+----------------+---------------+------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140094,"byte_end":140157,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ | Preamble  | Access Address |     PDU       |  CRC       |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140158,"byte_end":140221,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/ | (1 octet) | (4 octets)     | (2-39 octets) | (3 octets) |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140222,"byte_end":140285,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/ +-----------+----------------+---------------+------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140286,"byte_end":140349,"line_start":27,"line_end":27,"column_start":1,"column_end":64}},{"value":"/                              \\---------------/      ^","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140350,"byte_end":140407,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/                                      |              |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140408,"byte_end":140465,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/                                      +--------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140466,"byte_end":140523,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/                                     CRC is calculated","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140524,"byte_end":140581,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/                                       over the PDU","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140582,"byte_end":140636,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140637,"byte_end":140640,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/                              \\----------------------------/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140641,"byte_end":140704,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/                                    Data Whitening is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140705,"byte_end":140761,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/                                 applied to PDU and CRC","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140762,"byte_end":140820,"line_start":36,"line_end":36,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140821,"byte_end":140828,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140829,"byte_end":140832,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The 24-bit CRC value is transmitted MSb first. Length of the PDU depends on the kind of PDU","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140833,"byte_end":140928,"line_start":39,"line_end":39,"column_start":1,"column_end":96}},{"value":"/ (advertising or data channel).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140929,"byte_end":140963,"line_start":40,"line_end":40,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140964,"byte_end":140967,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ## Advertising Channel PDU","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140968,"byte_end":140998,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":140999,"byte_end":141002,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Each advertising channel PDU consists of a 16-bit header and a variably-sized payload, the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141003,"byte_end":141097,"line_start":44,"line_end":44,"column_start":1,"column_end":95}},{"value":"/ length of which is stored in a header field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141098,"byte_end":141146,"line_start":45,"line_end":45,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141147,"byte_end":141150,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141151,"byte_end":141165,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/ LSB                                           MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141166,"byte_end":141219,"line_start":48,"line_end":48,"column_start":1,"column_end":54}},{"value":"/ +-------------+---------------------------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141220,"byte_end":141273,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ |  Header     |             Payload             |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141274,"byte_end":141327,"line_start":50,"line_end":50,"column_start":1,"column_end":54}},{"value":"/ |  (16 bits)  |    (length stored in header)    |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141328,"byte_end":141381,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/ +-------------+---------------------------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141382,"byte_end":141435,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141436,"byte_end":141443,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141444,"byte_end":141447,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The header looks like this:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141448,"byte_end":141479,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141480,"byte_end":141483,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141484,"byte_end":141498,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/ LSB                                                                     MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141499,"byte_end":141578,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ +------------+------------+---------+---------+--------------+------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141579,"byte_end":141658,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/ |  PDU Type  |     -      |  TxAdd  |  RxAdd  |    Length    |     -      |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141659,"byte_end":141738,"line_start":60,"line_end":60,"column_start":1,"column_end":80}},{"value":"/ |  (4 bits)  |  (2 bits)  | (1 bit) | (1 bit) |   (6 bits)   |  (2 bits)  |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141739,"byte_end":141818,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ +------------+------------+---------+---------+--------------+------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141819,"byte_end":141898,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141899,"byte_end":141906,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141907,"byte_end":141910,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ The `TxAdd` and `RxAdd` field are only used for some payloads, for all others, they should be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":141911,"byte_end":142008,"line_start":65,"line_end":65,"column_start":1,"column_end":98}},{"value":"/ set to 0.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142009,"byte_end":142022,"line_start":66,"line_end":66,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142023,"byte_end":142026,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Length may be in range 6 to 36 (inclusive).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142027,"byte_end":142074,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142075,"byte_end":142078,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The data in `Payload` depends on the PDU Type. Refer to the spec or [`advertising::PduType`] for","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142079,"byte_end":142179,"line_start":70,"line_end":70,"column_start":1,"column_end":101}},{"value":"/ details.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142180,"byte_end":142192,"line_start":71,"line_end":71,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142193,"byte_end":142196,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ [`advertising::PduType`]: advertising/enum.PduType.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142197,"byte_end":142256,"line_start":73,"line_end":73,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142257,"byte_end":142260,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ## Data Channel PDU","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142261,"byte_end":142284,"line_start":75,"line_end":75,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142285,"byte_end":142288,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ A data channel PDU also contains a 16-bit header (but with a different layout) and a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142289,"byte_end":142377,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/ variably-sized payload.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142378,"byte_end":142405,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142406,"byte_end":142409,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ If the connection is encrypted and the payload contains at least 1 octet, a Message Integrity","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142410,"byte_end":142507,"line_start":80,"line_end":80,"column_start":1,"column_end":98}},{"value":"/ Check (MIC) is appended at the end.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142508,"byte_end":142547,"line_start":81,"line_end":81,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142548,"byte_end":142551,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142552,"byte_end":142566,"line_start":83,"line_end":83,"column_start":1,"column_end":15}},{"value":"/ LSB                                          MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142567,"byte_end":142619,"line_start":84,"line_end":84,"column_start":1,"column_end":53}},{"value":"/ +-----------+----------------------+ - - - - - +","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142620,"byte_end":142672,"line_start":85,"line_end":85,"column_start":1,"column_end":53}},{"value":"/ |  Header   |        Payload       |    MIC    |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142673,"byte_end":142725,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/ | (16 bits) |    (0..=27 octets)   | (32 bits) |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142726,"byte_end":142778,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"/ +-----------+----------------------+ - - - - - +","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142779,"byte_end":142831,"line_start":88,"line_end":88,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142832,"byte_end":142839,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142840,"byte_end":142843,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ Layout (in Bluetooth 4.2):","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142844,"byte_end":142874,"line_start":91,"line_end":91,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142875,"byte_end":142878,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142879,"byte_end":142893,"line_start":93,"line_end":93,"column_start":1,"column_end":15}},{"value":"/ LSB                                                                MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142894,"byte_end":142968,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ +----------+---------+---------+---------+------------+--------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":142969,"byte_end":143043,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ |   LLID   |  NESN   |   SN    |   MD    |     -      |    Length    |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143044,"byte_end":143118,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/ | (2 bits) | (1 bit) | (1 bit) | (1 bit) |  (3 bits)  |   (8 bits)   |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143119,"byte_end":143193,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/ +----------+---------+---------+---------+------------+--------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143194,"byte_end":143268,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143269,"byte_end":143276,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143277,"byte_end":143280,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Payload format depends on the value of the 2-bit `LLID` field:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143281,"byte_end":143347,"line_start":101,"line_end":101,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143348,"byte_end":143351,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ * `0b00`: Reserved value.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143352,"byte_end":143381,"line_start":103,"line_end":103,"column_start":1,"column_end":30}},{"value":"/ * `0b01`: LL Data PDU Continuation fragment or empty PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143382,"byte_end":143443,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/ * `0b10`: LL Data PDU Start of L2CAP message (or complete message if no fragmentation","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143444,"byte_end":143533,"line_start":105,"line_end":105,"column_start":1,"column_end":90}},{"value":"/   necessary).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143534,"byte_end":143551,"line_start":106,"line_end":106,"column_start":1,"column_end":18}},{"value":"/ * `0b11`: LL Control PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143552,"byte_end":143581,"line_start":107,"line_end":107,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143582,"byte_end":143585,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ The `NESN` field specifies the **N**ext **E**xpected **S**equence **N**umber. The `SN` field","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143586,"byte_end":143682,"line_start":109,"line_end":109,"column_start":1,"column_end":97}},{"value":"/ specifies the **S**equence **N**umber of this PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143683,"byte_end":143737,"line_start":110,"line_end":110,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143738,"byte_end":143741,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The `MD` field specifies that the device sending the packet has more data to send during this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143742,"byte_end":143839,"line_start":112,"line_end":112,"column_start":1,"column_end":98}},{"value":"/ *connection event*. When both slave and master send a packet with the `MD` bit set to 0, the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143840,"byte_end":143936,"line_start":113,"line_end":113,"column_start":1,"column_end":97}},{"value":"/ connection event ends.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143937,"byte_end":143963,"line_start":114,"line_end":114,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143964,"byte_end":143967,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ The `Length` field specifies the length of payload **and `MIC`**. For Bluetooth versions <4.2,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":143968,"byte_end":144066,"line_start":116,"line_end":116,"column_start":1,"column_end":99}},{"value":"/ its maximum value is 31, resulting in a 27 octet Payload (the maximum) and a 32-bit `MIC`. 4.2","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144067,"byte_end":144165,"line_start":117,"line_end":117,"column_start":1,"column_end":99}},{"value":"/ added the possibility of larger packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144166,"byte_end":144210,"line_start":118,"line_end":118,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ad_structure","qualname":"::link::ad_structure","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1047},{"krate":0,"index":2923},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2957},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":2960},{"krate":0,"index":2965},{"krate":0,"index":2969},{"krate":0,"index":2972},{"krate":0,"index":1056},{"krate":0,"index":1064},{"krate":0,"index":1068},{"krate":0,"index":2976},{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2986},{"krate":0,"index":2988},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":2995},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3008},{"krate":0,"index":3010},{"krate":0,"index":3012},{"krate":0,"index":3037},{"krate":0,"index":3040},{"krate":0,"index":3042},{"krate":0,"index":3045},{"krate":0,"index":3047},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3055},{"krate":0,"index":3057},{"krate":0,"index":3060},{"krate":0,"index":3063},{"krate":0,"index":1072},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1083}],"decl_id":null,"docs":" Advertising Data / Extended Inquiry Response (EIR) data.","sig":null,"attributes":[{"value":"/ Advertising Data / Extended Inquiry Response (EIR) data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161570,"byte_end":161630,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161631,"byte_end":161634,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Part of GAP (Generic Access Profile).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161635,"byte_end":161676,"line_start":3,"line_end":3,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161677,"byte_end":161680,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Also see the [assigned numbers document][gap] hosted by the SIG.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161681,"byte_end":161749,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161750,"byte_end":161753,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [gap]: https://www.bluetooth.com/specifications/assigned-numbers/generic-access-profile","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161754,"byte_end":161845,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2925},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162796,"byte_end":162801,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"Flags","qualname":"::link::ad_structure::AdStructure::Flags","value":"AdStructure::Flags(Flags)","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":" Device flags and baseband capabilities.","sig":null,"attributes":[{"value":"/ Device flags and baseband capabilities.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162553,"byte_end":162596,"line_start":27,"line_end":27,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162601,"byte_end":162604,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This should be sent if any flags apply to the device. If not (ie. the value sent would be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162609,"byte_end":162702,"line_start":29,"line_end":29,"column_start":5,"column_end":98}},{"value":"/ 0), this may be omitted.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162707,"byte_end":162735,"line_start":30,"line_end":30,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162740,"byte_end":162743,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Must not be used in scan response data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162748,"byte_end":162791,"line_start":32,"line_end":32,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2928},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162815,"byte_end":162829,"line_start":35,"line_end":35,"column_start":5,"column_end":19},"name":"ServiceUuids16","qualname":"::link::ad_structure::AdStructure::ServiceUuids16","value":"AdStructure::ServiceUuids16(ServiceUuids)","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2931},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162861,"byte_end":162875,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"name":"ServiceUuids32","qualname":"::link::ad_structure::AdStructure::ServiceUuids32","value":"AdStructure::ServiceUuids32(ServiceUuids)","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162907,"byte_end":162922,"line_start":37,"line_end":37,"column_start":5,"column_end":20},"name":"ServiceUuids128","qualname":"::link::ad_structure::AdStructure::ServiceUuids128","value":"AdStructure::ServiceUuids128(ServiceUuids)","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2937},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163003,"byte_end":163016,"line_start":40,"line_end":40,"column_start":5,"column_end":18},"name":"ServiceData16","qualname":"::link::ad_structure::AdStructure::ServiceData16","value":"AdStructure::ServiceData16 { uuid, data }","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":" Service data with 16-bit service UUID.\n","sig":null,"attributes":[{"value":"/ Service data with 16-bit service UUID.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162956,"byte_end":162998,"line_start":39,"line_end":39,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2940},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163291,"byte_end":163308,"line_start":50,"line_end":50,"column_start":5,"column_end":22},"name":"CompleteLocalName","qualname":"::link::ad_structure::AdStructure::CompleteLocalName","value":"AdStructure::CompleteLocalName(&'a str)","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":" Sets the full (unabbreviated) device name.","sig":null,"attributes":[{"value":"/ Sets the full (unabbreviated) device name.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163166,"byte_end":163212,"line_start":47,"line_end":47,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163217,"byte_end":163220,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ This will be shown to the user when this device is found.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163225,"byte_end":163286,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2943},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163364,"byte_end":163382,"line_start":53,"line_end":53,"column_start":5,"column_end":23},"name":"ShortenedLocalName","qualname":"::link::ad_structure::AdStructure::ShortenedLocalName","value":"AdStructure::ShortenedLocalName(&'a str)","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":" Sets the shortened device name.\n","sig":null,"attributes":[{"value":"/ Sets the shortened device name.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163324,"byte_end":163359,"line_start":52,"line_end":52,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":2946},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163437,"byte_end":163461,"line_start":56,"line_end":56,"column_start":5,"column_end":29},"name":"ManufacturerSpecificData","qualname":"::link::ad_structure::AdStructure::ManufacturerSpecificData","value":"AdStructure::ManufacturerSpecificData { company_identifier, payload }","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":" Set manufacturer specific data\n","sig":null,"attributes":[{"value":"/ Set manufacturer specific data","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163398,"byte_end":163432,"line_start":55,"line_end":55,"column_start":5,"column_end":39}}]},{"kind":"StructVariant","id":{"krate":0,"index":2949},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163612,"byte_end":163619,"line_start":62,"line_end":62,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::link::ad_structure::AdStructure::Unknown","value":"AdStructure::Unknown { ty, data }","parent":{"krate":0,"index":2923},"children":[],"decl_id":null,"docs":" An unknown or unimplemented AD structure stored as raw bytes.\n","sig":null,"attributes":[{"value":"/ An unknown or unimplemented AD structure stored as raw bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163542,"byte_end":163607,"line_start":61,"line_end":61,"column_start":5,"column_end":70}}]},{"kind":"Enum","id":{"krate":0,"index":2923},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162531,"byte_end":162542,"line_start":26,"line_end":26,"column_start":10,"column_end":21},"name":"AdStructure","qualname":"::link::ad_structure::AdStructure","value":"pub enum AdStructure<'a> {\n    Flags(Flags),\n    ServiceUuids16(ServiceUuids),\n    ServiceUuids32(ServiceUuids),\n    ServiceUuids128(ServiceUuids),\n    ServiceData16 {\n        uuid: u16,\n        data: &'a [u8],\n    },\n    CompleteLocalName(&'a str),\n    ShortenedLocalName(&'a str),\n    ManufacturerSpecificData {\n        company_identifier: CompanyId,\n        payload: &'a [u8],\n    },\n    Unknown {\n        ty: u8,\n        data: &'a [u8],\n    },\n}","parent":null,"children":[{"krate":0,"index":2925},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2934},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2946},{"krate":0,"index":2949}],"decl_id":null,"docs":" A list of AD structures can be sent along with an advertising packet or scan response.","sig":null,"attributes":[{"value":"/ A list of AD structures can be sent along with an advertising packet or scan response.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":161992,"byte_end":162082,"line_start":14,"line_end":14,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162083,"byte_end":162086,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This mechanism allows a scanner to, for example, receive the device's name without having to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162087,"byte_end":162183,"line_start":16,"line_end":16,"column_start":1,"column_end":97}},{"value":"/ establish a connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162184,"byte_end":162211,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162212,"byte_end":162215,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Unless otherwise noted, each variant of this enum should only be included at most once per","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162216,"byte_end":162310,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ packet sent.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162311,"byte_end":162327,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162328,"byte_end":162331,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ From a very unrepresentative scan, most devices seem to include Flags and Manufacturer Data, and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162332,"byte_end":162432,"line_start":22,"line_end":22,"column_start":1,"column_end":101}},{"value":"/ optionally a device name, of course.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162433,"byte_end":162473,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"non_exhaustive","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":162474,"byte_end":162491,"line_start":24,"line_end":24,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2960},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167377,"byte_end":167389,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"ServiceUuids","qualname":"::link::ad_structure::ServiceUuids","value":"ServiceUuids {  }","parent":null,"children":[{"krate":0,"index":2963},{"krate":0,"index":2964}],"decl_id":null,"docs":" List of service UUIDs offered by the device.","sig":null,"attributes":[{"value":"/ List of service UUIDs offered by the device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167074,"byte_end":167122,"line_start":159,"line_end":159,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167123,"byte_end":167126,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ The list can be marked as complete or incomplete. For an incomplete list,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167127,"byte_end":167204,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/ more UUIDs can be sent in the scan response.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167205,"byte_end":167253,"line_start":162,"line_end":162,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167254,"byte_end":167257,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ The `ServiceUuids` type can handle 16-, 32-, and full-size 128-bit UUIDs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167258,"byte_end":167335,"line_start":164,"line_end":164,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167576,"byte_end":167586,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"from_uuids","qualname":"<ServiceUuids>::from_uuids","value":"pub fn from_uuids(bool, &'a [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `ServiceUuids` container from a list of UUIDs.\n","sig":null,"attributes":[{"value":"/ Creates a `ServiceUuids` container from a list of UUIDs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167504,"byte_end":167564,"line_start":172,"line_end":172,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167980,"byte_end":167991,"line_start":185,"line_end":185,"column_start":12,"column_end":23},"name":"is_complete","qualname":"<ServiceUuids>::is_complete","value":"pub fn is_complete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a boolean indicating whether this list is complete.","sig":null,"attributes":[{"value":"/ Returns a boolean indicating whether this list is complete.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167731,"byte_end":167794,"line_start":180,"line_end":180,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167799,"byte_end":167802,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ If this returns `false`, the device offers more services not contained","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167807,"byte_end":167881,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ in this list.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167886,"byte_end":167903,"line_start":183,"line_end":183,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":168110,"byte_end":168114,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"iter","qualname":"<ServiceUuids>::iter","value":"pub fn iter(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the UUIDs stored in `self`.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the UUIDs stored in `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":168042,"byte_end":168098,"line_start":189,"line_end":189,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2976},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170497,"byte_end":170502,"line_start":255,"line_end":255,"column_start":16,"column_end":21},"name":"Flags","qualname":"::link::ad_structure::Flags","value":"Flags {  }","parent":null,"children":[{"krate":0,"index":2977}],"decl_id":null,"docs":" BR/EDR and LE compatibility flags.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3013},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170523,"byte_end":170546,"line_start":256,"line_end":256,"column_start":15,"column_end":38},"name":"LE_LIMITED_DISCOVERABLE","qualname":"::link::ad_structure::Flags::LE_LIMITED_DISCOVERABLE","value":"Self","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3014},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170575,"byte_end":170598,"line_start":257,"line_end":257,"column_start":15,"column_end":38},"name":"LE_GENERAL_DISCOVERABLE","qualname":"::link::ad_structure::Flags::LE_GENERAL_DISCOVERABLE","value":"Self","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3015},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170627,"byte_end":170647,"line_start":258,"line_end":258,"column_start":15,"column_end":35},"name":"BR_EDR_NOT_SUPPORTED","qualname":"::link::ad_structure::Flags::BR_EDR_NOT_SUPPORTED","value":"Self","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3016},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170679,"byte_end":170701,"line_start":259,"line_end":259,"column_start":15,"column_end":37},"name":"SIMUL_LE_BR_CONTROLLER","qualname":"::link::ad_structure::Flags::SIMUL_LE_BR_CONTROLLER","value":"Self","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3017},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170731,"byte_end":170747,"line_start":260,"line_end":260,"column_start":15,"column_end":31},"name":"SIMUL_LE_BR_HOST","qualname":"::link::ad_structure::Flags::SIMUL_LE_BR_HOST","value":"Self","parent":{"krate":0,"index":3012},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171051,"byte_end":171063,"line_start":269,"line_end":269,"column_start":12,"column_end":24},"name":"discoverable","qualname":"<Flags>::discoverable","value":"pub fn discoverable() -> Flags","parent":null,"children":[],"decl_id":null,"docs":" Returns flags suitable for discoverable devices that want to establish a connection.","sig":null,"attributes":[{"value":"/ Returns flags suitable for discoverable devices that want to establish a connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170795,"byte_end":170883,"line_start":265,"line_end":265,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170888,"byte_end":170891,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ The created `Flags` value specifies that this device is not BR/EDR (classic Bluetooth)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170896,"byte_end":170986,"line_start":267,"line_end":267,"column_start":5,"column_end":95}},{"value":"/ capable and is in General Discoverable mode.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170991,"byte_end":171039,"line_start":268,"line_end":268,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171416,"byte_end":171425,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<Flags>::broadcast","value":"pub fn broadcast() -> Flags","parent":null,"children":[],"decl_id":null,"docs":" Returns flags suitable for non-connectable devices that just broadcast advertising packets.","sig":null,"attributes":[{"value":"/ Returns flags suitable for non-connectable devices that just broadcast advertising packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171155,"byte_end":171250,"line_start":273,"line_end":273,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171255,"byte_end":171258,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Creates a `Flags` value that specifies that BR/EDR (classic Bluetooth) is not supported and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171263,"byte_end":171358,"line_start":275,"line_end":275,"column_start":5,"column_end":100}},{"value":"/ that this device is not discoverable.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171363,"byte_end":171404,"line_start":276,"line_end":276,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171545,"byte_end":171550,"line_start":282,"line_end":282,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<Flags>::to_u8","value":"pub fn to_u8(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw representation of the flags.\n","sig":null,"attributes":[{"value":"/ Returns the raw representation of the flags.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171485,"byte_end":171533,"line_start":281,"line_end":281,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171739,"byte_end":171765,"line_start":288,"line_end":288,"column_start":12,"column_end":38},"name":"supports_classic_bluetooth","qualname":"<Flags>::supports_classic_bluetooth","value":"pub fn supports_classic_bluetooth(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a boolean indicating whether the device that sent this `Flags` value supports BR/EDR\n (aka \"Classic Bluetooth\").\n","sig":null,"attributes":[{"value":"/ Returns a boolean indicating whether the device that sent this `Flags` value supports BR/EDR","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171596,"byte_end":171692,"line_start":286,"line_end":286,"column_start":5,"column_end":101}},{"value":"/ (aka \"Classic Bluetooth\").","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171697,"byte_end":171727,"line_start":287,"line_end":287,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172147,"byte_end":172170,"line_start":297,"line_end":297,"column_start":12,"column_end":35},"name":"le_limited_discoverable","qualname":"<Flags>::le_limited_discoverable","value":"pub fn le_limited_discoverable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Device operating in LE Limited Discoverable mode.","sig":null,"attributes":[{"value":"/ Device operating in LE Limited Discoverable mode.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171844,"byte_end":171897,"line_start":292,"line_end":292,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171902,"byte_end":171905,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Either this or `le_general_discoverable()` must be set for the device to be discoverable.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":171910,"byte_end":172003,"line_start":294,"line_end":294,"column_start":5,"column_end":98}},{"value":"/ Note that \"Broadcast Mode\" still works with undiscoverable devices, since it doesn't need","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172008,"byte_end":172101,"line_start":295,"line_end":295,"column_start":5,"column_end":98}},{"value":"/ discovery or connections.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172106,"byte_end":172135,"line_start":296,"line_end":296,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172555,"byte_end":172578,"line_start":306,"line_end":306,"column_start":12,"column_end":35},"name":"le_general_discoverable","qualname":"<Flags>::le_general_discoverable","value":"pub fn le_general_discoverable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Device operating in LE General Discoverable mode.","sig":null,"attributes":[{"value":"/ Device operating in LE General Discoverable mode.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172252,"byte_end":172305,"line_start":301,"line_end":301,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172310,"byte_end":172313,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Either this or `le_limited_discoverable()` must be set for the device to be discoverable.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172318,"byte_end":172411,"line_start":303,"line_end":303,"column_start":5,"column_end":98}},{"value":"/ Note that \"Broadcast Mode\" still works with undiscoverable devices, since it doesn't need","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172416,"byte_end":172509,"line_start":304,"line_end":304,"column_start":5,"column_end":98}},{"value":"/ discovery or connections.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172514,"byte_end":172543,"line_start":305,"line_end":305,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"advertising","qualname":"::link::advertising","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":3083},{"krate":0,"index":3107},{"krate":0,"index":3110},{"krate":0,"index":3112},{"krate":0,"index":1177},{"krate":0,"index":1200},{"krate":0,"index":3115},{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3129},{"krate":0,"index":1203},{"krate":0,"index":1212},{"krate":0,"index":3131},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3151},{"krate":0,"index":1216},{"krate":0,"index":1220},{"krate":0,"index":1235},{"krate":0,"index":3153},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":3166},{"krate":0,"index":3184},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3190},{"krate":0,"index":3191},{"krate":0,"index":3159},{"krate":0,"index":3161},{"krate":0,"index":3163},{"krate":0,"index":1260}],"decl_id":null,"docs":" Advertising channel operations.","sig":null,"attributes":[{"value":"/ Advertising channel operations.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175152,"byte_end":175187,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175188,"byte_end":175191,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines PDUs, states and fields used by packets transmitted on the advertising","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175192,"byte_end":175286,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"/ channels. Generally, this includes everything needed to advertise as and scan for slave devices","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175287,"byte_end":175386,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ and to establish connections.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175387,"byte_end":175420,"line_start":5,"line_end":5,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175421,"byte_end":175424,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Note that while the types in here do not completely eliminate illegal values to be created, they","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175425,"byte_end":175525,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/ do employ a range of sanity checks that prevent bogus packets from being sent by the stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175526,"byte_end":175621,"line_start":8,"line_end":8,"column_start":1,"column_end":96}}]},{"kind":"Const","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176095,"byte_end":176105,"line_start":21,"line_end":21,"column_start":11,"column_end":21},"name":"CRC_PRESET","qualname":"::link::advertising::CRC_PRESET","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" CRC initialization value for advertising channel packets.","sig":null,"attributes":[{"value":"/ CRC initialization value for advertising channel packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175871,"byte_end":175932,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175933,"byte_end":175936,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Data channel packets use a preset shared when initiating the connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":175937,"byte_end":176013,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176014,"byte_end":176017,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ (as with `CRC_POLY`, only the least significant 24 bits count)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176018,"byte_end":176084,"line_start":20,"line_end":20,"column_start":1,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176252,"byte_end":176268,"line_start":26,"line_end":26,"column_start":11,"column_end":27},"name":"MAX_PAYLOAD_SIZE","qualname":"::link::advertising::MAX_PAYLOAD_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Max. advertising PDU payload size in Bytes.","sig":null,"attributes":[{"value":"/ Max. advertising PDU payload size in Bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176126,"byte_end":176173,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176174,"byte_end":176177,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Note that data channel PDUs can carry much larger payloads.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176178,"byte_end":176241,"line_start":25,"line_end":25,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176356,"byte_end":176370,"line_start":29,"line_end":29,"column_start":11,"column_end":25},"name":"ACCESS_ADDRESS","qualname":"::link::advertising::ACCESS_ADDRESS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Access Address to use for all advertising channel packets.\n","sig":null,"attributes":[{"value":"/ Access Address to use for all advertising channel packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176283,"byte_end":176345,"line_start":28,"line_end":28,"column_start":1,"column_end":63}}]},{"kind":"StructVariant","id":{"krate":0,"index":3085},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176531,"byte_end":176552,"line_start":35,"line_end":35,"column_start":5,"column_end":26},"name":"ConnectableUndirected","qualname":"::link::advertising::Pdu::ConnectableUndirected","value":"Pdu::ConnectableUndirected { advertiser_addr, advertising_data }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" Connectable and scannable advertisement.\n","sig":null,"attributes":[{"value":"/ Connectable and scannable advertisement.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176482,"byte_end":176526,"line_start":34,"line_end":34,"column_start":5,"column_end":49}}]},{"kind":"StructVariant","id":{"krate":0,"index":3088},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176917,"byte_end":176936,"line_start":46,"line_end":46,"column_start":5,"column_end":24},"name":"ConnectableDirected","qualname":"::link::advertising::Pdu::ConnectableDirected","value":"Pdu::ConnectableDirected { advertiser_addr, initiator_addr }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" Directed connectable advertisement sent to an initiator.","sig":null,"attributes":[{"value":"/ Directed connectable advertisement sent to an initiator.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176799,"byte_end":176859,"line_start":43,"line_end":43,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176864,"byte_end":176867,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Does not contain advertisement data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176872,"byte_end":176912,"line_start":45,"line_end":45,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":3091},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177222,"byte_end":177246,"line_start":55,"line_end":55,"column_start":5,"column_end":29},"name":"NonconnectableUndirected","qualname":"::link::advertising::Pdu::NonconnectableUndirected","value":"Pdu::NonconnectableUndirected { advertiser_addr, advertising_data }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" A non-connectable undirected advertisement (aka \"beacon\").\n","sig":null,"attributes":[{"value":"/ A non-connectable undirected advertisement (aka \"beacon\").","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177155,"byte_end":177217,"line_start":54,"line_end":54,"column_start":5,"column_end":67}}]},{"kind":"StructVariant","id":{"krate":0,"index":3094},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177535,"byte_end":177554,"line_start":64,"line_end":64,"column_start":5,"column_end":24},"name":"ScannableUndirected","qualname":"::link::advertising::Pdu::ScannableUndirected","value":"Pdu::ScannableUndirected { advertiser_addr, advertising_data }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" Scannable advertisement.\n","sig":null,"attributes":[{"value":"/ Scannable advertisement.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177502,"byte_end":177530,"line_start":63,"line_end":63,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":3097},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178065,"byte_end":178076,"line_start":77,"line_end":77,"column_start":5,"column_end":16},"name":"ScanRequest","qualname":"::link::advertising::Pdu::ScanRequest","value":"Pdu::ScanRequest { scanner_addr, advertiser_addr }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" Scan request sent from a scanner to an advertising device.","sig":null,"attributes":[{"value":"/ Scan request sent from a scanner to an advertising device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177801,"byte_end":177863,"line_start":72,"line_end":72,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177868,"byte_end":177871,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This can only be sent in response to an advertising PDU that indicates","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177876,"byte_end":177950,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ that the advertising device is scannable (`ConnectableUndirected` and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":177955,"byte_end":178028,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ `ScannableUndirected`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178033,"byte_end":178060,"line_start":76,"line_end":76,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":3100},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178376,"byte_end":178388,"line_start":86,"line_end":86,"column_start":5,"column_end":17},"name":"ScanResponse","qualname":"::link::advertising::Pdu::ScanResponse","value":"Pdu::ScanResponse { advertiser_addr, scan_data }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" Response to a scan request, sent by the scanned advertising device.\n","sig":null,"attributes":[{"value":"/ Response to a scan request, sent by the scanned advertising device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178300,"byte_end":178371,"line_start":85,"line_end":85,"column_start":5,"column_end":76}}]},{"kind":"StructVariant","id":{"krate":0,"index":3103},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178955,"byte_end":178969,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"ConnectRequest","qualname":"::link::advertising::Pdu::ConnectRequest","value":"Pdu::ConnectRequest { initiator_addr, advertiser_addr, lldata }","parent":{"krate":0,"index":3083},"children":[],"decl_id":null,"docs":" A request to establish a connection, sent by an initiating device.","sig":null,"attributes":[{"value":"/ A request to establish a connection, sent by an initiating device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178702,"byte_end":178772,"line_start":96,"line_end":96,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178777,"byte_end":178780,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This may only be sent to an advertising device that has broadcast a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178785,"byte_end":178856,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/ connectable advertisement (`ConnectableUndirected` or","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178861,"byte_end":178918,"line_start":99,"line_end":99,"column_start":5,"column_end":62}},{"value":"/ `ConnectableDirected`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":178923,"byte_end":178950,"line_start":100,"line_end":100,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":3083},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176468,"byte_end":176471,"line_start":33,"line_end":33,"column_start":10,"column_end":13},"name":"Pdu","qualname":"::link::advertising::Pdu","value":"pub enum Pdu<'a> {\n    ConnectableUndirected {\n        advertiser_addr: DeviceAddress,\n        advertising_data: BytesOr,\n    },\n    ConnectableDirected {\n        advertiser_addr: DeviceAddress,\n        initiator_addr: DeviceAddress,\n    },\n    NonconnectableUndirected {\n        advertiser_addr: DeviceAddress,\n        advertising_data: BytesOr,\n    },\n    ScannableUndirected {\n        advertiser_addr: DeviceAddress,\n        advertising_data: BytesOr,\n    },\n    ScanRequest {\n        scanner_addr: DeviceAddress,\n        advertiser_addr: DeviceAddress,\n    },\n    ScanResponse {\n        advertiser_addr: DeviceAddress,\n        scan_data: BytesOr,\n    },\n    ConnectRequest {\n        initiator_addr: DeviceAddress,\n        advertiser_addr: DeviceAddress,\n        lldata: ConnectRequestData,\n    },\n}","parent":null,"children":[{"krate":0,"index":3085},{"krate":0,"index":3088},{"krate":0,"index":3091},{"krate":0,"index":3094},{"krate":0,"index":3097},{"krate":0,"index":3100},{"krate":0,"index":3103}],"decl_id":null,"docs":" A parsed advertising channel PDU.\n","sig":null,"attributes":[{"value":"/ A parsed advertising channel PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":176391,"byte_end":176428,"line_start":31,"line_end":31,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":179353,"byte_end":179376,"line_start":115,"line_end":115,"column_start":12,"column_end":35},"name":"from_header_and_payload","qualname":"<Pdu>::from_header_and_payload","value":"pub fn from_header_and_payload(Header, &mut ByteReader) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a PDU by parsing `payload`.\n","sig":null,"attributes":[{"value":"/ Constructs a PDU by parsing `payload`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":179299,"byte_end":179341,"line_start":114,"line_end":114,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":184433,"byte_end":184439,"line_start":238,"line_end":238,"column_start":12,"column_end":18},"name":"sender","qualname":"<Pdu>::sender","value":"pub fn sender(&Self) -> &DeviceAddress","parent":null,"children":[],"decl_id":null,"docs":" Returns the device address of the sender of this PDU.\n","sig":null,"attributes":[{"value":"/ Returns the device address of the sender of this PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":184364,"byte_end":184421,"line_start":237,"line_end":237,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":185252,"byte_end":185260,"line_start":267,"line_end":267,"column_start":12,"column_end":20},"name":"receiver","qualname":"<Pdu>::receiver","value":"pub fn receiver(&Self) -> Option<&DeviceAddress>","parent":null,"children":[],"decl_id":null,"docs":" Returns the intended receiver of this PDU.","sig":null,"attributes":[{"value":"/ Returns the intended receiver of this PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":185117,"byte_end":185163,"line_start":264,"line_end":264,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":185168,"byte_end":185171,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This may be `None` if the PDU doesn't have a fixed receiver.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":185176,"byte_end":185240,"line_start":266,"line_end":266,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":185847,"byte_end":185849,"line_start":287,"line_end":287,"column_start":12,"column_end":14},"name":"ty","qualname":"<Pdu>::ty","value":"pub fn ty(&Self) -> PduType","parent":null,"children":[],"decl_id":null,"docs":" Returns the PDU type of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the PDU type of `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":185800,"byte_end":185835,"line_start":286,"line_end":286,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":186534,"byte_end":186550,"line_start":304,"line_end":304,"column_start":12,"column_end":28},"name":"advertising_data","qualname":"<Pdu>::advertising_data","value":"pub fn advertising_data(&Self) -> Option</*impl Trait*/>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all AD structures encoded in the PDU.","sig":null,"attributes":[{"value":"/ Returns an iterator over all AD structures encoded in the PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":186362,"byte_end":186428,"line_start":301,"line_end":301,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":186433,"byte_end":186436,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ If this PDU doesn't support attaching AD structures, this will return `None`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":186441,"byte_end":186522,"line_start":303,"line_end":303,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":3115},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":187580,"byte_end":187598,"line_start":333,"line_end":333,"column_start":12,"column_end":30},"name":"ConnectRequestData","qualname":"::link::advertising::ConnectRequestData","value":"ConnectRequestData {  }","parent":null,"children":[{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3121},{"krate":0,"index":3122},{"krate":0,"index":3123},{"krate":0,"index":3124},{"krate":0,"index":3125}],"decl_id":null,"docs":" Connection parameters sent along with a `ConnectRequest` PDU (also known as `LLData`).\n","sig":null,"attributes":[{"value":"/ Connection parameters sent along with a `ConnectRequest` PDU (also known as `LLData`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":187448,"byte_end":187538,"line_start":331,"line_end":331,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188321,"byte_end":188335,"line_start":356,"line_end":356,"column_start":12,"column_end":26},"name":"access_address","qualname":"<ConnectRequestData>::access_address","value":"pub fn access_address(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the Access Address to use for data channel communication.","sig":null,"attributes":[{"value":"/ Returns the Access Address to use for data channel communication.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188059,"byte_end":188128,"line_start":352,"line_end":352,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188133,"byte_end":188136,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ The address is randomly generated by the initiator (the device sending the connection","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188141,"byte_end":188230,"line_start":354,"line_end":354,"column_start":5,"column_end":94}},{"value":"/ request) according to the requirements in the Bluetooth specification.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188235,"byte_end":188309,"line_start":355,"line_end":355,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188523,"byte_end":188531,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"crc_init","qualname":"<ConnectRequestData>::crc_init","value":"pub fn crc_init(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the initialization value for the CRC calculation.","sig":null,"attributes":[{"value":"/ Returns the initialization value for the CRC calculation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188393,"byte_end":188454,"line_start":360,"line_end":360,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188459,"byte_end":188462,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ The CRC *polynomial* is always the same.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188467,"byte_end":188511,"line_start":362,"line_end":362,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188650,"byte_end":188661,"line_start":368,"line_end":368,"column_start":12,"column_end":23},"name":"channel_map","qualname":"<ConnectRequestData>::channel_map","value":"pub fn channel_map(&Self) -> &ChannelMap","parent":null,"children":[],"decl_id":null,"docs":" Returns the channel map specified by the initiator.\n","sig":null,"attributes":[{"value":"/ Returns the channel map specified by the initiator.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188583,"byte_end":188638,"line_start":367,"line_end":367,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188812,"byte_end":188815,"line_start":375,"line_end":375,"column_start":12,"column_end":15},"name":"hop","qualname":"<ConnectRequestData>::hop","value":"pub fn hop(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the channel hop distance.","sig":null,"attributes":[{"value":"/ Returns the channel hop distance.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188715,"byte_end":188752,"line_start":372,"line_end":372,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188757,"byte_end":188760,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ This must be in range `5..=16`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188765,"byte_end":188800,"line_start":374,"line_end":374,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188976,"byte_end":188992,"line_start":381,"line_end":381,"column_start":12,"column_end":28},"name":"end_of_tx_window","qualname":"<ConnectRequestData>::end_of_tx_window","value":"pub fn end_of_tx_window(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the end of the transmit window from reception of the `CONNECT_REQ` containing\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the end of the transmit window from reception of the `CONNECT_REQ` containing","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188859,"byte_end":188948,"line_start":379,"line_end":379,"column_start":5,"column_end":94}},{"value":"/ `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188953,"byte_end":188964,"line_start":380,"line_end":380,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189291,"byte_end":189299,"line_start":389,"line_end":389,"column_start":12,"column_end":20},"name":"interval","qualname":"<ConnectRequestData>::interval","value":"pub fn interval(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the connection event interval in µs.\n","sig":null,"attributes":[{"value":"/ Returns the connection event interval in µs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189230,"byte_end":189279,"line_start":388,"line_end":388,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189433,"byte_end":189446,"line_start":394,"line_end":394,"column_start":12,"column_end":25},"name":"slave_latency","qualname":"<ConnectRequestData>::slave_latency","value":"pub fn slave_latency(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the slave latency (as the number of connection events).\n","sig":null,"attributes":[{"value":"/ Returns the slave latency (as the number of connection events).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189354,"byte_end":189421,"line_start":393,"line_end":393,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189723,"byte_end":189742,"line_start":402,"line_end":402,"column_start":12,"column_end":31},"name":"supervision_timeout","qualname":"<ConnectRequestData>::supervision_timeout","value":"pub fn supervision_timeout(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the connection supervision timeout (`connSupervisionTimeout`) to use for this\n connection.","sig":null,"attributes":[{"value":"/ Returns the connection supervision timeout (`connSupervisionTimeout`) to use for this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189495,"byte_end":189584,"line_start":398,"line_end":398,"column_start":5,"column_end":94}},{"value":"/ connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189589,"byte_end":189604,"line_start":399,"line_end":399,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189609,"byte_end":189612,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ If no data packet is received for this duration, the connection should be considered lost.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189617,"byte_end":189711,"line_start":401,"line_end":401,"column_start":5,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3132},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191767,"byte_end":191778,"line_start":457,"line_end":457,"column_start":5,"column_end":16},"name":"Ppm251To500","qualname":"::link::advertising::SleepClockAccuracy::Ppm251To500","value":"SleepClockAccuracy::Ppm251To500","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3134},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191784,"byte_end":191795,"line_start":458,"line_end":458,"column_start":5,"column_end":16},"name":"Ppm151To250","qualname":"::link::advertising::SleepClockAccuracy::Ppm151To250","value":"SleepClockAccuracy::Ppm151To250","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3136},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191801,"byte_end":191812,"line_start":459,"line_end":459,"column_start":5,"column_end":16},"name":"Ppm101To150","qualname":"::link::advertising::SleepClockAccuracy::Ppm101To150","value":"SleepClockAccuracy::Ppm101To150","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3138},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191818,"byte_end":191828,"line_start":460,"line_end":460,"column_start":5,"column_end":15},"name":"Ppm76To100","qualname":"::link::advertising::SleepClockAccuracy::Ppm76To100","value":"SleepClockAccuracy::Ppm76To100","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3140},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191834,"byte_end":191843,"line_start":461,"line_end":461,"column_start":5,"column_end":14},"name":"Ppm51To75","qualname":"::link::advertising::SleepClockAccuracy::Ppm51To75","value":"SleepClockAccuracy::Ppm51To75","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3142},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191849,"byte_end":191858,"line_start":462,"line_end":462,"column_start":5,"column_end":14},"name":"Ppm31To50","qualname":"::link::advertising::SleepClockAccuracy::Ppm31To50","value":"SleepClockAccuracy::Ppm31To50","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3144},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191864,"byte_end":191873,"line_start":463,"line_end":463,"column_start":5,"column_end":14},"name":"Ppm21To30","qualname":"::link::advertising::SleepClockAccuracy::Ppm21To30","value":"SleepClockAccuracy::Ppm21To30","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3146},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191879,"byte_end":191887,"line_start":464,"line_end":464,"column_start":5,"column_end":13},"name":"Ppm0To20","qualname":"::link::advertising::SleepClockAccuracy::Ppm0To20","value":"SleepClockAccuracy::Ppm0To20","parent":{"krate":0,"index":3131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3131},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191742,"byte_end":191760,"line_start":456,"line_end":456,"column_start":10,"column_end":28},"name":"SleepClockAccuracy","qualname":"::link::advertising::SleepClockAccuracy","value":"pub enum SleepClockAccuracy {\n    Ppm251To500,\n    Ppm151To250,\n    Ppm101To150,\n    Ppm76To100,\n    Ppm51To75,\n    Ppm31To50,\n    Ppm21To30,\n    Ppm0To20,\n}","parent":null,"children":[{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3138},{"krate":0,"index":3140},{"krate":0,"index":3142},{"krate":0,"index":3144},{"krate":0,"index":3146}],"decl_id":null,"docs":" Indicates the master's sleep clock accuracy (SCA) in ppm (parts per\n million).","sig":null,"attributes":[{"value":"/ Indicates the master's sleep clock accuracy (SCA) in ppm (parts per","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191565,"byte_end":191636,"line_start":451,"line_end":451,"column_start":1,"column_end":72}},{"value":"/ million).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191637,"byte_end":191650,"line_start":452,"line_end":452,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191651,"byte_end":191654,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ The lower the PPM, the higher the accuracy.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191655,"byte_end":191702,"line_start":454,"line_end":454,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1216},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":192045,"byte_end":192051,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"PduBuf","qualname":"::link::advertising::PduBuf","value":"PduBuf {  }","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218}],"decl_id":null,"docs":" Stores an advertising channel PDU.","sig":null,"attributes":[{"value":"/ Stores an advertising channel PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191892,"byte_end":191930,"line_start":467,"line_end":467,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191931,"byte_end":191934,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ This is an owned version of `Pdu` and should be used when *creating* a PDU","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":191935,"byte_end":192013,"line_start":469,"line_end":469,"column_start":1,"column_end":79}},{"value":"/ to be sent out.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":192014,"byte_end":192033,"line_start":470,"line_end":470,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193316,"byte_end":193338,"line_start":512,"line_end":512,"column_start":12,"column_end":34},"name":"connectable_undirected","qualname":"<PduBuf>::connectable_undirected","value":"pub fn connectable_undirected(DeviceAddress, &[AdStructure])\n-> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a connectable undirected advertising PDU (`ADV_IND`).","sig":null,"attributes":[{"value":"/ Creates a connectable undirected advertising PDU (`ADV_IND`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193048,"byte_end":193113,"line_start":505,"line_end":505,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193118,"byte_end":193121,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193126,"byte_end":193142,"line_start":507,"line_end":507,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193147,"byte_end":193150,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ * `adv`: The advertiser address, the address of the device sending this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193155,"byte_end":193230,"line_start":509,"line_end":509,"column_start":5,"column_end":80}},{"value":"/   PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193235,"byte_end":193245,"line_start":510,"line_end":510,"column_start":5,"column_end":15}},{"value":"/ * `adv_data`: Additional advertising data to send.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193250,"byte_end":193304,"line_start":511,"line_end":511,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193677,"byte_end":193697,"line_start":524,"line_end":524,"column_start":12,"column_end":32},"name":"connectable_directed","qualname":"<PduBuf>::connectable_directed","value":"pub fn connectable_directed(DeviceAddress, DeviceAddress) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a connectable directed advertising PDU (`ADV_DIRECT_IND`).\n","sig":null,"attributes":[{"value":"/ Creates a connectable directed advertising PDU (`ADV_DIRECT_IND`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":193595,"byte_end":193665,"line_start":523,"line_end":523,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194493,"byte_end":194518,"line_start":548,"line_end":548,"column_start":12,"column_end":37},"name":"nonconnectable_undirected","qualname":"<PduBuf>::nonconnectable_undirected","value":"pub fn nonconnectable_undirected(DeviceAddress, &[AdStructure])\n-> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a non-connectable undirected advertising PDU\n (`ADV_NONCONN_IND`).","sig":null,"attributes":[{"value":"/ Creates a non-connectable undirected advertising PDU","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194259,"byte_end":194315,"line_start":543,"line_end":543,"column_start":5,"column_end":61}},{"value":"/ (`ADV_NONCONN_IND`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194320,"byte_end":194344,"line_start":544,"line_end":544,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194349,"byte_end":194352,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `PduBuf::beacon`, which should be preferred when","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194357,"byte_end":194431,"line_start":546,"line_end":546,"column_start":5,"column_end":79}},{"value":"/ building a beacon PDU to improve clarity.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194436,"byte_end":194481,"line_start":547,"line_end":547,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194929,"byte_end":194949,"line_start":562,"line_end":562,"column_start":12,"column_end":32},"name":"scannable_undirected","qualname":"<PduBuf>::scannable_undirected","value":"pub fn scannable_undirected(DeviceAddress, &[AdStructure])\n-> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a scannable undirected advertising PDU (`ADV_SCAN_IND`).","sig":null,"attributes":[{"value":"/ Creates a scannable undirected advertising PDU (`ADV_SCAN_IND`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194782,"byte_end":194850,"line_start":559,"line_end":559,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194855,"byte_end":194858,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ Note that scanning is not supported at the moment.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":194863,"byte_end":194917,"line_start":561,"line_end":561,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195382,"byte_end":195388,"line_start":577,"line_end":577,"column_start":12,"column_end":18},"name":"beacon","qualname":"<PduBuf>::beacon","value":"pub fn beacon(DeviceAddress, &[AdStructure]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates an advertising channel PDU suitable for building a simple\n beacon.","sig":null,"attributes":[{"value":"/ Creates an advertising channel PDU suitable for building a simple","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195210,"byte_end":195279,"line_start":573,"line_end":573,"column_start":5,"column_end":74}},{"value":"/ beacon.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195284,"byte_end":195295,"line_start":574,"line_end":574,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195300,"byte_end":195303,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `PduBuf::nonconnectable_undirected`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195308,"byte_end":195370,"line_start":576,"line_end":576,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196135,"byte_end":196147,"line_start":595,"line_end":595,"column_start":12,"column_end":24},"name":"discoverable","qualname":"<PduBuf>::discoverable","value":"pub fn discoverable(DeviceAddress, &[AdStructure]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates an advertising PDU that makes this device \"visible\" for scanning\n devices that want to establish a connection.","sig":null,"attributes":[{"value":"/ Creates an advertising PDU that makes this device \"visible\" for scanning","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195591,"byte_end":195667,"line_start":584,"line_end":584,"column_start":5,"column_end":81}},{"value":"/ devices that want to establish a connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195672,"byte_end":195720,"line_start":585,"line_end":585,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195725,"byte_end":195728,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This should be used when this device would like to initiate pairing.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195733,"byte_end":195805,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195810,"byte_end":195813,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ This function is mostly equivalent to `PduBuf::connectable_undirected`,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195818,"byte_end":195893,"line_start":589,"line_end":589,"column_start":5,"column_end":80}},{"value":"/ but will automatically add a suitable `Flags` AD structure to the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195898,"byte_end":195967,"line_start":590,"line_end":590,"column_start":5,"column_end":74}},{"value":"/ advertising data.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195972,"byte_end":195993,"line_start":591,"line_end":591,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":195998,"byte_end":196001,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ To establish a connection with an already paired device, a \"directed\"","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196006,"byte_end":196079,"line_start":593,"line_end":593,"column_start":5,"column_end":78}},{"value":"/ advertisement must be sent instead.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196084,"byte_end":196123,"line_start":594,"line_end":594,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196899,"byte_end":196911,"line_start":617,"line_end":617,"column_start":12,"column_end":24},"name":"scan_request","qualname":"<PduBuf>::scan_request","value":"pub fn scan_request(DeviceAddress, DeviceAddress) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a scan request PDU.","sig":null,"attributes":[{"value":"/ Creates a scan request PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196545,"byte_end":196576,"line_start":607,"line_end":607,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196581,"byte_end":196584,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Note that scanning is not yet implemented.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196589,"byte_end":196635,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196640,"byte_end":196643,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196648,"byte_end":196664,"line_start":611,"line_end":611,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196669,"byte_end":196672,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ * `scanner`: Device address of the device in scanning state (sender of","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196677,"byte_end":196751,"line_start":613,"line_end":613,"column_start":5,"column_end":79}},{"value":"/   the request).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196756,"byte_end":196775,"line_start":614,"line_end":614,"column_start":5,"column_end":24}},{"value":"/ * `adv`: Device address of the advertising device that this scan request","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196780,"byte_end":196856,"line_start":615,"line_end":615,"column_start":5,"column_end":81}},{"value":"/   is directed towards.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":196861,"byte_end":196887,"line_start":616,"line_end":616,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":197122,"byte_end":197135,"line_start":624,"line_end":624,"column_start":12,"column_end":25},"name":"scan_response","qualname":"<PduBuf>::scan_response","value":"pub fn scan_response(DeviceAddress, &[AdStructure]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a scan response PDU.","sig":null,"attributes":[{"value":"/ Creates a scan response PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":197019,"byte_end":197051,"line_start":621,"line_end":621,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":197056,"byte_end":197059,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Note that scanning is not yet implemented.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":197064,"byte_end":197110,"line_start":623,"line_end":623,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":197859,"byte_end":197865,"line_start":647,"line_end":647,"column_start":12,"column_end":18},"name":"header","qualname":"<PduBuf>::header","value":"pub fn header(&Self) -> Header","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":197923,"byte_end":197930,"line_start":651,"line_end":651,"column_start":12,"column_end":19},"name":"payload","qualname":"<PduBuf>::payload","value":"pub fn payload(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3153},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199026,"byte_end":199032,"line_start":681,"line_end":681,"column_start":12,"column_end":18},"name":"Header","qualname":"::link::advertising::Header","value":"","parent":null,"children":[],"decl_id":null,"docs":" 16-bit Advertising Channel PDU header preceding the Payload.","sig":null,"attributes":[{"value":"/ 16-bit Advertising Channel PDU header preceding the Payload.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198224,"byte_end":198288,"line_start":663,"line_end":663,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198289,"byte_end":198292,"line_start":664,"line_end":664,"column_start":1,"column_end":4}},{"value":"/ The header looks like this:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198293,"byte_end":198324,"line_start":665,"line_end":665,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198325,"byte_end":198328,"line_start":666,"line_end":666,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198329,"byte_end":198343,"line_start":667,"line_end":667,"column_start":1,"column_end":15}},{"value":"/ LSB                                                                     MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198344,"byte_end":198423,"line_start":668,"line_end":668,"column_start":1,"column_end":80}},{"value":"/ +------------+------------+---------+---------+--------------+------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198424,"byte_end":198503,"line_start":669,"line_end":669,"column_start":1,"column_end":80}},{"value":"/ |  PDU Type  |     -      |  TxAdd  |  RxAdd  |    Length    |     -      |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198504,"byte_end":198583,"line_start":670,"line_end":670,"column_start":1,"column_end":80}},{"value":"/ |  (4 bits)  |  (2 bits)  | (1 bit) | (1 bit) |   (6 bits)   |  (2 bits)  |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198584,"byte_end":198663,"line_start":671,"line_end":671,"column_start":1,"column_end":80}},{"value":"/ +------------+------------+---------+---------+--------------+------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198664,"byte_end":198743,"line_start":672,"line_end":672,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198744,"byte_end":198751,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198752,"byte_end":198755,"line_start":674,"line_end":674,"column_start":1,"column_end":4}},{"value":"/ The `TxAdd` and `RxAdd` field are only used for some payloads, for all others, they should be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198756,"byte_end":198853,"line_start":675,"line_end":675,"column_start":1,"column_end":98}},{"value":"/ set to 0.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198854,"byte_end":198867,"line_start":676,"line_end":676,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198868,"byte_end":198871,"line_start":677,"line_end":677,"column_start":1,"column_end":4}},{"value":"/ Length may be in range 6 to 37 (inclusive). With the 2-Byte header this is exactly the max.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198872,"byte_end":198967,"line_start":678,"line_end":678,"column_start":1,"column_end":96}},{"value":"/ on-air packet size.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198968,"byte_end":198991,"line_start":679,"line_end":679,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199243,"byte_end":199246,"line_start":688,"line_end":688,"column_start":12,"column_end":15},"name":"new","qualname":"<Header>::new","value":"pub fn new(PduType) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Advertising Channel PDU header specifying the Payload type `ty`.\n","sig":null,"attributes":[{"value":"/ Creates a new Advertising Channel PDU header specifying the Payload type `ty`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199149,"byte_end":199231,"line_start":687,"line_end":687,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199328,"byte_end":199333,"line_start":692,"line_end":692,"column_start":12,"column_end":17},"name":"parse","qualname":"<Header>::parse","value":"pub fn parse(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199656,"byte_end":199662,"line_start":700,"line_end":700,"column_start":12,"column_end":18},"name":"to_u16","qualname":"<Header>::to_u16","value":"pub fn to_u16(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw representation of the header.","sig":null,"attributes":[{"value":"/ Returns the raw representation of the header.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199496,"byte_end":199545,"line_start":697,"line_end":697,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199550,"byte_end":199553,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The returned `u16` must be transmitted LSb first as the first 2 octets of the PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199558,"byte_end":199644,"line_start":699,"line_end":699,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200047,"byte_end":200052,"line_start":715,"line_end":715,"column_start":12,"column_end":17},"name":"type_","qualname":"<Header>::type_","value":"pub fn type_(&Self) -> PduType","parent":null,"children":[],"decl_id":null,"docs":" Returns the PDU type specified in the header.\n","sig":null,"attributes":[{"value":"/ Returns the PDU type specified in the header.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199986,"byte_end":200035,"line_start":714,"line_end":714,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200199,"byte_end":200205,"line_start":720,"line_end":720,"column_start":12,"column_end":18},"name":"tx_add","qualname":"<Header>::tx_add","value":"pub fn tx_add(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the state of the `TxAdd` field.\n","sig":null,"attributes":[{"value":"/ Returns the state of the `TxAdd` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200144,"byte_end":200187,"line_start":719,"line_end":719,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200314,"byte_end":200324,"line_start":725,"line_end":725,"column_start":12,"column_end":22},"name":"set_tx_add","qualname":"<Header>::set_tx_add","value":"pub fn set_tx_add(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the `TxAdd` field's value.\n","sig":null,"attributes":[{"value":"/ Sets the `TxAdd` field's value.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200267,"byte_end":200302,"line_start":724,"line_end":724,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200557,"byte_end":200563,"line_start":734,"line_end":734,"column_start":12,"column_end":18},"name":"rx_add","qualname":"<Header>::rx_add","value":"pub fn rx_add(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the state of the `RxAdd` field.\n","sig":null,"attributes":[{"value":"/ Returns the state of the `RxAdd` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200502,"byte_end":200545,"line_start":733,"line_end":733,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200672,"byte_end":200682,"line_start":739,"line_end":739,"column_start":12,"column_end":22},"name":"set_rx_add","qualname":"<Header>::set_rx_add","value":"pub fn set_rx_add(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the `RxAdd` field's value.\n","sig":null,"attributes":[{"value":"/ Sets the `RxAdd` field's value.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200625,"byte_end":200660,"line_start":738,"line_end":738,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201079,"byte_end":201093,"line_start":751,"line_end":751,"column_start":12,"column_end":26},"name":"payload_length","qualname":"<Header>::payload_length","value":"pub fn payload_length(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the payload in octets as specified in the `Length` field.","sig":null,"attributes":[{"value":"/ Returns the length of the payload in octets as specified in the `Length` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200860,"byte_end":200943,"line_start":747,"line_end":747,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200948,"byte_end":200951,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ According to the spec, the length must be in range 6...37, but this isn't checked by this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":200956,"byte_end":201049,"line_start":749,"line_end":749,"column_start":5,"column_end":98}},{"value":"/ function.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201054,"byte_end":201067,"line_start":750,"line_end":750,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201310,"byte_end":201328,"line_start":758,"line_end":758,"column_start":12,"column_end":30},"name":"set_payload_length","qualname":"<Header>::set_payload_length","value":"pub fn set_payload_length(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets the payload length of this PDU.","sig":null,"attributes":[{"value":"/ Sets the payload length of this PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201172,"byte_end":201212,"line_start":755,"line_end":755,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201217,"byte_end":201220,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The `length` must be in range 6...37, otherwise this function panics.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201225,"byte_end":201298,"line_start":757,"line_end":757,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3167},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202426,"byte_end":202432,"line_start":797,"line_end":797,"column_start":9,"column_end":15},"name":"AdvInd","qualname":"::link::advertising::PduType::AdvInd","value":"PduType::AdvInd","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Connectable undirected advertising event (`ADV_IND`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202522,"byte_end":202534,"line_start":799,"line_end":799,"column_start":9,"column_end":21},"name":"AdvDirectInd","qualname":"::link::advertising::PduType::AdvDirectInd","value":"PduType::AdvDirectInd","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Connectable directed advertising event (`ADV_DIRECT_IND`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3171},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202631,"byte_end":202644,"line_start":801,"line_end":801,"column_start":9,"column_end":22},"name":"AdvNonconnInd","qualname":"::link::advertising::PduType::AdvNonconnInd","value":"PduType::AdvNonconnInd","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Non-connectable undirected advertising event (`ADV_NONCONN_IND`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3173},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202732,"byte_end":202742,"line_start":803,"line_end":803,"column_start":9,"column_end":19},"name":"AdvScanInd","qualname":"::link::advertising::PduType::AdvScanInd","value":"PduType::AdvScanInd","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Scannable undirected advertising event (`ADV_SCAN_IND`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3175},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202912,"byte_end":202919,"line_start":809,"line_end":809,"column_start":9,"column_end":16},"name":"ScanReq","qualname":"::link::advertising::PduType::ScanReq","value":"PduType::ScanReq","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Scan request (`SCAN_REQ`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3177},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203088,"byte_end":203095,"line_start":814,"line_end":814,"column_start":9,"column_end":16},"name":"ScanRsp","qualname":"::link::advertising::PduType::ScanRsp","value":"PduType::ScanRsp","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Scan response (`SCAN_RSP`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3179},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203272,"byte_end":203282,"line_start":819,"line_end":819,"column_start":9,"column_end":19},"name":"ConnectReq","qualname":"::link::advertising::PduType::ConnectReq","value":"PduType::ConnectReq","parent":{"krate":0,"index":3166},"children":[],"decl_id":null,"docs":" Connect request (`CONNECT_REQ`).","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3166},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202338,"byte_end":202345,"line_start":795,"line_end":795,"column_start":14,"column_end":21},"name":"PduType","qualname":"::link::advertising::PduType","value":"pub enum PduType {\n    AdvInd,\n    AdvDirectInd,\n    AdvNonconnInd,\n    AdvScanInd,\n    ScanReq,\n    ScanRsp,\n    ConnectReq,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3169},{"krate":0,"index":3171},{"krate":0,"index":3173},{"krate":0,"index":3175},{"krate":0,"index":3177},{"krate":0,"index":3179},{"krate":0,"index":3181}],"decl_id":null,"docs":" 4-bit PDU type in [`Header`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203393,"byte_end":203402,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_beacon","qualname":"<PduType>::is_beacon","value":"pub fn is_beacon(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this PDU type is a beacon advertisement.\n","sig":null,"attributes":[{"value":"/ Returns whether this PDU type is a beacon advertisement.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203321,"byte_end":203381,"line_start":824,"line_end":824,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203557,"byte_end":203572,"line_start":830,"line_end":830,"column_start":12,"column_end":27},"name":"allows_adv_data","qualname":"<PduType>::allows_adv_data","value":"pub fn allows_adv_data(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether AD structures can follow the fixed data in a PDU of this type.\n","sig":null,"attributes":[{"value":"/ Whether AD structures can follow the fixed data in a PDU of this type.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203471,"byte_end":203545,"line_start":829,"line_end":829,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":3193},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204131,"byte_end":204141,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"ChannelMap","qualname":"::link::channel_map::ChannelMap","value":"ChannelMap {  }","parent":null,"children":[{"krate":0,"index":3194},{"krate":0,"index":3196}],"decl_id":null,"docs":" A map marking data channels as used or unused.","sig":null,"attributes":[{"value":"/ A map marking data channels as used or unused.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":203970,"byte_end":204020,"line_start":4,"line_end":4,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204021,"byte_end":204024,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A channel map must mark at least 2 channels as used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204025,"byte_end":204081,"line_start":6,"line_end":6,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204703,"byte_end":204711,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ChannelMap>::from_raw","value":"pub fn from_raw([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new channel map from the raw format used in Connection Request PDUs (`ChM`).","sig":null,"attributes":[{"value":"/ Create a new channel map from the raw format used in Connection Request PDUs (`ChM`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204214,"byte_end":204303,"line_start":14,"line_end":14,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204308,"byte_end":204311,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ The first byte (LSB) contains flags for data channels 0 to 7, where the least significant","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204316,"byte_end":204409,"line_start":16,"line_end":16,"column_start":5,"column_end":98}},{"value":"/ bit is the flag for channel 0, and so on.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204414,"byte_end":204459,"line_start":17,"line_end":17,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204464,"byte_end":204467,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ Since there are only 37 data channels, but 40 bits in the 5 Bytes, the 3 most significant","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204472,"byte_end":204565,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ bits in the last Byte of `raw` are considered reserved for future use (RFU) and are ignored","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204570,"byte_end":204665,"line_start":20,"line_end":20,"column_start":5,"column_end":100}},{"value":"/ by this function.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204670,"byte_end":204691,"line_start":21,"line_end":21,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204981,"byte_end":204987,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"to_raw","qualname":"<ChannelMap>::to_raw","value":"pub fn to_raw(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw bytes encoding this channel map.\n","sig":null,"attributes":[{"value":"/ Returns the raw bytes encoding this channel map.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204917,"byte_end":204969,"line_start":30,"line_end":30,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205115,"byte_end":205132,"line_start":36,"line_end":36,"column_start":12,"column_end":29},"name":"with_all_channels","qualname":"<ChannelMap>::with_all_channels","value":"pub fn with_all_channels() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new channel map that marks all data channels as used.\n","sig":null,"attributes":[{"value":"/ Creates a new channel map that marks all data channels as used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205036,"byte_end":205103,"line_start":35,"line_end":35,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205347,"byte_end":205364,"line_start":44,"line_end":44,"column_start":12,"column_end":29},"name":"num_used_channels","qualname":"<ChannelMap>::num_used_channels","value":"pub fn num_used_channels(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of data channels marked as used by this map.\n","sig":null,"attributes":[{"value":"/ Returns the number of data channels marked as used by this map.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205268,"byte_end":205335,"line_start":43,"line_end":43,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205495,"byte_end":205502,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"is_used","qualname":"<ChannelMap>::is_used","value":"pub fn is_used(&Self, DataChannel) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given data channel is marked as used.\n","sig":null,"attributes":[{"value":"/ Returns whether the given data channel is marked as used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205422,"byte_end":205483,"line_start":48,"line_end":48,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205798,"byte_end":205807,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"iter_used","qualname":"<ChannelMap>::iter_used","value":"pub fn iter_used<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all data channels marked as used in this map.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all data channels marked as used in this map.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":205712,"byte_end":205786,"line_start":57,"line_end":57,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206438,"byte_end":206446,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"by_index","qualname":"<ChannelMap>::by_index","value":"pub fn by_index(&Self, u8) -> DataChannel","parent":null,"children":[],"decl_id":null,"docs":" Returns the `n`th channel marked as used.","sig":null,"attributes":[{"value":"/ Returns the `n`th channel marked as used.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206286,"byte_end":206331,"line_start":73,"line_end":73,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206336,"byte_end":206339,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206344,"byte_end":206356,"line_start":75,"line_end":75,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206361,"byte_end":206364,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ This will panic when `n >= self.num_used_channels()`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206369,"byte_end":206426,"line_start":77,"line_end":77,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3209},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208519,"byte_end":208528,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"CompanyId","qualname":"::link::comp_id::CompanyId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Company identifier for use in link layer Control PDUs.\n","sig":null,"attributes":[{"value":"/ Company identifier for use in link layer Control PDUs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208426,"byte_end":208484,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209079,"byte_end":209087,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<CompanyId>::from_raw","value":"pub fn from_raw(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a company ID from a raw `u16`.\n","sig":null,"attributes":[{"value":"/ Create a company ID from a raw `u16`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209026,"byte_end":209067,"line_start":34,"line_end":34,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209208,"byte_end":209214,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"as_u16","qualname":"<CompanyId>::as_u16","value":"pub fn as_u16(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the raw `u16` representing this company identifier.\n","sig":null,"attributes":[{"value":"/ Get the raw `u16` representing this company identifier.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209137,"byte_end":209196,"line_start":39,"line_end":39,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209418,"byte_end":209422,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"name","qualname":"<CompanyId>::name","value":"pub fn name(&Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Get the full company name from this identifer.","sig":null,"attributes":[{"value":"/ Get the full company name from this identifer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209257,"byte_end":209307,"line_start":44,"line_end":44,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209312,"byte_end":209315,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Using this method anywhere will add roughly 70KB to your binary size!","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209320,"byte_end":209406,"line_start":46,"line_end":46,"column_start":5,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":308234,"byte_end":308244,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"Connection","qualname":"::link::connection::Connection","value":"Connection {  }","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429}],"decl_id":null,"docs":" Connection state and parameters.\n","sig":null,"attributes":[{"value":"/ Connection state and parameters.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":308186,"byte_end":308222,"line_start":15,"line_end":15,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":328288,"byte_end":328307,"line_start":525,"line_end":525,"column_start":12,"column_end":31},"name":"connection_interval","qualname":"<Connection<C>>::connection_interval","value":"pub fn connection_interval(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured interval between connection events.","sig":null,"attributes":[{"value":"/ Returns the configured interval between connection events.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":327770,"byte_end":327832,"line_start":516,"line_end":516,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":327837,"byte_end":327840,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ The connection event interval is arbitrated by the device in the Central role and heavily","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":327845,"byte_end":327938,"line_start":518,"line_end":518,"column_start":5,"column_end":98}},{"value":"/ influences the data transmission latency of the connection, which is important for some","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":327943,"byte_end":328034,"line_start":519,"line_end":519,"column_start":5,"column_end":96}},{"value":"/ applications.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":328039,"byte_end":328056,"line_start":520,"line_end":520,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":328061,"byte_end":328064,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ The Peripheral can request the Central to change the interval by sending an L2CAP signaling","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":328069,"byte_end":328164,"line_start":522,"line_end":522,"column_start":5,"column_end":100}},{"value":"/ message, or by using the Link Layer control procedure for requesting new connection","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":328169,"byte_end":328256,"line_start":523,"line_end":523,"column_start":5,"column_end":92}},{"value":"/ parameters.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":328261,"byte_end":328276,"line_start":524,"line_end":524,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":1449},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"data","qualname":"::link::data","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1454},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":3238},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":1469},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":3244},{"krate":0,"index":3257},{"krate":0,"index":3258},{"krate":0,"index":3260},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3268},{"krate":0,"index":3277},{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1497},{"krate":0,"index":1501},{"krate":0,"index":1504}],"decl_id":null,"docs":" Data Channel structures.\n","sig":null,"attributes":[{"value":"/ Data Channel structures.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329463,"byte_end":329491,"line_start":1,"line_end":1,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":3238},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332747,"byte_end":332753,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"Header","qualname":"::link::data::Header","value":"","parent":null,"children":[],"decl_id":null,"docs":" 16-bit data channel header preceding the payload.","sig":null,"attributes":[{"value":"/ 16-bit data channel header preceding the payload.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329604,"byte_end":329657,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329658,"byte_end":329661,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Layout (in Bluetooth 4.2):","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329662,"byte_end":329692,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329693,"byte_end":329696,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```notrust","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329697,"byte_end":329711,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/ LSB                                                                MSB","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329712,"byte_end":329786,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ +----------+---------+---------+---------+------------+--------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329787,"byte_end":329861,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ |   LLID   |  NESN   |   SN    |   MD    |     -      |    Length    |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329862,"byte_end":329936,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ | (2 bits) | (1 bit) | (1 bit) | (1 bit) |  (3 bits)  |   (8 bits)   |","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":329937,"byte_end":330011,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ +----------+---------+---------+---------+------------+--------------+","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330012,"byte_end":330086,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330087,"byte_end":330094,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330095,"byte_end":330098,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Payload format depends on the value of the 2-bit `LLID` field:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330099,"byte_end":330165,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330166,"byte_end":330169,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * `0b00`: Reserved value.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330170,"byte_end":330199,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"/ * `0b01`: LL Data PDU Continuation fragment or empty PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330200,"byte_end":330261,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/ * `0b10`: LL Data PDU Start of L2CAP message (or complete message if no fragmentation","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330262,"byte_end":330351,"line_start":23,"line_end":23,"column_start":1,"column_end":90}},{"value":"/   necessary).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330352,"byte_end":330369,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/ * `0b11`: LL Control PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330370,"byte_end":330399,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330400,"byte_end":330403,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The `NESN` field specifies the **N**ext **E**xpected **S**equence **N**umber. The `SN` field","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330404,"byte_end":330500,"line_start":27,"line_end":27,"column_start":1,"column_end":97}},{"value":"/ specifies the **S**equence **N**umber of this PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330501,"byte_end":330555,"line_start":28,"line_end":28,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330556,"byte_end":330559,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The `MD` field specifies that the device sending the packet has more data to send during this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330560,"byte_end":330657,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ *connection event*. When both slave and master send a packet with the `MD` bit set to 0, the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330658,"byte_end":330754,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ connection event ends.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330755,"byte_end":330781,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330782,"byte_end":330785,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The `Length` field specifies the length of payload **and `MIC`**. Prior to Bluetooth 4.2, this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330786,"byte_end":330884,"line_start":34,"line_end":34,"column_start":1,"column_end":99}},{"value":"/ was a 5-bit field, resulting in payloads + MICs of up to 31 Bytes. With Bluetooth 4.2, devices","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330885,"byte_end":330983,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ can communicate their buffer sizes and optionally transmit larger packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":330984,"byte_end":331062,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331063,"byte_end":331066,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## Sequence Numbers","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331067,"byte_end":331090,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331091,"byte_end":331094,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `NESN` and `SN` fields are used for retransmission and acknowledgement. The link layer","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331095,"byte_end":331189,"line_start":40,"line_end":40,"column_start":1,"column_end":95}},{"value":"/ stores two 1-bit parameters for an established connection, called `transmitSeqNum` and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331190,"byte_end":331280,"line_start":41,"line_end":41,"column_start":1,"column_end":91}},{"value":"/ `nextExpectedSeqNum`. When a connection is established, both start out as 0. Both parameters are","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331281,"byte_end":331381,"line_start":42,"line_end":42,"column_start":1,"column_end":101}},{"value":"/ repeatedly incremented by 1 when data is transmitted, using wrapping arithmetic.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331382,"byte_end":331466,"line_start":43,"line_end":43,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331467,"byte_end":331470,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ When a data channel packet is sent for the first time (ie. not retransmitted), the `SN` field is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331471,"byte_end":331571,"line_start":45,"line_end":45,"column_start":1,"column_end":101}},{"value":"/ set to `transmitSeqNum`. When the packet is resent, the `SN` field is not modified. In both","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331572,"byte_end":331667,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ cases, the `NESN` bit is set to `nextExpectedSeqNum`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331668,"byte_end":331725,"line_start":47,"line_end":47,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331726,"byte_end":331729,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The `NESN` bit tells the receiver whether its last packet has arrived: When a packet is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331730,"byte_end":331821,"line_start":49,"line_end":49,"column_start":1,"column_end":92}},{"value":"/ received with an `NESN` value equal to the receiver's `transmitSeqNum`, the receiver has already","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331822,"byte_end":331922,"line_start":50,"line_end":50,"column_start":1,"column_end":101}},{"value":"/ sent a packet with the expected `SN`, but the other side hasn't received it yet. The receiver","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":331923,"byte_end":332020,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ must resend the last data channel PDU. No other data channel PDU must be sent by it.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332021,"byte_end":332109,"line_start":52,"line_end":52,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332110,"byte_end":332113,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ When the received packet's `NESN` bit is different from `transmitSeqNum`, the last PDU has been","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332114,"byte_end":332213,"line_start":54,"line_end":54,"column_start":1,"column_end":100}},{"value":"/ acknowledged and the receiver should increment `transmitSeqNum` by 1.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332214,"byte_end":332287,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332288,"byte_end":332291,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Similarly, the `SN` bit is used to distinguish retransmitted and new packets: When a packet is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332292,"byte_end":332390,"line_start":57,"line_end":57,"column_start":1,"column_end":99}},{"value":"/ received with an `SN` value equal to the receiver's `nextExpectedSeqNum` value, the packet is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332391,"byte_end":332488,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ new (not a retransmission), and `nextExpectedSeqNum` should be incremented by 1. If the value is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332489,"byte_end":332589,"line_start":59,"line_end":59,"column_start":1,"column_end":101}},{"value":"/ not equal to `nextExpectedSeqNum`, this packet is a retransmission, so `nextExpectedSeqNum`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332590,"byte_end":332685,"line_start":60,"line_end":60,"column_start":1,"column_end":96}},{"value":"/ should not be changed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332686,"byte_end":332712,"line_start":61,"line_end":61,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332907,"byte_end":332910,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<Header>::new","value":"pub fn new(Llid) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a header with the given LLID field and all other fields set to 0 (including the\n payload length).\n","sig":null,"attributes":[{"value":"/ Creates a header with the given LLID field and all other fields set to 0 (including the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332779,"byte_end":332870,"line_start":66,"line_end":66,"column_start":5,"column_end":96}},{"value":"/ payload length).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332875,"byte_end":332895,"line_start":67,"line_end":67,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333081,"byte_end":333086,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"parse","qualname":"<Header>::parse","value":"pub fn parse(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Parses a header from raw bytes.","sig":null,"attributes":[{"value":"/ Parses a header from raw bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332972,"byte_end":333007,"line_start":72,"line_end":72,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333012,"byte_end":333015,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Panics when `raw` contains less than 2 Bytes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333020,"byte_end":333069,"line_start":74,"line_end":74,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333417,"byte_end":333423,"line_start":83,"line_end":83,"column_start":12,"column_end":18},"name":"to_u16","qualname":"<Header>::to_u16","value":"pub fn to_u16(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw representation of the header.","sig":null,"attributes":[{"value":"/ Returns the raw representation of the header.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333249,"byte_end":333298,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333303,"byte_end":333306,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ The returned `u16` must be transmitted LSB and LSb first as the first 2 octets of the PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333311,"byte_end":333405,"line_start":82,"line_end":82,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333561,"byte_end":333575,"line_start":88,"line_end":88,"column_start":12,"column_end":26},"name":"payload_length","qualname":"<Header>::payload_length","value":"pub fn payload_length(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the payload in octets as specified in the `Length` field.\n","sig":null,"attributes":[{"value":"/ Returns the length of the payload in octets as specified in the `Length` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333466,"byte_end":333549,"line_start":87,"line_end":87,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333784,"byte_end":333802,"line_start":95,"line_end":95,"column_start":12,"column_end":30},"name":"set_payload_length","qualname":"<Header>::set_payload_length","value":"pub fn set_payload_length(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets the payload length field to `len`.","sig":null,"attributes":[{"value":"/ Sets the payload length field to `len`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333654,"byte_end":333697,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333702,"byte_end":333705,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Note that BLE <4.2 is restricted to 5-bit payload lengths.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333710,"byte_end":333772,"line_start":94,"line_end":94,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333948,"byte_end":333952,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"llid","qualname":"<Header>::llid","value":"pub fn llid(&Self) -> Llid","parent":null,"children":[],"decl_id":null,"docs":" Returns the `LLID` field (PDU type).\n","sig":null,"attributes":[{"value":"/ Returns the `LLID` field (PDU type).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":333896,"byte_end":333936,"line_start":99,"line_end":99,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334309,"byte_end":334313,"line_start":112,"line_end":112,"column_start":12,"column_end":16},"name":"nesn","qualname":"<Header>::nesn","value":"pub fn nesn(&Self) -> SeqNum","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the `NESN` field (Next Expected Sequence Number).\n","sig":null,"attributes":[{"value":"/ Returns the value of the `NESN` field (Next Expected Sequence Number).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334223,"byte_end":334297,"line_start":111,"line_end":111,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334528,"byte_end":334536,"line_start":122,"line_end":122,"column_start":12,"column_end":20},"name":"set_nesn","qualname":"<Header>::set_nesn","value":"pub fn set_nesn(&mut Self, SeqNum)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `NESN` field.\n","sig":null,"attributes":[{"value":"/ Sets the value of the `NESN` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334477,"byte_end":334516,"line_start":121,"line_end":121,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334766,"byte_end":334768,"line_start":131,"line_end":131,"column_start":12,"column_end":14},"name":"sn","qualname":"<Header>::sn","value":"pub fn sn(&Self) -> SeqNum","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the `SN` field (Sequence Number).\n","sig":null,"attributes":[{"value":"/ Returns the value of the `SN` field (Sequence Number).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334696,"byte_end":334754,"line_start":130,"line_end":130,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334981,"byte_end":334987,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"set_sn","qualname":"<Header>::set_sn","value":"pub fn set_sn(&mut Self, SeqNum)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `SN` field.\n","sig":null,"attributes":[{"value":"/ Sets the value of the `SN` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":334932,"byte_end":334969,"line_start":140,"line_end":140,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335209,"byte_end":335211,"line_start":150,"line_end":150,"column_start":12,"column_end":14},"name":"md","qualname":"<Header>::md","value":"pub fn md(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `MD` field is set (More Data).\n","sig":null,"attributes":[{"value":"/ Returns whether the `MD` field is set (More Data).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335143,"byte_end":335197,"line_start":149,"line_end":149,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335342,"byte_end":335348,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"set_md","qualname":"<Header>::set_md","value":"pub fn set_md(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `MD` field.\n","sig":null,"attributes":[{"value":"/ Sets the value of the `MD` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335293,"byte_end":335330,"line_start":155,"line_end":155,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3245},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336325,"byte_end":336333,"line_start":194,"line_end":194,"column_start":5,"column_end":13},"name":"Reserved","qualname":"::link::data::Llid::Reserved","value":"Llid::Reserved","parent":{"krate":0,"index":3244},"children":[],"decl_id":null,"docs":" Reserved for future use.\n","sig":null,"attributes":[{"value":"/ Reserved for future use.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336292,"byte_end":336320,"line_start":193,"line_end":193,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3248},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336400,"byte_end":336408,"line_start":197,"line_end":197,"column_start":5,"column_end":13},"name":"DataCont","qualname":"::link::data::Llid::DataCont","value":"Llid::DataCont","parent":{"krate":0,"index":3244},"children":[],"decl_id":null,"docs":" Continuation of L2CAP message, or empty PDU.\n","sig":null,"attributes":[{"value":"/ Continuation of L2CAP message, or empty PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336347,"byte_end":336395,"line_start":196,"line_end":196,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3251},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336454,"byte_end":336463,"line_start":200,"line_end":200,"column_start":5,"column_end":14},"name":"DataStart","qualname":"::link::data::Llid::DataStart","value":"Llid::DataStart","parent":{"krate":0,"index":3244},"children":[],"decl_id":null,"docs":" Start of L2CAP message.\n","sig":null,"attributes":[{"value":"/ Start of L2CAP message.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336422,"byte_end":336449,"line_start":199,"line_end":199,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3254},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336501,"byte_end":336508,"line_start":203,"line_end":203,"column_start":5,"column_end":12},"name":"Control","qualname":"::link::data::Llid::Control","value":"Llid::Control","parent":{"krate":0,"index":3244},"children":[],"decl_id":null,"docs":" LL control PDU.\n","sig":null,"attributes":[{"value":"/ LL control PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336477,"byte_end":336496,"line_start":202,"line_end":202,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":3244},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336281,"byte_end":336285,"line_start":192,"line_end":192,"column_start":10,"column_end":14},"name":"Llid","qualname":"::link::data::Llid","value":"pub enum Llid { Reserved = , DataCont = , DataStart = , Control = , }","parent":null,"children":[{"krate":0,"index":3245},{"krate":0,"index":3248},{"krate":0,"index":3251},{"krate":0,"index":3254}],"decl_id":null,"docs":" Values of the LLID field in `Header`.\n","sig":null,"attributes":[{"value":"/ Values of the LLID field in `Header`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336185,"byte_end":336226,"line_start":190,"line_end":190,"column_start":1,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":3271},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336673,"byte_end":336681,"line_start":210,"line_end":210,"column_start":5,"column_end":13},"name":"DataCont","qualname":"::link::data::Pdu::DataCont","value":"Pdu::DataCont { message }","parent":{"krate":0,"index":3268},"children":[],"decl_id":null,"docs":" Continuation of an L2CAP message (or empty PDU).\n","sig":null,"attributes":[{"value":"/ Continuation of an L2CAP message (or empty PDU).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336616,"byte_end":336668,"line_start":209,"line_end":209,"column_start":5,"column_end":57}}]},{"kind":"StructVariant","id":{"krate":0,"index":3273},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336758,"byte_end":336767,"line_start":213,"line_end":213,"column_start":5,"column_end":14},"name":"DataStart","qualname":"::link::data::Pdu::DataStart","value":"Pdu::DataStart { message }","parent":{"krate":0,"index":3268},"children":[],"decl_id":null,"docs":" Start of an L2CAP message (must not be empty).\n","sig":null,"attributes":[{"value":"/ Start of an L2CAP message (must not be empty).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336703,"byte_end":336753,"line_start":212,"line_end":212,"column_start":5,"column_end":55}}]},{"kind":"StructVariant","id":{"krate":0,"index":3275},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336855,"byte_end":336862,"line_start":216,"line_end":216,"column_start":5,"column_end":12},"name":"Control","qualname":"::link::data::Pdu::Control","value":"Pdu::Control { data }","parent":{"krate":0,"index":3268},"children":[],"decl_id":null,"docs":" LL Control PDU for controlling the Link-Layer connection.\n","sig":null,"attributes":[{"value":"/ LL Control PDU for controlling the Link-Layer connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336789,"byte_end":336850,"line_start":215,"line_end":215,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":3268},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336599,"byte_end":336602,"line_start":208,"line_end":208,"column_start":10,"column_end":13},"name":"Pdu","qualname":"::link::data::Pdu","value":"pub enum Pdu<'a, L> {\n    DataCont {\n        message: L,\n    },\n    DataStart {\n        message: L,\n    },\n    Control {\n        data: BytesOr,\n    },\n}","parent":null,"children":[{"krate":0,"index":3271},{"krate":0,"index":3273},{"krate":0,"index":3275}],"decl_id":null,"docs":" Structured representation of a data channel PDU.\n","sig":null,"attributes":[{"value":"/ Structured representation of a data channel PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336520,"byte_end":336572,"line_start":206,"line_end":206,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337087,"byte_end":337092,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"empty","qualname":"<Pdu>::empty","value":"pub fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty PDU that carries no message.","sig":null,"attributes":[{"value":"/ Creates an empty PDU that carries no message.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336938,"byte_end":336987,"line_start":220,"line_end":220,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336992,"byte_end":336995,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ This PDU can be sent whenever there's no actual data to be transferred.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337000,"byte_end":337075,"line_start":222,"line_end":222,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337243,"byte_end":337247,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"llid","qualname":"<Pdu>::llid","value":"pub fn llid(&Self) -> Llid","parent":null,"children":[],"decl_id":null,"docs":" Returns the `LLID` field to use for this PDU.\n","sig":null,"attributes":[{"value":"/ Returns the `LLID` field to use for this PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337182,"byte_end":337231,"line_start":229,"line_end":229,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337575,"byte_end":337580,"line_start":241,"line_end":241,"column_start":12,"column_end":17},"name":"parse","qualname":"<Pdu>::parse","value":"pub fn parse(Header, &'a [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Parses a PDU from a `Header` and raw payload.\n","sig":null,"attributes":[{"value":"/ Parses a PDU from a `Header` and raw payload.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337514,"byte_end":337563,"line_start":240,"line_end":240,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3282},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":338992,"byte_end":338998,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Public","qualname":"::link::device_address::AddressKind::Public","value":"AddressKind::Public","parent":{"krate":0,"index":3281},"children":[],"decl_id":null,"docs":" Publicly registered IEEE 802-2001 LAN MAC address.\n","sig":null,"attributes":[{"value":"/ Publicly registered IEEE 802-2001 LAN MAC address.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":338933,"byte_end":338987,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3284},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339040,"byte_end":339046,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"Random","qualname":"::link::device_address::AddressKind::Random","value":"AddressKind::Random","parent":{"krate":0,"index":3281},"children":[],"decl_id":null,"docs":" Randomly generated address.\n","sig":null,"attributes":[{"value":"/ Randomly generated address.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339004,"byte_end":339035,"line_start":8,"line_end":8,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":3281},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":338915,"byte_end":338926,"line_start":5,"line_end":5,"column_start":10,"column_end":21},"name":"AddressKind","qualname":"::link::device_address::AddressKind","value":"pub enum AddressKind { Public, Random, }","parent":null,"children":[{"krate":0,"index":3282},{"krate":0,"index":3284}],"decl_id":null,"docs":" Specifies whether a device address is randomly generated or a LAN MAC address.\n","sig":null,"attributes":[{"value":"/ Specifies whether a device address is randomly generated or a LAN MAC address.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":338778,"byte_end":338860,"line_start":3,"line_end":3,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":3297},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339132,"byte_end":339145,"line_start":14,"line_end":14,"column_start":12,"column_end":25},"name":"DeviceAddress","qualname":"::link::device_address::DeviceAddress","value":"DeviceAddress {  }","parent":null,"children":[{"krate":0,"index":3298},{"krate":0,"index":3300}],"decl_id":null,"docs":" A Bluetooth device address.\n","sig":null,"attributes":[{"value":"/ A Bluetooth device address.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339051,"byte_end":339082,"line_start":12,"line_end":12,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339414,"byte_end":339417,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<DeviceAddress>::new","value":"pub fn new([u8; ], AddressKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new device address from 6 raw Bytes and an address kind specifier.","sig":null,"attributes":[{"value":"/ Create a new device address from 6 raw Bytes and an address kind specifier.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339219,"byte_end":339298,"line_start":20,"line_end":20,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339303,"byte_end":339306,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The `bytes` array contains the address Bytes as they are sent over the air (LSB first).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339311,"byte_end":339402,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339553,"byte_end":339557,"line_start":28,"line_end":28,"column_start":12,"column_end":16},"name":"kind","qualname":"<DeviceAddress>::kind","value":"pub fn kind(&Self) -> AddressKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the address kind.\n","sig":null,"attributes":[{"value":"/ Returns the address kind.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339512,"byte_end":339541,"line_start":27,"line_end":27,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339678,"byte_end":339687,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"is_random","qualname":"<DeviceAddress>::is_random","value":"pub fn is_random(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this address is randomly generated.\n","sig":null,"attributes":[{"value":"/ Returns whether this address is randomly generated.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339611,"byte_end":339666,"line_start":32,"line_end":32,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339830,"byte_end":339833,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"raw","qualname":"<DeviceAddress>::raw","value":"pub fn raw(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw bytes making up this address (LSB first).\n","sig":null,"attributes":[{"value":"/ Returns the raw bytes making up this address (LSB first).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339757,"byte_end":339818,"line_start":37,"line_end":37,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3313},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":341520,"byte_end":341530,"line_start":6,"line_end":6,"column_start":16,"column_end":26},"name":"FeatureSet","qualname":"::link::features::FeatureSet","value":"FeatureSet {  }","parent":null,"children":[{"krate":0,"index":3314}],"decl_id":null,"docs":" A set of optional Link Layer features.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3353},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":342063,"byte_end":342076,"line_start":16,"line_end":16,"column_start":15,"column_end":28},"name":"LE_ENCRYPTION","qualname":"::link::features::FeatureSet::LE_ENCRYPTION","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Low-Energy data encryption.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3354},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":342585,"byte_end":342599,"line_start":27,"line_end":27,"column_start":15,"column_end":29},"name":"CONN_PARAM_REQ","qualname":"::link::features::FeatureSet::CONN_PARAM_REQ","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Connection parameters request procedure.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3355},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":342689,"byte_end":342715,"line_start":30,"line_end":30,"column_start":15,"column_end":41},"name":"EXTENDED_REJECT_INDICATION","qualname":"::link::features::FeatureSet::EXTENDED_REJECT_INDICATION","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Support for the LL Control PDU `LL_REJECT_IND_EXT`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3356},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":343036,"byte_end":343058,"line_start":38,"line_end":38,"column_start":15,"column_end":37},"name":"SLAVE_FEATURE_EXCHANGE","qualname":"::link::features::FeatureSet::SLAVE_FEATURE_EXCHANGE","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Slave-initiated feature exchange.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3357},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":343693,"byte_end":343700,"line_start":50,"line_end":50,"column_start":15,"column_end":22},"name":"LE_PING","qualname":"::link::features::FeatureSet::LE_PING","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Low-Energy Link-Layer ping exchange.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3358},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344059,"byte_end":344085,"line_start":57,"line_end":57,"column_start":15,"column_end":41},"name":"LE_PACKET_LENGTH_EXTENSION","qualname":"::link::features::FeatureSet::LE_PACKET_LENGTH_EXTENSION","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Link-Layer PDU length update (support for data channel PDUs with more than 31 Bytes).","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3359},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344189,"byte_end":344199,"line_start":60,"line_end":60,"column_start":15,"column_end":25},"name":"LL_PRIVACY","qualname":"::link::features::FeatureSet::LL_PRIVACY","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Support for untrackable randomized device addresses (LL Privacy).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3360},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344268,"byte_end":344295,"line_start":63,"line_end":63,"column_start":15,"column_end":42},"name":"EXT_SCANNER_FILTER_POLICIES","qualname":"::link::features::FeatureSet::EXT_SCANNER_FILTER_POLICIES","value":"Self","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Extended scan filter policies.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344397,"byte_end":344406,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"supported","qualname":"<FeatureSet>::supported","value":"pub fn supported() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the feature set supported by Rubble.\n","sig":null,"attributes":[{"value":"/ Returns the feature set supported by Rubble.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344337,"byte_end":344385,"line_start":68,"line_end":68,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1542},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::link::filter","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","parent":null,"children":[{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1562},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1577},{"krate":0,"index":1582},{"krate":0,"index":1588},{"krate":0,"index":1591}],"decl_id":null,"docs":" Link-Layer Device Filtering.\n","sig":null,"attributes":[{"value":"/ Link-Layer Device Filtering.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":344988,"byte_end":345020,"line_start":1,"line_end":1,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":1553},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345084,"byte_end":345097,"line_start":6,"line_end":6,"column_start":11,"column_end":24},"name":"AddressFilter","qualname":"::link::filter::AddressFilter","value":"AddressFilter","parent":null,"children":[{"krate":0,"index":1554}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345107,"byte_end":345114,"line_start":7,"line_end":7,"column_start":8,"column_end":15},"name":"matches","qualname":"::link::filter::AddressFilter::matches","value":"pub fn matches(&Self, DeviceAddress) -> bool","parent":{"krate":0,"index":1553},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1555},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345243,"byte_end":345251,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"AllowAll","qualname":"::link::filter::AllowAll","value":"","parent":null,"children":[],"decl_id":null,"docs":" An `AddressFilter` that allows all devices (ie. no whitelist in use).\n","sig":null,"attributes":[{"value":"/ An `AddressFilter` that allows all devices (ie. no whitelist in use).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345158,"byte_end":345231,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1559},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345613,"byte_end":345628,"line_start":23,"line_end":23,"column_start":12,"column_end":27},"name":"WhitelistFilter","qualname":"::link::filter::WhitelistFilter","value":"WhitelistFilter {  }","parent":null,"children":[{"krate":0,"index":1561}],"decl_id":null,"docs":" An `AddressFilter` that checks device addresses against a whitelist.","sig":null,"attributes":[{"value":"/ An `AddressFilter` that checks device addresses against a whitelist.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345367,"byte_end":345439,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345440,"byte_end":345443,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is a software filter, which allows checking against arbitrarily many device addresses, but","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345444,"byte_end":345543,"line_start":21,"line_end":21,"column_start":1,"column_end":100}},{"value":"/ might be less efficient than a hardware-based filter.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345544,"byte_end":345601,"line_start":22,"line_end":22,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346019,"byte_end":346022,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<WhitelistFilter<I>>::new","value":"pub fn new(I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a device whitelist from an iterator yielding the allowed device addresses.","sig":null,"attributes":[{"value":"/ Creates a device whitelist from an iterator yielding the allowed device addresses.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345768,"byte_end":345854,"line_start":28,"line_end":28,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345859,"byte_end":345862,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ The filter will clone and iterate over `allowed_addresses` for each incoming packet that","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345867,"byte_end":345959,"line_start":30,"line_end":30,"column_start":5,"column_end":97}},{"value":"/ needs to be checked against the filter.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345964,"byte_end":346007,"line_start":31,"line_end":31,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1565},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346140,"byte_end":346149,"line_start":39,"line_end":39,"column_start":10,"column_end":19},"name":"SliceIter","qualname":"::link::filter::SliceIter","value":"iter::Cloned<slice::Iter>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346444,"byte_end":346454,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<WhitelistFilter<SliceIter>>::from_slice","value":"pub fn from_slice(&'a [DeviceAddress]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a device whitelist from a slice of device addresses.","sig":null,"attributes":[{"value":"/ Creates a device whitelist from a slice of device addresses.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346249,"byte_end":346313,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346318,"byte_end":346321,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method provided to simplify using a slice as a device address","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346326,"byte_end":346413,"line_start":44,"line_end":44,"column_start":5,"column_end":92}},{"value":"/ whitelist.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346418,"byte_end":346432,"line_start":45,"line_end":45,"column_start":5,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":1570},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346590,"byte_end":346600,"line_start":53,"line_end":53,"column_start":10,"column_end":20},"name":"SingleIter","qualname":"::link::filter::SingleIter","value":"iter::Once<DeviceAddress>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346745,"byte_end":346757,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"from_address","qualname":"<WhitelistFilter<SingleIter>>::from_address","value":"pub fn from_address(DeviceAddress) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a device whitelist that will allow a single device.\n","sig":null,"attributes":[{"value":"/ Creates a device whitelist that will allow a single device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346670,"byte_end":346733,"line_start":56,"line_end":56,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347186,"byte_end":347195,"line_start":71,"line_end":71,"column_start":12,"column_end":21},"name":"AdvFilter","qualname":"::link::filter::AdvFilter","value":"AdvFilter {  }","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581}],"decl_id":null,"docs":" Advertising filter policy. Governs which devices may scan and connect to an advertising device.\n","sig":null,"attributes":[{"value":"/ Advertising filter policy. Governs which devices may scan and connect to an advertising device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347075,"byte_end":347174,"line_start":70,"line_end":70,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347638,"byte_end":347641,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<AdvFilter<S, C>>::new","value":"pub fn new(S, C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new filter policy from behaviors for scan and connect requests.","sig":null,"attributes":[{"value":"/ Creates a new filter policy from behaviors for scan and connect requests.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347329,"byte_end":347406,"line_start":77,"line_end":77,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347411,"byte_end":347414,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347419,"byte_end":347435,"line_start":79,"line_end":79,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347440,"byte_end":347443,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ * **`scan`**: An `AddressFilter` governing which devices may scan this device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347448,"byte_end":347530,"line_start":81,"line_end":81,"column_start":5,"column_end":87}},{"value":"/ * **`connect`**: An `AddressFilter` governing which devices may connect to this device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347535,"byte_end":347626,"line_start":82,"line_end":82,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347722,"byte_end":347730,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"may_scan","qualname":"<AdvFilter<S, C>>::may_scan","value":"pub fn may_scan(&Self, DeviceAddress) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1587},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347823,"byte_end":347834,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"may_connect","qualname":"<AdvFilter<S, C>>::may_connect","value":"pub fn may_connect(&Self, DeviceAddress) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348149,"byte_end":348159,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"ScanFilter","qualname":"::link::filter::ScanFilter","value":"ScanFilter {  }","parent":null,"children":[{"krate":0,"index":1590}],"decl_id":null,"docs":" Scanner filter policy. Governs which devices will be scanned by this device.","sig":null,"attributes":[{"value":"/ Scanner filter policy. Governs which devices will be scanned by this device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347921,"byte_end":348001,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348002,"byte_end":348005,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ This can be used for active and passive scanning. Advertisements sent by devices not matched by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348006,"byte_end":348105,"line_start":98,"line_end":98,"column_start":1,"column_end":100}},{"value":"/ the filter will be ignored.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348106,"byte_end":348137,"line_start":99,"line_end":99,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348315,"byte_end":348318,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<ScanFilter<S>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new scanner filter policy from an `AddressFilter`.\n","sig":null,"attributes":[{"value":"/ Creates a new scanner filter policy from an `AddressFilter`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348239,"byte_end":348303,"line_start":105,"line_end":105,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348378,"byte_end":348389,"line_start":110,"line_end":110,"column_start":12,"column_end":23},"name":"should_scan","qualname":"<ScanFilter<S>>::should_scan","value":"pub fn should_scan(&Self, DeviceAddress) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1595},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"llcp","qualname":"::link::llcp","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1621},{"krate":0,"index":3435},{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":1624},{"krate":0,"index":1632},{"krate":0,"index":1635},{"krate":0,"index":3450},{"krate":0,"index":3457},{"krate":0,"index":3459},{"krate":0,"index":3460},{"krate":0,"index":3462},{"krate":0,"index":3468},{"krate":0,"index":1637},{"krate":0,"index":3470},{"krate":0,"index":3474},{"krate":0,"index":3476},{"krate":0,"index":3477},{"krate":0,"index":3480},{"krate":0,"index":3487},{"krate":0,"index":3489},{"krate":0,"index":3518},{"krate":0,"index":3521},{"krate":0,"index":3523},{"krate":0,"index":1644},{"krate":0,"index":1648},{"krate":0,"index":1651},{"krate":0,"index":3533},{"krate":0,"index":3581},{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3590},{"krate":0,"index":3591},{"krate":0,"index":3593},{"krate":0,"index":3526},{"krate":0,"index":3528},{"krate":0,"index":3530},{"krate":0,"index":3626},{"krate":0,"index":3640},{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3652},{"krate":0,"index":3619},{"krate":0,"index":3621},{"krate":0,"index":3623}],"decl_id":null,"docs":" Defines packet structures used by the Link Layer Control Protocol.\n","sig":null,"attributes":[{"value":"/ Defines packet structures used by the Link Layer Control Protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":348473,"byte_end":348543,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":3435},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":348880,"byte_end":348902,"line_start":10,"line_end":10,"column_start":12,"column_end":34},"name":"ConnectionParamRequest","qualname":"::link::llcp::ConnectionParamRequest","value":"ConnectionParamRequest {  }","parent":null,"children":[{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442}],"decl_id":null,"docs":" A connection parameter update request or response (`LL_CONNECTION_PARAM_REQ`/\n `LL_CONNECTION_PARAM_RSP`).\n","sig":null,"attributes":[{"value":"/ A connection parameter update request or response (`LL_CONNECTION_PARAM_REQ`/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":348725,"byte_end":348806,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/ `LL_CONNECTION_PARAM_RSP`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":348807,"byte_end":348838,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1625},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349562,"byte_end":349565,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<ConnectionParamRequest>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new connection update request structure filled with default values.","sig":null,"attributes":[{"value":"/ Creates a new connection update request structure filled with default values.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349220,"byte_end":349301,"line_start":22,"line_end":22,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349306,"byte_end":349309,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ The returned structure will use conservative (maximally permissive) default values that will","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349314,"byte_end":349410,"line_start":24,"line_end":24,"column_start":5,"column_end":101}},{"value":"/ not usually result in a change in connection parameters, so users of this function likely","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349415,"byte_end":349508,"line_start":25,"line_end":25,"column_start":5,"column_end":98}},{"value":"/ want to call a setter afterwards.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349513,"byte_end":349550,"line_start":26,"line_end":26,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350461,"byte_end":350478,"line_start":54,"line_end":54,"column_start":12,"column_end":29},"name":"set_conn_interval","qualname":"<ConnectionParamRequest>::set_conn_interval","value":"pub fn set_conn_interval(&mut Self, Duration, Duration)","parent":null,"children":[],"decl_id":null,"docs":" Sets the minimum and maximum requested connection interval.","sig":null,"attributes":[{"value":"/ Sets the minimum and maximum requested connection interval.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349958,"byte_end":350021,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350026,"byte_end":350029,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350034,"byte_end":350050,"line_start":41,"line_end":41,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350055,"byte_end":350058,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ * `min`: Minimum connection interval to request.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350063,"byte_end":350115,"line_start":43,"line_end":43,"column_start":5,"column_end":57}},{"value":"/ * `max`: Maximum connection interval to request.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350120,"byte_end":350172,"line_start":44,"line_end":44,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350177,"byte_end":350180,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Both `min` and `max` must be in range 7.5ms to 4s, or they will be constrained to lie in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350185,"byte_end":350277,"line_start":46,"line_end":46,"column_start":5,"column_end":97}},{"value":"/ that range.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350282,"byte_end":350297,"line_start":47,"line_end":47,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350302,"byte_end":350305,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Both `min` and `max` will be rounded down to units of 1.25 ms.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350310,"byte_end":350376,"line_start":49,"line_end":49,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350381,"byte_end":350384,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350389,"byte_end":350401,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350406,"byte_end":350409,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This will panic if `min > max`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350414,"byte_end":350449,"line_start":53,"line_end":53,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351029,"byte_end":351046,"line_start":70,"line_end":70,"column_start":12,"column_end":29},"name":"min_conn_interval","qualname":"<ConnectionParamRequest>::min_conn_interval","value":"pub fn min_conn_interval(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the minimum requested connection interval.\n","sig":null,"attributes":[{"value":"/ Returns the minimum requested connection interval.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":350963,"byte_end":351017,"line_start":69,"line_end":69,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351213,"byte_end":351230,"line_start":75,"line_end":75,"column_start":12,"column_end":29},"name":"max_conn_interval","qualname":"<ConnectionParamRequest>::max_conn_interval","value":"pub fn max_conn_interval(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum requested connection interval.\n","sig":null,"attributes":[{"value":"/ Returns the maximum requested connection interval.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351147,"byte_end":351201,"line_start":74,"line_end":74,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351404,"byte_end":351417,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"name":"slave_latency","qualname":"<ConnectionParamRequest>::slave_latency","value":"pub fn slave_latency(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the slave latency in number of connection events.\n","sig":null,"attributes":[{"value":"/ Returns the slave latency in number of connection events.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351331,"byte_end":351392,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351520,"byte_end":351539,"line_start":85,"line_end":85,"column_start":12,"column_end":31},"name":"supervision_timeout","qualname":"<ConnectionParamRequest>::supervision_timeout","value":"pub fn supervision_timeout(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the supervision timeout.\n","sig":null,"attributes":[{"value":"/ Returns the supervision timeout.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351472,"byte_end":351508,"line_start":84,"line_end":84,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3450},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353145,"byte_end":353165,"line_start":130,"line_end":130,"column_start":12,"column_end":32},"name":"ConnectionUpdateData","qualname":"::link::llcp::ConnectionUpdateData","value":"ConnectionUpdateData {  }","parent":null,"children":[{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3456}],"decl_id":null,"docs":" Data transmitted with an `LL_CONNECTION_UPDATE_REQ` Control PDU, containing a new set of\n connection parameters.\n","sig":null,"attributes":[{"value":"/ Data transmitted with an `LL_CONNECTION_UPDATE_REQ` Control PDU, containing a new set of","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":352926,"byte_end":353018,"line_start":126,"line_end":126,"column_start":1,"column_end":93}},{"value":"/ connection parameters.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353019,"byte_end":353045,"line_start":127,"line_end":127,"column_start":1,"column_end":27}},{"value":"repr(packed)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353118,"byte_end":353133,"line_start":129,"line_end":129,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353407,"byte_end":353415,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"win_size","qualname":"<ConnectionUpdateData>::win_size","value":"pub fn win_size(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the transmit window for the first PDU of the connection.\n","sig":null,"attributes":[{"value":"/ Returns the size of the transmit window for the first PDU of the connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353315,"byte_end":353395,"line_start":140,"line_end":140,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1639},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353605,"byte_end":353615,"line_start":146,"line_end":146,"column_start":12,"column_end":22},"name":"win_offset","qualname":"<ConnectionUpdateData>::win_offset","value":"pub fn win_offset(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset of the transmit window, as a duration since the `instant`.\n","sig":null,"attributes":[{"value":"/ Returns the offset of the transmit window, as a duration since the `instant`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353512,"byte_end":353593,"line_start":145,"line_end":145,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353777,"byte_end":353785,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"interval","qualname":"<ConnectionUpdateData>::interval","value":"pub fn interval(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration between connection events.\n","sig":null,"attributes":[{"value":"/ Returns the duration between connection events.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353714,"byte_end":353765,"line_start":150,"line_end":150,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353924,"byte_end":353931,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"latency","qualname":"<ConnectionUpdateData>::latency","value":"pub fn latency(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the slave latency.\n","sig":null,"attributes":[{"value":"/ Returns the slave latency.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353882,"byte_end":353912,"line_start":155,"line_end":155,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354066,"byte_end":354073,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"timeout","qualname":"<ConnectionUpdateData>::timeout","value":"pub fn timeout(&Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the connection supervision timeout (`connSupervisionTimeout`).\n","sig":null,"attributes":[{"value":"/ Returns the connection supervision timeout (`connSupervisionTimeout`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353980,"byte_end":354054,"line_start":160,"line_end":160,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354248,"byte_end":354255,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"instant","qualname":"<ConnectionUpdateData>::instant","value":"pub fn instant(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the instant at which these changes should take effect.\n","sig":null,"attributes":[{"value":"/ Returns the instant at which these changes should take effect.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354170,"byte_end":354236,"line_start":165,"line_end":165,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354401,"byte_end":354414,"line_start":173,"line_end":173,"column_start":12,"column_end":25},"name":"ChannelMapReq","qualname":"::link::llcp::ChannelMapReq","value":"ChannelMapReq { map, instant }","parent":null,"children":[{"krate":0,"index":3471},{"krate":0,"index":3473}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(packed)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354374,"byte_end":354389,"line_start":172,"line_end":172,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":3471},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354425,"byte_end":354428,"line_start":174,"line_end":174,"column_start":9,"column_end":12},"name":"map","qualname":"::link::llcp::ChannelMapReq::map","value":"bytes::Field<[u8; 5], link::channel_map::ChannelMap>","parent":{"krate":0,"index":3470},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3473},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354466,"byte_end":354473,"line_start":175,"line_end":175,"column_start":9,"column_end":16},"name":"instant","qualname":"::link::llcp::ChannelMapReq::instant","value":"u16","parent":{"krate":0,"index":3470},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3491},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354795,"byte_end":354814,"line_start":184,"line_end":184,"column_start":5,"column_end":24},"name":"ConnectionUpdateReq","qualname":"::link::llcp::ControlPdu::ConnectionUpdateReq","value":"ControlPdu::ConnectionUpdateReq(&'a ConnectionUpdateData)","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x00`/`LL_CONNECTION_UPDATE_REQ` - Update connection parameters.","sig":null,"attributes":[{"value":"/ `0x00`/`LL_CONNECTION_UPDATE_REQ` - Update connection parameters.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354644,"byte_end":354713,"line_start":181,"line_end":181,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354718,"byte_end":354721,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Sent by the master. The slave does not send a response back.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354726,"byte_end":354790,"line_start":183,"line_end":183,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3494},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354986,"byte_end":354999,"line_start":189,"line_end":189,"column_start":5,"column_end":18},"name":"ChannelMapReq","qualname":"::link::llcp::ControlPdu::ChannelMapReq","value":"ControlPdu::ChannelMapReq(&'a ChannelMapReq)","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x01`/`LL_CHANNEL_MAP_REQ` - Update the channel map.","sig":null,"attributes":[{"value":"/ `0x01`/`LL_CHANNEL_MAP_REQ` - Update the channel map.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354847,"byte_end":354904,"line_start":186,"line_end":186,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354909,"byte_end":354912,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Sent by the master. The slave does not send a response back.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354917,"byte_end":354981,"line_start":188,"line_end":188,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":3497},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355131,"byte_end":355143,"line_start":194,"line_end":194,"column_start":5,"column_end":17},"name":"TerminateInd","qualname":"::link::llcp::ControlPdu::TerminateInd","value":"ControlPdu::TerminateInd { error_code }","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x02`/`LL_TERMINATE_IND` - Close the connection.","sig":null,"attributes":[{"value":"/ `0x02`/`LL_TERMINATE_IND` - Close the connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355025,"byte_end":355078,"line_start":191,"line_end":191,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355083,"byte_end":355086,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Can be sent by master or slave.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355091,"byte_end":355126,"line_start":193,"line_end":193,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":3499},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355449,"byte_end":355459,"line_start":202,"line_end":202,"column_start":5,"column_end":15},"name":"UnknownRsp","qualname":"::link::llcp::ControlPdu::UnknownRsp","value":"ControlPdu::UnknownRsp { unknown_type }","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x07`/`LL_UNKNOWN_RSP` - Response to unknown/unsupported LL Control PDUs.","sig":null,"attributes":[{"value":"/ `0x07`/`LL_UNKNOWN_RSP` - Response to unknown/unsupported LL Control PDUs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355187,"byte_end":355265,"line_start":198,"line_end":198,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355270,"byte_end":355273,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This is returned as a response to an incoming LL Control PDU when the opcode is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355278,"byte_end":355361,"line_start":200,"line_end":200,"column_start":5,"column_end":88}},{"value":"/ unimplemented or unknown, or when the `CtrData` is invalid for the opcode.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355366,"byte_end":355444,"line_start":201,"line_end":201,"column_start":5,"column_end":83}}]},{"kind":"StructVariant","id":{"krate":0,"index":3501},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355618,"byte_end":355628,"line_start":208,"line_end":208,"column_start":5,"column_end":15},"name":"FeatureReq","qualname":"::link::llcp::ControlPdu::FeatureReq","value":"ControlPdu::FeatureReq { features_master }","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x08`/`LL_FEATURE_REQ` - Master requests slave's features.\n","sig":null,"attributes":[{"value":"/ `0x08`/`LL_FEATURE_REQ` - Master requests slave's features.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355550,"byte_end":355613,"line_start":207,"line_end":207,"column_start":5,"column_end":68}}]},{"kind":"StructVariant","id":{"krate":0,"index":3503},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355821,"byte_end":355831,"line_start":214,"line_end":214,"column_start":5,"column_end":15},"name":"FeatureRsp","qualname":"::link::llcp::ControlPdu::FeatureRsp","value":"ControlPdu::FeatureRsp { features_used }","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x09`/`LL_FEATURE_RSP` - Slave answers `LL_FEATURE_REQ` with the used feature set.\n","sig":null,"attributes":[{"value":"/ `0x09`/`LL_FEATURE_RSP` - Slave answers `LL_FEATURE_REQ` with the used feature set.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355729,"byte_end":355816,"line_start":213,"line_end":213,"column_start":5,"column_end":92}}]},{"kind":"StructVariant","id":{"krate":0,"index":3505},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356285,"byte_end":356295,"line_start":224,"line_end":224,"column_start":5,"column_end":15},"name":"VersionInd","qualname":"::link::llcp::ControlPdu::VersionInd","value":"ControlPdu::VersionInd { vers_nr, comp_id, sub_vers_nr }","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" `0x0C`/`LL_VERSION_IND` - Bluetooth version indication (sent by both master and slave).","sig":null,"attributes":[{"value":"/ `0x0C`/`LL_VERSION_IND` - Bluetooth version indication (sent by both master and slave).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":355996,"byte_end":356087,"line_start":220,"line_end":220,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356092,"byte_end":356095,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ When either master or slave receive this PDU, they should respond with their version if they","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356100,"byte_end":356196,"line_start":222,"line_end":222,"column_start":5,"column_end":101}},{"value":"/ have not already sent this PDU during this data connection (FIXME do this).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356201,"byte_end":356280,"line_start":223,"line_end":223,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3509},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356401,"byte_end":356419,"line_start":230,"line_end":230,"column_start":5,"column_end":23},"name":"ConnectionParamReq","qualname":"::link::llcp::ControlPdu::ConnectionParamReq","value":"ControlPdu::ConnectionParamReq(ConnectionParamRequest)","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3512},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356449,"byte_end":356467,"line_start":231,"line_end":231,"column_start":5,"column_end":23},"name":"ConnectionParamRsp","qualname":"::link::llcp::ControlPdu::ConnectionParamRsp","value":"ControlPdu::ConnectionParamRsp(ConnectionParamRequest)","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":3515},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356549,"byte_end":356556,"line_start":234,"line_end":234,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::link::llcp::ControlPdu::Unknown","value":"ControlPdu::Unknown { opcode, ctr_data }","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":" Catch-all variant for unsupported opcodes.\n","sig":null,"attributes":[{"value":"/ Catch-all variant for unsupported opcodes.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356498,"byte_end":356544,"line_start":233,"line_end":233,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":3489},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354623,"byte_end":354633,"line_start":180,"line_end":180,"column_start":10,"column_end":20},"name":"ControlPdu","qualname":"::link::llcp::ControlPdu","value":"pub enum ControlPdu<'a> {\n    ConnectionUpdateReq(&'a ConnectionUpdateData),\n    ChannelMapReq(&'a ChannelMapReq),\n    TerminateInd {\n        error_code: Hex<u8>,\n    },\n    UnknownRsp {\n        unknown_type: ControlOpcode,\n    },\n    FeatureReq {\n        features_master: FeatureSet,\n    },\n    FeatureRsp {\n        features_used: FeatureSet,\n    },\n    VersionInd {\n        vers_nr: VersionNumber,\n        comp_id: CompanyId,\n        sub_vers_nr: Hex<u16>,\n    },\n    ConnectionParamReq(ConnectionParamRequest),\n    ConnectionParamRsp(ConnectionParamRequest),\n    Unknown {\n        opcode: ControlOpcode,\n        ctr_data: &'a [u8],\n    },\n}","parent":null,"children":[{"krate":0,"index":3491},{"krate":0,"index":3494},{"krate":0,"index":3497},{"krate":0,"index":3499},{"krate":0,"index":3501},{"krate":0,"index":3503},{"krate":0,"index":3505},{"krate":0,"index":3509},{"krate":0,"index":3512},{"krate":0,"index":3515}],"decl_id":null,"docs":" A structured representation of an LL Control PDU used by the Link Layer Control Protocol (LLCP).\n","sig":null,"attributes":[{"value":"/ A structured representation of an LL Control PDU used by the Link Layer Control Protocol (LLCP).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":354483,"byte_end":354583,"line_start":178,"line_end":178,"column_start":1,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1645},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356847,"byte_end":356853,"line_start":245,"line_end":245,"column_start":12,"column_end":18},"name":"opcode","qualname":"<ControlPdu>::opcode","value":"pub fn opcode(&Self) -> ControlOpcode","parent":null,"children":[],"decl_id":null,"docs":" Returns the opcode of this LL Control PDU.\n","sig":null,"attributes":[{"value":"/ Returns the opcode of this LL Control PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356789,"byte_end":356835,"line_start":244,"line_end":244,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1646},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":357764,"byte_end":357776,"line_start":261,"line_end":261,"column_start":12,"column_end":24},"name":"encoded_size","qualname":"<ControlPdu>::encoded_size","value":"pub fn encoded_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded size of this LLCPDU, including the opcode byte.\n","sig":null,"attributes":[{"value":"/ Returns the encoded size of this LLCPDU, including the opcode byte.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":357681,"byte_end":357752,"line_start":260,"line_end":260,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3534},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362495,"byte_end":362514,"line_start":388,"line_end":388,"column_start":9,"column_end":28},"name":"ConnectionUpdateReq","qualname":"::link::llcp::ControlOpcode::ConnectionUpdateReq","value":"ControlOpcode::ConnectionUpdateReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3536},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362531,"byte_end":362544,"line_start":389,"line_end":389,"column_start":9,"column_end":22},"name":"ChannelMapReq","qualname":"::link::llcp::ControlOpcode::ChannelMapReq","value":"ControlOpcode::ChannelMapReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3538},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362561,"byte_end":362573,"line_start":390,"line_end":390,"column_start":9,"column_end":21},"name":"TerminateInd","qualname":"::link::llcp::ControlOpcode::TerminateInd","value":"ControlOpcode::TerminateInd","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3540},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362590,"byte_end":362596,"line_start":391,"line_end":391,"column_start":9,"column_end":15},"name":"EncReq","qualname":"::link::llcp::ControlOpcode::EncReq","value":"ControlOpcode::EncReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3542},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362613,"byte_end":362619,"line_start":392,"line_end":392,"column_start":9,"column_end":15},"name":"EncRsp","qualname":"::link::llcp::ControlOpcode::EncRsp","value":"ControlOpcode::EncRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3544},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362636,"byte_end":362647,"line_start":393,"line_end":393,"column_start":9,"column_end":20},"name":"StartEncReq","qualname":"::link::llcp::ControlOpcode::StartEncReq","value":"ControlOpcode::StartEncReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3546},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362664,"byte_end":362675,"line_start":394,"line_end":394,"column_start":9,"column_end":20},"name":"StartEncRsp","qualname":"::link::llcp::ControlOpcode::StartEncRsp","value":"ControlOpcode::StartEncRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3548},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362692,"byte_end":362702,"line_start":395,"line_end":395,"column_start":9,"column_end":19},"name":"UnknownRsp","qualname":"::link::llcp::ControlOpcode::UnknownRsp","value":"ControlOpcode::UnknownRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3550},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362719,"byte_end":362729,"line_start":396,"line_end":396,"column_start":9,"column_end":19},"name":"FeatureReq","qualname":"::link::llcp::ControlOpcode::FeatureReq","value":"ControlOpcode::FeatureReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3552},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362746,"byte_end":362756,"line_start":397,"line_end":397,"column_start":9,"column_end":19},"name":"FeatureRsp","qualname":"::link::llcp::ControlOpcode::FeatureRsp","value":"ControlOpcode::FeatureRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3554},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362773,"byte_end":362784,"line_start":398,"line_end":398,"column_start":9,"column_end":20},"name":"PauseEncReq","qualname":"::link::llcp::ControlOpcode::PauseEncReq","value":"ControlOpcode::PauseEncReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3556},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362801,"byte_end":362812,"line_start":399,"line_end":399,"column_start":9,"column_end":20},"name":"PauseEncRsp","qualname":"::link::llcp::ControlOpcode::PauseEncRsp","value":"ControlOpcode::PauseEncRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3558},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362829,"byte_end":362839,"line_start":400,"line_end":400,"column_start":9,"column_end":19},"name":"VersionInd","qualname":"::link::llcp::ControlOpcode::VersionInd","value":"ControlOpcode::VersionInd","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3560},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362856,"byte_end":362865,"line_start":401,"line_end":401,"column_start":9,"column_end":18},"name":"RejectInd","qualname":"::link::llcp::ControlOpcode::RejectInd","value":"ControlOpcode::RejectInd","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3562},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362882,"byte_end":362897,"line_start":402,"line_end":402,"column_start":9,"column_end":24},"name":"SlaveFeatureReq","qualname":"::link::llcp::ControlOpcode::SlaveFeatureReq","value":"ControlOpcode::SlaveFeatureReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3564},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362914,"byte_end":362932,"line_start":403,"line_end":403,"column_start":9,"column_end":27},"name":"ConnectionParamReq","qualname":"::link::llcp::ControlOpcode::ConnectionParamReq","value":"ControlOpcode::ConnectionParamReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3566},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362949,"byte_end":362967,"line_start":404,"line_end":404,"column_start":9,"column_end":27},"name":"ConnectionParamRsp","qualname":"::link::llcp::ControlOpcode::ConnectionParamRsp","value":"ControlOpcode::ConnectionParamRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3568},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362984,"byte_end":362996,"line_start":405,"line_end":405,"column_start":9,"column_end":21},"name":"RejectIndExt","qualname":"::link::llcp::ControlOpcode::RejectIndExt","value":"ControlOpcode::RejectIndExt","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3570},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363013,"byte_end":363020,"line_start":406,"line_end":406,"column_start":9,"column_end":16},"name":"PingReq","qualname":"::link::llcp::ControlOpcode::PingReq","value":"ControlOpcode::PingReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3572},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363037,"byte_end":363044,"line_start":407,"line_end":407,"column_start":9,"column_end":16},"name":"PingRsp","qualname":"::link::llcp::ControlOpcode::PingRsp","value":"ControlOpcode::PingRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3574},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363061,"byte_end":363070,"line_start":408,"line_end":408,"column_start":9,"column_end":18},"name":"LengthReq","qualname":"::link::llcp::ControlOpcode::LengthReq","value":"ControlOpcode::LengthReq","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3576},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363087,"byte_end":363096,"line_start":409,"line_end":409,"column_start":9,"column_end":18},"name":"LengthRsp","qualname":"::link::llcp::ControlOpcode::LengthRsp","value":"ControlOpcode::LengthRsp","parent":{"krate":0,"index":3533},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3533},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":362467,"byte_end":362480,"line_start":387,"line_end":387,"column_start":14,"column_end":27},"name":"ControlOpcode","qualname":"::link::llcp::ControlOpcode","value":"pub enum ControlOpcode {\n    ConnectionUpdateReq,\n    ChannelMapReq,\n    TerminateInd,\n    EncReq,\n    EncRsp,\n    StartEncReq,\n    StartEncRsp,\n    UnknownRsp,\n    FeatureReq,\n    FeatureRsp,\n    PauseEncReq,\n    PauseEncRsp,\n    VersionInd,\n    RejectInd,\n    SlaveFeatureReq,\n    ConnectionParamReq,\n    ConnectionParamRsp,\n    RejectIndExt,\n    PingReq,\n    PingRsp,\n    LengthReq,\n    LengthRsp,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":3534},{"krate":0,"index":3536},{"krate":0,"index":3538},{"krate":0,"index":3540},{"krate":0,"index":3542},{"krate":0,"index":3544},{"krate":0,"index":3546},{"krate":0,"index":3548},{"krate":0,"index":3550},{"krate":0,"index":3552},{"krate":0,"index":3554},{"krate":0,"index":3556},{"krate":0,"index":3558},{"krate":0,"index":3560},{"krate":0,"index":3562},{"krate":0,"index":3564},{"krate":0,"index":3566},{"krate":0,"index":3568},{"krate":0,"index":3570},{"krate":0,"index":3572},{"krate":0,"index":3574},{"krate":0,"index":3576},{"krate":0,"index":3578}],"decl_id":null,"docs":" Enumeration of all known LL Control PDU opcodes (not all of which might be supported).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3627},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363413,"byte_end":363417,"line_start":419,"line_end":419,"column_start":9,"column_end":13},"name":"V4_0","qualname":"::link::llcp::VersionNumber::V4_0","value":"VersionNumber::V4_0","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3629},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363431,"byte_end":363435,"line_start":420,"line_end":420,"column_start":9,"column_end":13},"name":"V4_1","qualname":"::link::llcp::VersionNumber::V4_1","value":"VersionNumber::V4_1","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3631},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363449,"byte_end":363453,"line_start":421,"line_end":421,"column_start":9,"column_end":13},"name":"V4_2","qualname":"::link::llcp::VersionNumber::V4_2","value":"VersionNumber::V4_2","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3633},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363467,"byte_end":363471,"line_start":422,"line_end":422,"column_start":9,"column_end":13},"name":"V5_0","qualname":"::link::llcp::VersionNumber::V5_0","value":"VersionNumber::V5_0","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3635},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363485,"byte_end":363489,"line_start":423,"line_end":423,"column_start":9,"column_end":13},"name":"V5_1","qualname":"::link::llcp::VersionNumber::V5_1","value":"VersionNumber::V5_1","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3626},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":363385,"byte_end":363398,"line_start":418,"line_end":418,"column_start":14,"column_end":27},"name":"VersionNumber","qualname":"::link::llcp::VersionNumber","value":"pub enum VersionNumber { V4_0, V4_1, V4_2, V5_0, V5_1, Unknown(u8), }","parent":null,"children":[{"krate":0,"index":3627},{"krate":0,"index":3629},{"krate":0,"index":3631},{"krate":0,"index":3633},{"krate":0,"index":3635},{"krate":0,"index":3637}],"decl_id":null,"docs":" Enumeration of all possible `VersNr` for `LL_VERSION_IND` PDUs.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1654},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"queue","qualname":"::link::queue","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","parent":null,"children":[{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1666},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1674},{"krate":0,"index":1677},{"krate":0,"index":1681},{"krate":0,"index":1689},{"krate":0,"index":3661},{"krate":0,"index":3665},{"krate":0,"index":1698},{"krate":0,"index":1707},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1718},{"krate":0,"index":1723},{"krate":0,"index":1729},{"krate":0,"index":1734},{"krate":0,"index":1741}],"decl_id":null,"docs":" An SPSC queue for data channel PDUs.","sig":null,"attributes":[{"value":"/ An SPSC queue for data channel PDUs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365103,"byte_end":365143,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365144,"byte_end":365147,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Data channel PDUs are received and transmitted in time-critical code, so they're sent through","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365148,"byte_end":365245,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ a queue to be processed at a later time (eg. in the application's idle loop).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365246,"byte_end":365327,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365328,"byte_end":365331,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module defines the following important items:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365332,"byte_end":365386,"line_start":6,"line_end":6,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365387,"byte_end":365390,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ * The [`PacketQueue`] trait, which is implemented by all types providing a packet queue. A type","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365391,"byte_end":365490,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/   implementing this trait is needed to use the Rubble stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365491,"byte_end":365555,"line_start":9,"line_end":9,"column_start":1,"column_end":65}},{"value":"/ * The [`Producer`] and [`Consumer`] traits, which define the queue functionality used after","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365556,"byte_end":365651,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/   splitting a [`PacketQueue`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365652,"byte_end":365686,"line_start":11,"line_end":11,"column_start":1,"column_end":35}},{"value":"/ * The [`SimpleQueue`], [`SimpleProducer`] and [`SimpleConsumer`] types, a minimal implementation","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365687,"byte_end":365787,"line_start":12,"line_end":12,"column_start":1,"column_end":101}},{"value":"/   of the queue interface defined by [`PacketQueue`], [`Producer`] and [`Consumer`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":365788,"byte_end":365875,"line_start":13,"line_end":13,"column_start":1,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":1677},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366239,"byte_end":366250,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"PacketQueue","qualname":"::link::queue::PacketQueue","value":"PacketQueue","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680}],"decl_id":null,"docs":" A splittable SPSC queue for data channel PDUs.","sig":null,"attributes":[{"value":"/ A splittable SPSC queue for data channel PDUs.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366024,"byte_end":366074,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366075,"byte_end":366078,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must fit at least one data channel packet with a total size of","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366079,"byte_end":366175,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ [`MIN_DATA_PDU_BUF`] bytes (header and payload).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366176,"byte_end":366228,"line_start":23,"line_end":23,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1678},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366309,"byte_end":366317,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"Producer","qualname":"::link::queue::PacketQueue::Producer","value":"type Producer: Producer;","parent":{"krate":0,"index":1677},"children":[],"decl_id":null,"docs":" Producing (writing) half of the queue.\n","sig":null,"attributes":[{"value":"/ Producing (writing) half of the queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366257,"byte_end":366299,"line_start":25,"line_end":25,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1679},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366386,"byte_end":366394,"line_start":29,"line_end":29,"column_start":10,"column_end":18},"name":"Consumer","qualname":"::link::queue::PacketQueue::Consumer","value":"type Consumer: Consumer;","parent":{"krate":0,"index":1677},"children":[],"decl_id":null,"docs":" Consuming (reading) half of the queue.\n","sig":null,"attributes":[{"value":"/ Consuming (reading) half of the queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366334,"byte_end":366376,"line_start":28,"line_end":28,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367074,"byte_end":367079,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"split","qualname":"::link::queue::PacketQueue::split","value":"pub fn split(Self) -> (Self::Producer, Self::Consumer)","parent":{"krate":0,"index":1677},"children":[],"decl_id":null,"docs":" Splits the queue into its producing and consuming ends.","sig":null,"attributes":[{"value":"/ Splits the queue into its producing and consuming ends.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366411,"byte_end":366470,"line_start":31,"line_end":31,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366475,"byte_end":366478,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Note that this takes `self` by value, while many queue implementations provide a `split`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366483,"byte_end":366575,"line_start":33,"line_end":33,"column_start":5,"column_end":97}},{"value":"/ method that takes `&'a mut self` and returns producer and consumer types with lifetimes in","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366580,"byte_end":366674,"line_start":34,"line_end":34,"column_start":5,"column_end":99}},{"value":"/ them. These implementations still work with this interface, however: `PacketQueue` needs to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366679,"byte_end":366774,"line_start":35,"line_end":35,"column_start":5,"column_end":100}},{"value":"/ be implemented generically over a lifetime `'a`, for a self type `&'a mut OtherQueue`, then","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366779,"byte_end":366874,"line_start":36,"line_end":36,"column_start":5,"column_end":100}},{"value":"/ the associated `Producer` and `Consumer` types can make use of the lifetime `'a`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366879,"byte_end":366964,"line_start":37,"line_end":37,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366969,"byte_end":366972,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ For an example of that, see the provided impl for `&'a mut SimpleQueue` in this file.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":366977,"byte_end":367066,"line_start":39,"line_end":39,"column_start":5,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367188,"byte_end":367196,"line_start":44,"line_end":44,"column_start":11,"column_end":19},"name":"Producer","qualname":"::link::queue::Producer","value":"Producer","parent":null,"children":[{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684}],"decl_id":null,"docs":" The producing (writing) half of a packet queue.\n","sig":null,"attributes":[{"value":"/ The producing (writing) half of a packet queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367126,"byte_end":367177,"line_start":43,"line_end":43,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367738,"byte_end":367748,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"free_space","qualname":"::link::queue::Producer::free_space","value":"pub fn free_space(&Self) -> u8","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" Returns the largest payload size that can be successfully enqueued in the current state.","sig":null,"attributes":[{"value":"/ Returns the largest payload size that can be successfully enqueued in the current state.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367203,"byte_end":367295,"line_start":45,"line_end":45,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367300,"byte_end":367303,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ This is necessarily a conservative estimate, since the consumer half of the queue might","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367308,"byte_end":367399,"line_start":47,"line_end":47,"column_start":5,"column_end":96}},{"value":"/ remove a packet from the queue immediately after this function returns, creating more free","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367404,"byte_end":367498,"line_start":48,"line_end":48,"column_start":5,"column_end":99}},{"value":"/ space.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367503,"byte_end":367513,"line_start":49,"line_end":49,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367518,"byte_end":367521,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ After a call to this method, the next call to any of the `produce_*` methods must not fail","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367526,"byte_end":367620,"line_start":51,"line_end":51,"column_start":5,"column_end":99}},{"value":"/ when a `payload_bytes` value less than or equal to the returned free payload space is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367625,"byte_end":367714,"line_start":52,"line_end":52,"column_start":5,"column_end":94}},{"value":"/ passed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367719,"byte_end":367730,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368336,"byte_end":368347,"line_start":65,"line_end":65,"column_start":8,"column_end":19},"name":"produce_dyn","qualname":"::link::queue::Producer::produce_dyn","value":"pub fn produce_dyn(&mut Self, u8,\n                   &mut dyn FnMut(&mut ByteWriter) -> Result<Llid, Error>)\n-> Result<(), Error>","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" Enqueues a PDU with known size using a closure.","sig":null,"attributes":[{"value":"/ Enqueues a PDU with known size using a closure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367768,"byte_end":367819,"line_start":56,"line_end":56,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367824,"byte_end":367827,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ *This is an object-safe method complemented by its generic counterpart `produce_with`. Only","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367832,"byte_end":367927,"line_start":58,"line_end":58,"column_start":5,"column_end":100}},{"value":"/ this method need to be implemented.*","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367932,"byte_end":367972,"line_start":59,"line_end":59,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367977,"byte_end":367980,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ This will check if `payload_bytes` are available in the queue, and bail with `Error::Eof` if","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":367985,"byte_end":368081,"line_start":61,"line_end":61,"column_start":5,"column_end":101}},{"value":"/ not. If sufficient space is available, a `ByteWriter` with access to that space is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368086,"byte_end":368172,"line_start":62,"line_end":62,"column_start":5,"column_end":91}},{"value":"/ constructed and `f` is called. If `f` returns a successful result, the data is committed to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368177,"byte_end":368272,"line_start":63,"line_end":63,"column_start":5,"column_end":100}},{"value":"/ the queue. If not, the queue is left unchanged.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368277,"byte_end":368328,"line_start":64,"line_end":64,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368914,"byte_end":368926,"line_start":77,"line_end":77,"column_start":8,"column_end":20},"name":"produce_with","qualname":"::link::queue::Producer::produce_with","value":"pub fn produce_with<E,\n                    impl FnOnce(&mut ByteWriter<'_>) -> Result<Llid, E>: FnOnce(&mut ByteWriter)\n                    ->\n                    Result<Llid,\n                           E>>(&mut Self, u8,\n                               impl FnOnce(&mut ByteWriter<'_>) -> Result<Llid, E>)\n-> Result<(), E> where E: From<Error>, Self: Sized","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" Enqueues a PDU with known size using a closure.","sig":null,"attributes":[{"value":"/ Enqueues a PDU with known size using a closure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368499,"byte_end":368550,"line_start":71,"line_end":71,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368555,"byte_end":368558,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This will check if `payload_bytes` are available in the queue, and bail with `Error::Eof` if","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368563,"byte_end":368659,"line_start":73,"line_end":73,"column_start":5,"column_end":101}},{"value":"/ not. If sufficient space is available, a `ByteWriter` with access to that space is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368664,"byte_end":368750,"line_start":74,"line_end":74,"column_start":5,"column_end":91}},{"value":"/ constructed and `f` is called. If `f` returns a successful result, the data is committed to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368755,"byte_end":368850,"line_start":75,"line_end":75,"column_start":5,"column_end":100}},{"value":"/ the queue. If not, the queue is left unchanged.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":368855,"byte_end":368906,"line_start":76,"line_end":76,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1689},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":369867,"byte_end":369875,"line_start":110,"line_end":110,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::link::queue::Consumer","value":"Consumer","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1694}],"decl_id":null,"docs":" The consuming (reading) half of a packet queue.\n","sig":null,"attributes":[{"value":"/ The consuming (reading) half of a packet queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":369805,"byte_end":369856,"line_start":109,"line_end":109,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":369939,"byte_end":369947,"line_start":112,"line_end":112,"column_start":8,"column_end":16},"name":"has_data","qualname":"::link::queue::Consumer::has_data","value":"pub fn has_data(&Self) -> bool","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Returns whether there is a packet to dequeue.\n","sig":null,"attributes":[{"value":"/ Returns whether there is a packet to dequeue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":369882,"byte_end":369931,"line_start":111,"line_end":111,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370238,"byte_end":370254,"line_start":120,"line_end":120,"column_start":8,"column_end":24},"name":"consume_raw_with","qualname":"::link::queue::Consumer::consume_raw_with","value":"pub fn consume_raw_with<R,\n                        impl FnOnce(data::Header, &[u8]) -> Consume<R>: FnOnce(data::Header,\n                                                                               &[u8])\n                        ->\n                        Consume<R>>(&mut Self,\n                                    impl FnOnce(data::Header, &[u8]) -> Consume<R>)\n-> Result<R, Error>","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Passes the next raw packet in the queue to a closure.","sig":null,"attributes":[{"value":"/ Passes the next raw packet in the queue to a closure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":369969,"byte_end":370026,"line_start":114,"line_end":114,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370031,"byte_end":370034,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The closure returns a [`Consume`] value to indicate whether the packet should remain in the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370039,"byte_end":370134,"line_start":116,"line_end":116,"column_start":5,"column_end":100}},{"value":"/ queue or be removed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370139,"byte_end":370163,"line_start":117,"line_end":117,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370168,"byte_end":370171,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ If the queue is empty, [`Error::Eof`] is returned.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370176,"byte_end":370230,"line_start":119,"line_end":119,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370634,"byte_end":370650,"line_start":131,"line_end":131,"column_start":8,"column_end":24},"name":"consume_pdu_with","qualname":"::link::queue::Consumer::consume_pdu_with","value":"pub fn consume_pdu_with<R,\n                        impl FnOnce(data::Header, data::Pdu<'_, &[u8]>) -> Consume<R>: FnOnce(data::Header,\n                                                                                              data::Pdu<,\n                                                                                                        &[u8]>)\n                        ->\n                        Consume<R>>(&mut Self,\n                                    impl FnOnce(data::Header, data::Pdu<'_, &[u8]>) -> Consume<R>)\n-> Result<R, Error>","parent":{"krate":0,"index":1689},"children":[],"decl_id":null,"docs":" Passes the next packet in the queue to a closure.","sig":null,"attributes":[{"value":"/ Passes the next packet in the queue to a closure.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370369,"byte_end":370422,"line_start":125,"line_end":125,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370427,"byte_end":370430,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The closure returns a [`Consume`] value to indicate whether the packet should remain in the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370435,"byte_end":370530,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ queue or be removed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370535,"byte_end":370559,"line_start":128,"line_end":128,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370564,"byte_end":370567,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ If the queue is empty, [`Error::Eof`] is returned.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":370572,"byte_end":370626,"line_start":130,"line_end":130,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":3661},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371149,"byte_end":371156,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"Consume","qualname":"::link::queue::Consume","value":"Consume {  }","parent":null,"children":[{"krate":0,"index":3663},{"krate":0,"index":3664}],"decl_id":null,"docs":" Bundles a `T` along with information telling a queue whether to consume a packet.\n","sig":null,"attributes":[{"value":"/ Bundles a `T` along with information telling a queue whether to consume a packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371035,"byte_end":371120,"line_start":146,"line_end":146,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371347,"byte_end":371350,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"name":"new","qualname":"<Consume<T>>::new","value":"pub fn new(bool, Result<T, Error>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume the currently processed packet iff `consume` is `true`, then return `result`.\n","sig":null,"attributes":[{"value":"/ Consume the currently processed packet iff `consume` is `true`, then return `result`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371246,"byte_end":371335,"line_start":154,"line_end":154,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371572,"byte_end":371578,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"name":"always","qualname":"<Consume<T>>::always","value":"pub fn always(Result<T, Error>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume the currently processed packet, then return `result`.\n","sig":null,"attributes":[{"value":"/ Consume the currently processed packet, then return `result`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371495,"byte_end":371560,"line_start":162,"line_end":162,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371890,"byte_end":371895,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"never","qualname":"<Consume<T>>::never","value":"pub fn never(Result<T, Error>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Do not consume the currently processed packet, then return `result`.","sig":null,"attributes":[{"value":"/ Do not consume the currently processed packet, then return `result`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371705,"byte_end":371777,"line_start":170,"line_end":170,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371782,"byte_end":371785,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The next call to the `Consumer::consume_*` methods will yield the same packet again.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371790,"byte_end":371878,"line_start":172,"line_end":172,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372140,"byte_end":372150,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"on_success","qualname":"<Consume<T>>::on_success","value":"pub fn on_success(Result<T, Error>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume the currently processed packet if `result` indicates success, then return the\n result.\n","sig":null,"attributes":[{"value":"/ Consume the currently processed packet if `result` indicates success, then return the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372023,"byte_end":372112,"line_start":180,"line_end":180,"column_start":5,"column_end":94}},{"value":"/ result.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372117,"byte_end":372128,"line_start":181,"line_end":181,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372365,"byte_end":372379,"line_start":190,"line_end":190,"column_start":12,"column_end":26},"name":"should_consume","qualname":"<Consume<T>>::should_consume","value":"pub fn should_consume(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrieves whether the packet should be removed from the queue.\n","sig":null,"attributes":[{"value":"/ Retrieves whether the packet should be removed from the queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372287,"byte_end":372353,"line_start":189,"line_end":189,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372494,"byte_end":372500,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"result","qualname":"<Consume<T>>::result","value":"pub fn result(&Self) -> &Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a reference to the inner result.\n","sig":null,"attributes":[{"value":"/ Retrieves a reference to the inner result.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372436,"byte_end":372482,"line_start":194,"line_end":194,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372631,"byte_end":372642,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"into_result","qualname":"<Consume<T>>::into_result","value":"pub fn into_result(Self) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `consume`, retrieving the inner result.\n","sig":null,"attributes":[{"value":"/ Unwraps this `consume`, retrieving the inner result.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372563,"byte_end":372619,"line_start":199,"line_end":199,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1707},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372907,"byte_end":372918,"line_start":209,"line_end":209,"column_start":12,"column_end":23},"name":"SimpleQueue","qualname":"::link::queue::SimpleQueue","value":"SimpleQueue {  }","parent":null,"children":[{"krate":0,"index":1708}],"decl_id":null,"docs":" A simple packet queue that can hold a single packet.","sig":null,"attributes":[{"value":"/ A simple packet queue that can hold a single packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372700,"byte_end":372756,"line_start":205,"line_end":205,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372757,"byte_end":372760,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This type is compatible with thumbv6 cores, which lack atomic operations that might be needed","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372761,"byte_end":372858,"line_start":207,"line_end":207,"column_start":1,"column_end":98}},{"value":"/ for other queue implementations.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":372859,"byte_end":372895,"line_start":208,"line_end":208,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373115,"byte_end":373118,"line_start":216,"line_end":216,"column_start":18,"column_end":21},"name":"new","qualname":"<SimpleQueue>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty queue.\n","sig":null,"attributes":[{"value":"/ Creates a new, empty queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373066,"byte_end":373097,"line_start":215,"line_end":215,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373579,"byte_end":373593,"line_start":235,"line_end":235,"column_start":12,"column_end":26},"name":"SimpleProducer","qualname":"::link::queue::SimpleProducer","value":"SimpleProducer {  }","parent":null,"children":[{"krate":0,"index":1720}],"decl_id":null,"docs":" Producer (writer) half returned by `SimpleQueue::split`.\n","sig":null,"attributes":[{"value":"/ Producer (writer) half returned by `SimpleQueue::split`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373507,"byte_end":373567,"line_start":234,"line_end":234,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1729},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":374796,"byte_end":374810,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"SimpleConsumer","qualname":"::link::queue::SimpleConsumer","value":"SimpleConsumer {  }","parent":null,"children":[{"krate":0,"index":1731}],"decl_id":null,"docs":" Consumer (reader) half returned by `SimpleQueue::split`.\n","sig":null,"attributes":[{"value":"/ Consumer (reader) half returned by `SimpleQueue::split`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":374724,"byte_end":374784,"line_start":275,"line_end":275,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1741},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":376401,"byte_end":376410,"line_start":318,"line_end":318,"column_start":8,"column_end":17},"name":"run_tests","qualname":"::link::queue::run_tests","value":"pub fn run_tests<impl PacketQueue: PacketQueue>(impl PacketQueue)","parent":null,"children":[],"decl_id":null,"docs":" Runs Rubble's packet queue testsuite against the given `PacketQueue`.","sig":null,"attributes":[{"value":"/ Runs Rubble's packet queue testsuite against the given `PacketQueue`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":375716,"byte_end":375789,"line_start":307,"line_end":307,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":375790,"byte_end":375793,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ This can be used when implementing your own packet queue. Simply create a `#[test]` function as","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":375794,"byte_end":375893,"line_start":309,"line_end":309,"column_start":1,"column_end":100}},{"value":"/ usual and call `run_tests` from there. The function will panic when any test fails.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":375894,"byte_end":375981,"line_start":310,"line_end":310,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":375982,"byte_end":375985,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ The passed `queue` must be an empty queue with bounded space for at least one packet. \"Bounded\"","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":375986,"byte_end":376085,"line_start":312,"line_end":312,"column_start":1,"column_end":100}},{"value":"/ here means that the queue must have a finite, practical size as the test suite may fill it up","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":376086,"byte_end":376183,"line_start":313,"line_end":313,"column_start":1,"column_end":98}},{"value":"/ completely.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":376184,"byte_end":376199,"line_start":314,"line_end":314,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":376200,"byte_end":376203,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ Simultaneously, this function ensures that `PacketQueue` implementors can be used by a generic","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":376204,"byte_end":376302,"line_start":316,"line_end":316,"column_start":1,"column_end":99}},{"value":"/ function, something that sometimes doesn't work when invariant lifetimes are involved.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":376303,"byte_end":376393,"line_start":317,"line_end":317,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381117,"byte_end":381126,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"Responder","qualname":"::link::responder::Responder","value":"Responder {  }","parent":null,"children":[{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797}],"decl_id":null,"docs":" Data channel packet processor.","sig":null,"attributes":[{"value":"/ Data channel packet processor.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380584,"byte_end":380618,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380619,"byte_end":380622,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This hooks up to the Real-Time part of the LE Link Layer via a packet queue. This part can run","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380623,"byte_end":380721,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ at a lower priority (eg. being driven in the apps idle loop) and receives and transmits packets","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380722,"byte_end":380821,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/ using the packet queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380822,"byte_end":380849,"line_start":11,"line_end":11,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380850,"byte_end":380853,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Some *LL Control PDUs* sent as part of the Link Layer Control Protocol (LLCP) are answered by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380854,"byte_end":380951,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ the responder directly, and all L2CAP data is forwarded to an `L2CAPState<M>`. Note that most","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":380952,"byte_end":381049,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ LLCPDUs are handled directly by the real-time code.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381050,"byte_end":381105,"line_start":15,"line_end":15,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381364,"byte_end":381367,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<Responder<C>>::new","value":"pub fn new(ConfProducer<C>, ConfConsumer<C>, L2CAPState<C::ChannelMapper>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new packet processor hooked up to data channel packet queues.\n","sig":null,"attributes":[{"value":"/ Creates a new packet processor hooked up to data channel packet queues.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381277,"byte_end":381352,"line_start":23,"line_end":23,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381775,"byte_end":381783,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"has_work","qualname":"<Responder<C>>::has_work","value":"pub fn has_work(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` when this responder has work to do.","sig":null,"attributes":[{"value":"/ Returns `true` when this responder has work to do.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381585,"byte_end":381639,"line_start":36,"line_end":36,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381644,"byte_end":381647,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ If this returns `true`, `process` may be called to process incoming packets and send","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381652,"byte_end":381740,"line_start":38,"line_end":38,"column_start":5,"column_end":93}},{"value":"/ outgoing ones.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381745,"byte_end":381763,"line_start":39,"line_end":39,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":382018,"byte_end":382029,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"process_one","qualname":"<Responder<C>>::process_one","value":"pub fn process_one(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Processes a single incoming packet in the packet queue.","sig":null,"attributes":[{"value":"/ Processes a single incoming packet in the packet queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381860,"byte_end":381919,"line_start":44,"line_end":44,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381924,"byte_end":381927,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::Eof` if there are no incoming packets in the RX queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381932,"byte_end":382006,"line_start":46,"line_end":46,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":383716,"byte_end":383721,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"l2cap","qualname":"<Responder<C>>::l2cap","value":"pub fn l2cap(&mut Self) -> L2CAPStateTx<, C::ChannelMapper, ConfProducer<C>>","parent":null,"children":[],"decl_id":null,"docs":" Obtains access to the L2CAP instance.\n","sig":null,"attributes":[{"value":"/ Obtains access to the L2CAP instance.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":383663,"byte_end":383704,"line_start":85,"line_end":85,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3669},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384603,"byte_end":384609,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"SeqNum","qualname":"::link::seq_num::SeqNum","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 1-bit data packet sequence number.","sig":null,"attributes":[{"value":"/ A 1-bit data packet sequence number.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384343,"byte_end":384383,"line_start":4,"line_end":4,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384384,"byte_end":384387,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This type implements wrapping arithmetic (although only `+` and `+=` operators are supported)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384388,"byte_end":384485,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ matching the expected behaviour of the BLE Link Layer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384486,"byte_end":384544,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384694,"byte_end":384698,"line_start":13,"line_end":13,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::link::seq_num::SeqNum::ZERO","value":"Self","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" A sequence number of 0 (default value).\n","sig":null,"attributes":[{"value":"/ A sequence number of 0 (default value).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384636,"byte_end":384679,"line_start":12,"line_end":12,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384769,"byte_end":384772,"line_start":16,"line_end":16,"column_start":15,"column_end":18},"name":"ONE","qualname":"::link::seq_num::SeqNum::ONE","value":"Self","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" A sequence number of 1.\n","sig":null,"attributes":[{"value":"/ A sequence number of 1.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384727,"byte_end":384754,"line_start":15,"line_end":15,"column_start":5,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1894},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145452,"byte_end":145460,"line_start":158,"line_end":158,"column_start":11,"column_end":19},"name":"CRC_POLY","qualname":"::link::CRC_POLY","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The CRC polynomial to use for CRC24 generation.","sig":null,"attributes":[{"value":"/ The CRC polynomial to use for CRC24 generation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144834,"byte_end":144885,"line_start":146,"line_end":146,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144886,"byte_end":144889,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ If your radio has hardware support for CRC generation, you may use (parts of) this value to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144890,"byte_end":144985,"line_start":148,"line_end":148,"column_start":1,"column_end":96}},{"value":"/ configure it (if necessary). The CRC should be computed only over the PDU. Also note that the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144986,"byte_end":145083,"line_start":149,"line_end":149,"column_start":1,"column_end":98}},{"value":"/ CRC, unlike every other field, is transmitted MSb first.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145084,"byte_end":145144,"line_start":150,"line_end":150,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145145,"byte_end":145148,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Counting from the least-significant bit (bit 0), bit `k` in this value is set if the term `x^k`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145149,"byte_end":145248,"line_start":152,"line_end":152,"column_start":1,"column_end":100}},{"value":"/ occurs in the CRC polynomial. This includes bit 24, which is usually not explicitly specified.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145249,"byte_end":145347,"line_start":153,"line_end":153,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145348,"byte_end":145351,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Written out, the polynomial is:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145352,"byte_end":145387,"line_start":155,"line_end":155,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145388,"byte_end":145391,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ `x^24 + x^10 + x^9 + x^6 + x^4 + x^3 + x + 1`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145392,"byte_end":145441,"line_start":157,"line_end":157,"column_start":1,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145747,"byte_end":145767,"line_start":165,"line_end":165,"column_start":11,"column_end":31},"name":"MIN_DATA_PAYLOAD_BUF","qualname":"::link::MIN_DATA_PAYLOAD_BUF","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Min. size a data PDU payload buffer must have (assuming only the bare minimum PDU size is\n supported).","sig":null,"attributes":[{"value":"/ Min. size a data PDU payload buffer must have (assuming only the bare minimum PDU size is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145508,"byte_end":145601,"line_start":160,"line_end":160,"column_start":1,"column_end":94}},{"value":"/ supported).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145602,"byte_end":145617,"line_start":161,"line_end":161,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145618,"byte_end":145621,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ Data channel PDUs are smaller than advertising channel PDUs, so this value is less than","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145622,"byte_end":145713,"line_start":163,"line_end":163,"column_start":1,"column_end":92}},{"value":"/ `MIN_PAYLOAD_BUF`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145714,"byte_end":145736,"line_start":164,"line_end":164,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145922,"byte_end":145938,"line_start":170,"line_end":170,"column_start":11,"column_end":27},"name":"MIN_DATA_PDU_BUF","qualname":"::link::MIN_DATA_PDU_BUF","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Min. size a data PDU buffer must have.","sig":null,"attributes":[{"value":"/ Min. size a data PDU buffer must have.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145782,"byte_end":145824,"line_start":167,"line_end":167,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145825,"byte_end":145828,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ This is `MIN_DATA_PAYLOAD_BUF` plus the size of the data PDU header (2 Bytes).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145829,"byte_end":145911,"line_start":169,"line_end":169,"column_start":1,"column_end":83}}]},{"kind":"Const","id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146513,"byte_end":146528,"line_start":179,"line_end":179,"column_start":11,"column_end":26},"name":"MIN_PAYLOAD_BUF","qualname":"::link::MIN_PAYLOAD_BUF","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Min. size a PDU payload buffer must have (to cover both advertising and data channels).","sig":null,"attributes":[{"value":"/ Min. size a PDU payload buffer must have (to cover both advertising and data channels).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":145975,"byte_end":146066,"line_start":172,"line_end":172,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146067,"byte_end":146070,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ The Advertising PDU header has a length field that is limited to 37 octets, while data channel","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146071,"byte_end":146169,"line_start":174,"line_end":174,"column_start":1,"column_end":99}},{"value":"/ PDUs in Bluetooth 4.0 and 4.1 only have a 5-bit length field, limiting the user payload to 27","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146170,"byte_end":146267,"line_start":175,"line_end":175,"column_start":1,"column_end":98}},{"value":"/ octets (after subtracting the optional 4-Byte MIC). Bluetooth 4.2 added the optional Packet","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146268,"byte_end":146363,"line_start":176,"line_end":176,"column_start":1,"column_end":96}},{"value":"/ Length Extension, which allows data channel PDUs containing up to 251 user payload bytes,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146364,"byte_end":146457,"line_start":177,"line_end":177,"column_start":1,"column_end":94}},{"value":"/ however Rubble doesn't support that yet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146458,"byte_end":146502,"line_start":178,"line_end":178,"column_start":1,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146788,"byte_end":146799,"line_start":185,"line_end":185,"column_start":11,"column_end":22},"name":"MIN_PDU_BUF","qualname":"::link::MIN_PDU_BUF","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Min. size a Link-Layer PDU buffer must have (to cover both advertising and data channels).","sig":null,"attributes":[{"value":"/ Min. size a Link-Layer PDU buffer must have (to cover both advertising and data channels).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146543,"byte_end":146637,"line_start":181,"line_end":181,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146638,"byte_end":146641,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ Bluetooth 4.2 also allows exchanging larger PDUs using the Packet Length Extension, but Rubble","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146642,"byte_end":146740,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"/ does not currently support that.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146741,"byte_end":146777,"line_start":184,"line_end":184,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":147199,"byte_end":147213,"line_start":193,"line_end":193,"column_start":11,"column_end":25},"name":"MIN_PACKET_BUF","qualname":"::link::MIN_PACKET_BUF","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Min. size a buffer for Link-Layer packets must have to comply with the spec.","sig":null,"attributes":[{"value":"/ Min. size a buffer for Link-Layer packets must have to comply with the spec.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146851,"byte_end":146931,"line_start":187,"line_end":187,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146932,"byte_end":146935,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ The packet contains everything that ends up being transmitted over the air: Preamble, Access","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":146936,"byte_end":147032,"line_start":189,"line_end":189,"column_start":1,"column_end":97}},{"value":"/ Address, the actual PDU, and the CRC checksum.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":147033,"byte_end":147083,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":147084,"byte_end":147087,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ Bluetooth 4.2 also allows exchanging larger packets than this using the Packet Length Extension.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":147088,"byte_end":147188,"line_start":192,"line_end":192,"column_start":1,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148328,"byte_end":148337,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"LinkLayer","qualname":"::link::LinkLayer","value":"LinkLayer {  }","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917}],"decl_id":null,"docs":" Implementation of the real-time BLE Link-Layer logic.","sig":null,"attributes":[{"value":"/ Implementation of the real-time BLE Link-Layer logic.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148145,"byte_end":148202,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148203,"byte_end":148206,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Users of this struct must provide an interface to the platform's hardware by implementing","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148207,"byte_end":148300,"line_start":227,"line_end":227,"column_start":1,"column_end":94}},{"value":"/ [`Config`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148301,"byte_end":148316,"line_start":228,"line_end":228,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148789,"byte_end":148792,"line_start":244,"line_end":244,"column_start":12,"column_end":15},"name":"new","qualname":"<LinkLayer<C>>::new","value":"pub fn new(DeviceAddress, C::Timer) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Link-Layer.","sig":null,"attributes":[{"value":"/ Creates a new Link-Layer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148460,"byte_end":148489,"line_start":236,"line_end":236,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148494,"byte_end":148497,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148502,"byte_end":148518,"line_start":238,"line_end":238,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148523,"byte_end":148526,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ * **`dev_addr`**: The device address to broadcast as.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148531,"byte_end":148588,"line_start":240,"line_end":240,"column_start":5,"column_end":62}},{"value":"/ * **`timer`**: A `Timer` implementation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148593,"byte_end":148637,"line_start":241,"line_end":241,"column_start":5,"column_end":49}},{"value":"/ * **`tx`**: Input queue of packets to transmit when connected.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148642,"byte_end":148708,"line_start":242,"line_end":242,"column_start":5,"column_end":71}},{"value":"/ * **`rx`**: Output queue of received packets when connected.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148713,"byte_end":148777,"line_start":243,"line_end":243,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":149091,"byte_end":149096,"line_start":254,"line_end":254,"column_start":12,"column_end":17},"name":"timer","qualname":"<LinkLayer<C>>::timer","value":"pub fn timer(&mut Self) -> &mut C::Timer","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the timer instance used by the Link-Layer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the timer instance used by the Link-Layer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":149010,"byte_end":149079,"line_start":253,"line_end":253,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":149265,"byte_end":149280,"line_start":259,"line_end":259,"column_start":12,"column_end":27},"name":"start_advertise","qualname":"<LinkLayer<C>>::start_advertise","value":"pub fn start_advertise(&mut Self, Duration, &[AdStructure],\n                       &mut C::Transmitter, ConfConsumer<C>, ConfProducer<C>)\n-> Result<NextUpdate, Error>","parent":null,"children":[],"decl_id":null,"docs":" Starts advertising this device, optionally sending data along with the advertising PDU.\n","sig":null,"attributes":[{"value":"/ Starts advertising this device, optionally sending data along with the advertising PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":149162,"byte_end":149253,"line_start":258,"line_end":258,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150510,"byte_end":150528,"line_start":293,"line_end":293,"column_start":12,"column_end":30},"name":"process_adv_packet","qualname":"<LinkLayer<C>>::process_adv_packet","value":"pub fn process_adv_packet(&mut Self, Instant, &mut C::Transmitter,\n                          advertising::Header, &[u8], bool) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Process an incoming packet from an advertising channel.","sig":null,"attributes":[{"value":"/ Process an incoming packet from an advertising channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150011,"byte_end":150070,"line_start":282,"line_end":282,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150075,"byte_end":150078,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ The access address of the packet must be `ADVERTISING_ADDRESS`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150083,"byte_end":150150,"line_start":284,"line_end":284,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150155,"byte_end":150158,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150163,"byte_end":150179,"line_start":286,"line_end":286,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150184,"byte_end":150187,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ * **`rx_end`**: A timestamp indicating when the packet was fully received.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150192,"byte_end":150270,"line_start":288,"line_end":288,"column_start":5,"column_end":83}},{"value":"/ * **`tx`**: A packet transmitter.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150275,"byte_end":150312,"line_start":289,"line_end":289,"column_start":5,"column_end":42}},{"value":"/ * **`header`**: The header of the received packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150317,"byte_end":150371,"line_start":290,"line_end":290,"column_start":5,"column_end":59}},{"value":"/ * **`payload`**: The packet payload following the header.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150376,"byte_end":150437,"line_start":291,"line_end":291,"column_start":5,"column_end":66}},{"value":"/ * **`crc_ok`**: Whether the packet's CRC is correct.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":150442,"byte_end":150498,"line_start":292,"line_end":292,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":152946,"byte_end":152965,"line_start":358,"line_end":358,"column_start":12,"column_end":31},"name":"process_data_packet","qualname":"<LinkLayer<C>>::process_data_packet","value":"pub fn process_data_packet(&mut Self, Instant, &mut C::Transmitter,\n                           data::Header, &[u8], bool) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Process an incoming data channel packet.\n","sig":null,"attributes":[{"value":"/ Process an incoming data channel packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":152890,"byte_end":152934,"line_start":357,"line_end":357,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":154130,"byte_end":154142,"line_start":392,"line_end":392,"column_start":12,"column_end":24},"name":"update_timer","qualname":"<LinkLayer<C>>::update_timer","value":"pub fn update_timer(&mut Self, &mut C::Transmitter) -> Cmd","parent":null,"children":[],"decl_id":null,"docs":" Update the Link-Layer state after the timer expires.","sig":null,"attributes":[{"value":"/ Update the Link-Layer state after the timer expires.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":153871,"byte_end":153927,"line_start":385,"line_end":385,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":153932,"byte_end":153935,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This should be called whenever the timer set by the last returned `Cmd` has expired.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":153940,"byte_end":154028,"line_start":387,"line_end":387,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":154033,"byte_end":154036,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":154041,"byte_end":154057,"line_start":389,"line_end":389,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":154062,"byte_end":154065,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ * `tx`: A `Transmitter` for sending packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":154070,"byte_end":154118,"line_start":391,"line_end":391,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":155838,"byte_end":155848,"line_start":438,"line_end":438,"column_start":12,"column_end":22},"name":"connection","qualname":"<LinkLayer<C>>::connection","value":"pub fn connection(&Self) -> Option<&Connection<C>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the connection state.","sig":null,"attributes":[{"value":"/ Returns a reference to the connection state.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":155694,"byte_end":155742,"line_start":435,"line_end":435,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":155747,"byte_end":155750,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ If the Link Layer is not currently in a connection, returns `None`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":155755,"byte_end":155826,"line_start":437,"line_end":437,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1927},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156112,"byte_end":156126,"line_start":447,"line_end":447,"column_start":12,"column_end":26},"name":"is_advertising","qualname":"<LinkLayer<C>>::is_advertising","value":"pub fn is_advertising(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the Link-Layer is currently broadcasting advertisement packets.\n","sig":null,"attributes":[{"value":"/ Returns whether the Link-Layer is currently broadcasting advertisement packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156017,"byte_end":156100,"line_start":446,"line_end":446,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156281,"byte_end":156293,"line_start":452,"line_end":452,"column_start":12,"column_end":24},"name":"is_connected","qualname":"<LinkLayer<C>>::is_connected","value":"pub fn is_connected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the Link-Layer is currently connected.\n","sig":null,"attributes":[{"value":"/ Returns whether the Link-Layer is currently connected.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156211,"byte_end":156269,"line_start":451,"line_end":451,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":3685},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156574,"byte_end":156577,"line_start":462,"line_end":462,"column_start":12,"column_end":15},"name":"Cmd","qualname":"::link::Cmd","value":"Cmd { radio, next_update, queued_work }","parent":null,"children":[{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688}],"decl_id":null,"docs":" Command returned by the Link-Layer to the user.","sig":null,"attributes":[{"value":"/ Command returned by the Link-Layer to the user.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156375,"byte_end":156426,"line_start":457,"line_end":457,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156427,"byte_end":156430,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ Specifies how the radio should be configured and when/if to call `LinkLayer::update` again.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156431,"byte_end":156526,"line_start":459,"line_end":459,"column_start":1,"column_end":96}},{"value":"must_use","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156527,"byte_end":156538,"line_start":460,"line_end":460,"column_start":1,"column_end":12}}]},{"kind":"Field","id":{"krate":0,"index":3686},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156625,"byte_end":156630,"line_start":464,"line_end":464,"column_start":9,"column_end":14},"name":"radio","qualname":"::link::Cmd::radio","value":"link::RadioCmd","parent":{"krate":0,"index":3685},"children":[],"decl_id":null,"docs":" Radio configuration request.\n","sig":null,"attributes":[{"value":"/ Radio configuration request.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156584,"byte_end":156616,"line_start":463,"line_end":463,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":3687},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156830,"byte_end":156841,"line_start":470,"line_end":470,"column_start":9,"column_end":20},"name":"next_update","qualname":"::link::Cmd::next_update","value":"link::NextUpdate","parent":{"krate":0,"index":3685},"children":[],"decl_id":null,"docs":" Time until `LinkLayer::update` should be called.","sig":null,"attributes":[{"value":"/ Time until `LinkLayer::update` should be called.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156647,"byte_end":156699,"line_start":466,"line_end":466,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156704,"byte_end":156707,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ If this is `None`, `update` doesn't need to be called because the Link-Layer is in Standby","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156712,"byte_end":156806,"line_start":468,"line_end":468,"column_start":5,"column_end":99}},{"value":"/ state.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156811,"byte_end":156821,"line_start":469,"line_end":469,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":3688},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157193,"byte_end":157204,"line_start":477,"line_end":477,"column_start":9,"column_end":20},"name":"queued_work","qualname":"::link::Cmd::queued_work","value":"bool","parent":{"krate":0,"index":3685},"children":[],"decl_id":null,"docs":" Whether the Link-Layer code has enqueued more work into the packet queue.","sig":null,"attributes":[{"value":"/ Whether the Link-Layer code has enqueued more work into the packet queue.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156860,"byte_end":156937,"line_start":472,"line_end":472,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156942,"byte_end":156945,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ If this is `true`, the caller needs to ensure that the queue is drained and processed by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":156950,"byte_end":157042,"line_start":474,"line_end":474,"column_start":5,"column_end":97}},{"value":"/ calling the `Responder`. The apps idle loop might unconditionally do that, in which case","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157047,"byte_end":157139,"line_start":475,"line_end":475,"column_start":5,"column_end":97}},{"value":"/ checking this flag is not necessary.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157144,"byte_end":157184,"line_start":476,"line_end":476,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3694},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157397,"byte_end":157404,"line_start":484,"line_end":484,"column_start":5,"column_end":12},"name":"Disable","qualname":"::link::NextUpdate::Disable","value":"NextUpdate::Disable","parent":{"krate":0,"index":3693},"children":[],"decl_id":null,"docs":" Disable timer and do not call `update`.\n","sig":null,"attributes":[{"value":"/ Disable timer and do not call `update`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157349,"byte_end":157392,"line_start":483,"line_end":483,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3696},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157456,"byte_end":157460,"line_start":487,"line_end":487,"column_start":5,"column_end":9},"name":"Keep","qualname":"::link::NextUpdate::Keep","value":"NextUpdate::Keep","parent":{"krate":0,"index":3693},"children":[],"decl_id":null,"docs":" Keep the previously configured time.\n","sig":null,"attributes":[{"value":"/ Keep the previously configured time.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157411,"byte_end":157451,"line_start":486,"line_end":486,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3698},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157606,"byte_end":157608,"line_start":492,"line_end":492,"column_start":5,"column_end":7},"name":"At","qualname":"::link::NextUpdate::At","value":"NextUpdate::At(Instant)","parent":{"krate":0,"index":3693},"children":[],"decl_id":null,"docs":" Call `update` at the given `Instant`.","sig":null,"attributes":[{"value":"/ Call `update` at the given `Instant`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157467,"byte_end":157508,"line_start":489,"line_end":489,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157513,"byte_end":157516,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ If `Instant` is in the past, this is a bug and the implementation may panic.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157521,"byte_end":157601,"line_start":491,"line_end":491,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":3693},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157332,"byte_end":157342,"line_start":482,"line_end":482,"column_start":10,"column_end":20},"name":"NextUpdate","qualname":"::link::NextUpdate","value":"pub enum NextUpdate { Disable, Keep, At(Instant), }","parent":null,"children":[{"krate":0,"index":3694},{"krate":0,"index":3696},{"krate":0,"index":3698}],"decl_id":null,"docs":" Specifies when the Link Layer's `update` method should be called the next time.\n","sig":null,"attributes":[{"value":"/ Specifies when the Link Layer's `update` method should be called the next time.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157215,"byte_end":157298,"line_start":480,"line_end":480,"column_start":1,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3706},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158012,"byte_end":158015,"line_start":503,"line_end":503,"column_start":5,"column_end":8},"name":"Off","qualname":"::link::RadioCmd::Off","value":"RadioCmd::Off","parent":{"krate":0,"index":3705},"children":[],"decl_id":null,"docs":" Turn the radio off and don't call `LinkLayer::process_*` methods.","sig":null,"attributes":[{"value":"/ Turn the radio off and don't call `LinkLayer::process_*` methods.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157839,"byte_end":157908,"line_start":500,"line_end":500,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157913,"byte_end":157916,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ `LinkLayer::update` must still be called according to `Cmd`'s `next_update` field.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157921,"byte_end":158007,"line_start":502,"line_end":502,"column_start":5,"column_end":91}}]},{"kind":"StructVariant","id":{"krate":0,"index":3708},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158141,"byte_end":158158,"line_start":507,"line_end":507,"column_start":5,"column_end":22},"name":"ListenAdvertising","qualname":"::link::RadioCmd::ListenAdvertising","value":"RadioCmd::ListenAdvertising { channel }","parent":{"krate":0,"index":3705},"children":[],"decl_id":null,"docs":" Listen on an advertising channel. If a packet is received, pass it to\n `LinkLayer::process_adv_packet`.\n","sig":null,"attributes":[{"value":"/ Listen on an advertising channel. If a packet is received, pass it to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158022,"byte_end":158095,"line_start":505,"line_end":505,"column_start":5,"column_end":78}},{"value":"/ `LinkLayer::process_adv_packet`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158100,"byte_end":158136,"line_start":506,"line_end":506,"column_start":5,"column_end":41}}]},{"kind":"StructVariant","id":{"krate":0,"index":3710},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158381,"byte_end":158391,"line_start":514,"line_end":514,"column_start":5,"column_end":15},"name":"ListenData","qualname":"::link::RadioCmd::ListenData","value":"RadioCmd::ListenData { channel, access_address, crc_init, timeout }","parent":{"krate":0,"index":3705},"children":[],"decl_id":null,"docs":" Listen on a data channel. If a matching packet is received, pass it to\n `LinkLayer::process_data_packet`.\n","sig":null,"attributes":[{"value":"/ Listen on a data channel. If a matching packet is received, pass it to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158260,"byte_end":158334,"line_start":512,"line_end":512,"column_start":5,"column_end":79}},{"value":"/ `LinkLayer::process_data_packet`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158339,"byte_end":158376,"line_start":513,"line_end":513,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":3705},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157824,"byte_end":157832,"line_start":499,"line_end":499,"column_start":10,"column_end":18},"name":"RadioCmd","qualname":"::link::RadioCmd","value":"pub enum RadioCmd {\n    Off,\n    ListenAdvertising {\n        channel: AdvertisingChannel,\n    },\n    ListenData {\n        channel: DataChannel,\n        access_address: u32,\n        crc_init: u32,\n        timeout: bool,\n    },\n}","parent":null,"children":[{"krate":0,"index":3706},{"krate":0,"index":3708},{"krate":0,"index":3710}],"decl_id":null,"docs":" Specifies if and how the radio should listen for transmissions.","sig":null,"attributes":[{"value":"/ Specifies if and how the radio should listen for transmissions.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157622,"byte_end":157689,"line_start":495,"line_end":495,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157690,"byte_end":157693,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ Returned by the Link-Layer update and processing methods to reconfigure the radio as needed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":157694,"byte_end":157790,"line_start":497,"line_end":497,"column_start":1,"column_end":97}}]},{"kind":"Trait","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159281,"byte_end":159292,"line_start":539,"line_end":539,"column_start":11,"column_end":22},"name":"Transmitter","qualname":"::link::Transmitter","value":"Transmitter","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932}],"decl_id":null,"docs":" Trait for Link Layer packet transmission.","sig":null,"attributes":[{"value":"/ Trait for Link Layer packet transmission.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":158989,"byte_end":159034,"line_start":534,"line_end":534,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159035,"byte_end":159038,"line_start":535,"line_end":535,"column_start":1,"column_end":4}},{"value":"/ The specifics of sending a Link-Layer packet depend on the underlying hardware. The `link`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159039,"byte_end":159133,"line_start":536,"line_end":536,"column_start":1,"column_end":95}},{"value":"/ module provides building blocks that enable implementations without any BLE hardware support,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159134,"byte_end":159231,"line_start":537,"line_end":537,"column_start":1,"column_end":98}},{"value":"/ just a compatible radio is needed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159232,"byte_end":159270,"line_start":538,"line_end":538,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160036,"byte_end":160050,"line_start":552,"line_end":552,"column_start":8,"column_end":22},"name":"tx_payload_buf","qualname":"::link::Transmitter::tx_payload_buf","value":"pub fn tx_payload_buf(&mut Self) -> &mut [u8]","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Get a reference to the Transmitter's PDU payload buffer.","sig":null,"attributes":[{"value":"/ Get a reference to the Transmitter's PDU payload buffer.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159299,"byte_end":159359,"line_start":540,"line_end":540,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159364,"byte_end":159367,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ The buffer must hold at least 37 Bytes, as that is the maximum length of advertising channel","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159372,"byte_end":159468,"line_start":542,"line_end":542,"column_start":5,"column_end":101}},{"value":"/ payloads. While data channel payloads can be up to 251 Bytes in length (resulting in a","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159473,"byte_end":159563,"line_start":543,"line_end":543,"column_start":5,"column_end":95}},{"value":"/ \"length\" field of 255 with the MIC), devices are allowed to use smaller buffers and report","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159568,"byte_end":159662,"line_start":544,"line_end":544,"column_start":5,"column_end":99}},{"value":"/ the supported payload length.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159667,"byte_end":159700,"line_start":545,"line_end":545,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159705,"byte_end":159708,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Both advertising and data channel packets also use an additional 2-Byte header preceding","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159713,"byte_end":159805,"line_start":547,"line_end":547,"column_start":5,"column_end":97}},{"value":"/ this payload.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159810,"byte_end":159827,"line_start":548,"line_end":548,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159832,"byte_end":159835,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ This buffer must not be changed. The BLE stack relies on the buffer to retain its old","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159840,"byte_end":159929,"line_start":550,"line_end":550,"column_start":5,"column_end":94}},{"value":"/ contents after transmitting a packet. A separate buffer must be used for received packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":159934,"byte_end":160028,"line_start":551,"line_end":551,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160761,"byte_end":160781,"line_start":567,"line_end":567,"column_start":8,"column_end":28},"name":"transmit_advertising","qualname":"::link::Transmitter::transmit_advertising","value":"pub fn transmit_advertising(&mut Self, advertising::Header,\n                            AdvertisingChannel)","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Transmit an Advertising Channel PDU.","sig":null,"attributes":[{"value":"/ Transmit an Advertising Channel PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160081,"byte_end":160121,"line_start":554,"line_end":554,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160126,"byte_end":160129,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ For Advertising Channel PDUs, the CRC initialization value is always `CRC_PRESET`, and the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160134,"byte_end":160228,"line_start":556,"line_end":556,"column_start":5,"column_end":99}},{"value":"/ Access Address is always `ADVERTISING_ADDRESS`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160233,"byte_end":160284,"line_start":557,"line_end":557,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160289,"byte_end":160292,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ The implementor is expected to send the preamble and access address, and assemble the rest","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160297,"byte_end":160391,"line_start":559,"line_end":559,"column_start":5,"column_end":99}},{"value":"/ of the packet, and must apply data whitening and do the CRC calculation. The inter-frame","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160396,"byte_end":160488,"line_start":560,"line_end":560,"column_start":5,"column_end":97}},{"value":"/ spacing also has to be upheld by the implementor (`T_IFS`).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160493,"byte_end":160556,"line_start":561,"line_end":561,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160561,"byte_end":160564,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160569,"byte_end":160585,"line_start":563,"line_end":563,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160590,"byte_end":160593,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ * `header`: Advertising Channel PDU Header to prepend to the Payload in `payload_buf()`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160598,"byte_end":160690,"line_start":565,"line_end":565,"column_start":5,"column_end":97}},{"value":"/ * `channel`: Advertising Channel Index to transmit on.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160695,"byte_end":160753,"line_start":566,"line_end":566,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161416,"byte_end":161429,"line_start":580,"line_end":580,"column_start":8,"column_end":21},"name":"transmit_data","qualname":"::link::Transmitter::transmit_data","value":"pub fn transmit_data(&mut Self, u32, u32, data::Header, DataChannel)","parent":{"krate":0,"index":1929},"children":[],"decl_id":null,"docs":" Transmit a Data Channel PDU.","sig":null,"attributes":[{"value":"/ Transmit a Data Channel PDU.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160857,"byte_end":160889,"line_start":569,"line_end":569,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160894,"byte_end":160897,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ The implementor is expected to send the preamble and assemble the rest of the packet, and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":160902,"byte_end":160995,"line_start":571,"line_end":571,"column_start":5,"column_end":98}},{"value":"/ must apply data whitening and do the CRC calculation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161000,"byte_end":161057,"line_start":572,"line_end":572,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161062,"byte_end":161065,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161070,"byte_end":161086,"line_start":574,"line_end":574,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161091,"byte_end":161094,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ * `access_address`: The Access Address of the Link-Layer packet.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161099,"byte_end":161167,"line_start":576,"line_end":576,"column_start":5,"column_end":73}},{"value":"/ * `crc_iv`: CRC calculation initial value (`CRC_PRESET` for advertising channel).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161172,"byte_end":161257,"line_start":577,"line_end":577,"column_start":5,"column_end":90}},{"value":"/ * `header`: Data Channel PDU Header to be prepended to the Payload in `payload_buf()`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161262,"byte_end":161352,"line_start":578,"line_end":578,"column_start":5,"column_end":95}},{"value":"/ * `channel`: Data Channel Index to transmit on.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":161357,"byte_end":161408,"line_start":579,"line_end":579,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"phy","qualname":"::phy","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":3719},{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3727},{"krate":0,"index":1936},{"krate":0,"index":3730},{"krate":0,"index":3733},{"krate":0,"index":3734},{"krate":0,"index":3736},{"krate":0,"index":3738},{"krate":0,"index":3739},{"krate":0,"index":3742},{"krate":0,"index":3743},{"krate":0,"index":3745},{"krate":0,"index":1945},{"krate":0,"index":1951}],"decl_id":null,"docs":" Physical layer interactions.","sig":null,"attributes":[{"value":"/ Physical layer interactions.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":385828,"byte_end":385860,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":385861,"byte_end":385864,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Don't expect to see much code here: Most of this layer is hardware.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":385865,"byte_end":385936,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":385937,"byte_end":385940,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ BLE data is transmitted on 40 different RF channels numbered from 0 to 39 with ascending","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":385941,"byte_end":386033,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ frequencies. Channels 0, 12 and 39 are reserved for advertising, all others are used for data","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386034,"byte_end":386131,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ transmission. BLE internally uses so-called \"Channel Indices\" which reorder the RF channels so","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386132,"byte_end":386230,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ that indices 0..=36 refer to data channels and 37..=39 refer to the advertising channels","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386231,"byte_end":386323,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ (presumably to simplify channel hopping). The Link-Layer is only interested in these channel","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386324,"byte_end":386420,"line_start":9,"line_end":9,"column_start":1,"column_end":97}},{"value":"/ indices, so only those are implemented here.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386421,"byte_end":386469,"line_start":10,"line_end":10,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3719},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386940,"byte_end":386958,"line_start":25,"line_end":25,"column_start":12,"column_end":30},"name":"AdvertisingChannel","qualname":"::phy::AdvertisingChannel","value":"","parent":null,"children":[],"decl_id":null,"docs":" One of the three advertising channels (channel indices 37, 38 or 39).\n","sig":null,"attributes":[{"value":"/ One of the three advertising channels (channel indices 37, 38 or 39).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386810,"byte_end":386883,"line_start":23,"line_end":23,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387067,"byte_end":387072,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"first","qualname":"<AdvertisingChannel>::first","value":"pub fn first() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the first (lowest-numbered) advertising channel.\n","sig":null,"attributes":[{"value":"/ Returns the first (lowest-numbered) advertising channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386995,"byte_end":387055,"line_start":28,"line_end":28,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387221,"byte_end":387229,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"iter_all","qualname":"<AdvertisingChannel>::iter_all","value":"pub fn iter_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that yields all 3 advertising channels in ascending order.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that yields all 3 advertising channels in ascending order.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387127,"byte_end":387209,"line_start":33,"line_end":33,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387538,"byte_end":387543,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"cycle","qualname":"<AdvertisingChannel>::cycle","value":"pub fn cycle(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the next advertising channel, or the first one if `self` is the last channel.\n","sig":null,"attributes":[{"value":"/ Returns the next advertising channel, or the first one if `self` is the last channel.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387437,"byte_end":387526,"line_start":44,"line_end":44,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1941},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387810,"byte_end":387817,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"channel","qualname":"<AdvertisingChannel>::channel","value":"pub fn channel(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the channel index.","sig":null,"attributes":[{"value":"/ Returns the channel index.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387703,"byte_end":387733,"line_start":53,"line_end":53,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387738,"byte_end":387741,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Channels 37, 38 and 39 are used for advertising.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387746,"byte_end":387798,"line_start":55,"line_end":55,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388022,"byte_end":388032,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"rf_channel","qualname":"<AdvertisingChannel>::rf_channel","value":"pub fn rf_channel(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the physical RF channel corresponding to this advertising channel index.","sig":null,"attributes":[{"value":"/ Returns the physical RF channel corresponding to this advertising channel index.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387859,"byte_end":387943,"line_start":60,"line_end":60,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387948,"byte_end":387951,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ RF channels 0, 12 and 39 are used for advertising.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":387956,"byte_end":388010,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388258,"byte_end":388262,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"freq","qualname":"<AdvertisingChannel>::freq","value":"pub fn freq(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the center frequency of this channel in MHz.\n","sig":null,"attributes":[{"value":"/ Returns the center frequency of this channel in MHz.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388190,"byte_end":388246,"line_start":72,"line_end":72,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388737,"byte_end":388749,"line_start":85,"line_end":85,"column_start":12,"column_end":24},"name":"whitening_iv","qualname":"<AdvertisingChannel>::whitening_iv","value":"pub fn whitening_iv(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Calculates the initial value of the LFSR to use for data whitening.","sig":null,"attributes":[{"value":"/ Calculates the initial value of the LFSR to use for data whitening.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388333,"byte_end":388404,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388409,"byte_end":388412,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ The value is a 7-bit value. The MSb will always be 0, and the 2nd MSb always 1 (Position 0).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388417,"byte_end":388513,"line_start":79,"line_end":79,"column_start":5,"column_end":101}},{"value":"/ The LSb contains Position 6. Refer to the specification for details about the bit positions.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388518,"byte_end":388614,"line_start":80,"line_end":80,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388619,"byte_end":388622,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ The polynomial is always `x^7 + x^4 + 1`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388627,"byte_end":388672,"line_start":82,"line_end":82,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388677,"byte_end":388680,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Whitening is applied to PDU and CRC.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388685,"byte_end":388725,"line_start":84,"line_end":84,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3730},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388998,"byte_end":389009,"line_start":94,"line_end":94,"column_start":12,"column_end":23},"name":"DataChannel","qualname":"::phy::DataChannel","value":"","parent":null,"children":[],"decl_id":null,"docs":" One of 37 data channels on which data channel PDUs are sent between connected devices.","sig":null,"attributes":[{"value":"/ One of 37 data channels on which data channel PDUs are sent between connected devices.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388803,"byte_end":388893,"line_start":90,"line_end":90,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388894,"byte_end":388897,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ (channel indices 0..=36)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":388898,"byte_end":388926,"line_start":92,"line_end":92,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389225,"byte_end":389228,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<DataChannel>::new","value":"pub fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `DataChannel` from a raw index.","sig":null,"attributes":[{"value":"/ Creates a `DataChannel` from a raw index.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389039,"byte_end":389084,"line_start":97,"line_end":97,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389089,"byte_end":389092,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389097,"byte_end":389109,"line_start":99,"line_end":99,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389114,"byte_end":389117,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This will panic if `index` is not a valid data channel index. Valid indices are 0..=36.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389122,"byte_end":389213,"line_start":101,"line_end":101,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1947},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389427,"byte_end":389432,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"index","qualname":"<DataChannel>::index","value":"pub fn index(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the data channel index.","sig":null,"attributes":[{"value":"/ Returns the data channel index.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389318,"byte_end":389353,"line_start":107,"line_end":107,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389358,"byte_end":389361,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ The returned value is always in range 0..=36.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389366,"byte_end":389415,"line_start":109,"line_end":109,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389629,"byte_end":389639,"line_start":117,"line_end":117,"column_start":12,"column_end":22},"name":"rf_channel","qualname":"<DataChannel>::rf_channel","value":"pub fn rf_channel(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the RF channel corresponding to this data channel index.","sig":null,"attributes":[{"value":"/ Returns the RF channel corresponding to this data channel index.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389474,"byte_end":389542,"line_start":114,"line_end":114,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389547,"byte_end":389550,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ RF channels 1-11 and 13-38 are used for data transmission.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389555,"byte_end":389617,"line_start":116,"line_end":116,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389871,"byte_end":389875,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"freq","qualname":"<DataChannel>::freq","value":"pub fn freq(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the center frequency of this channel in MHz.\n","sig":null,"attributes":[{"value":"/ Returns the center frequency of this channel in MHz.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389803,"byte_end":389859,"line_start":125,"line_end":125,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1950},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390350,"byte_end":390362,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"whitening_iv","qualname":"<DataChannel>::whitening_iv","value":"pub fn whitening_iv(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Calculates the initial value of the LFSR to use for data whitening.","sig":null,"attributes":[{"value":"/ Calculates the initial value of the LFSR to use for data whitening.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389946,"byte_end":390017,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390022,"byte_end":390025,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ The value is a 7-bit value. The MSb will always be 0, and the 2nd MSb always 1 (Position 0).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390030,"byte_end":390126,"line_start":132,"line_end":132,"column_start":5,"column_end":101}},{"value":"/ The LSb contains Position 6. Refer to the specification for details about the bit positions.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390131,"byte_end":390227,"line_start":133,"line_end":133,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390232,"byte_end":390235,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ The polynomial is always `x^7 + x^4 + 1`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390240,"byte_end":390285,"line_start":135,"line_end":135,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390290,"byte_end":390293,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Whitening is applied to PDU and CRC.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390298,"byte_end":390338,"line_start":137,"line_end":137,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390687,"byte_end":390692,"line_start":148,"line_end":148,"column_start":11,"column_end":16},"name":"Radio","qualname":"::phy::Radio","value":"Radio","parent":null,"children":[{"krate":0,"index":1952}],"decl_id":null,"docs":" Trait for raw 2.4 GHz non-BLE-specific radios.","sig":null,"attributes":[{"value":"/ Trait for raw 2.4 GHz non-BLE-specific radios.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390416,"byte_end":390466,"line_start":143,"line_end":143,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390467,"byte_end":390470,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ You probably won't need to implement this trait, unless you're working with hardware that has","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390471,"byte_end":390568,"line_start":145,"line_end":145,"column_start":1,"column_end":98}},{"value":"/ absolutely no special support for BLE. Usually, the Link-Layer `Transmitter` should be","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390569,"byte_end":390659,"line_start":146,"line_end":146,"column_start":1,"column_end":91}},{"value":"/ implemented.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390660,"byte_end":390676,"line_start":147,"line_end":147,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390833,"byte_end":390841,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"transmit","qualname":"::phy::Radio::transmit","value":"pub fn transmit(&mut Self, &mut [u8], u16)","parent":{"krate":0,"index":1951},"children":[],"decl_id":null,"docs":" Transmit every Byte in `buf` over the air, LSb first, at `freq` MHz.","sig":null,"attributes":[{"value":"/ Transmit every Byte in `buf` over the air, LSb first, at `freq` MHz.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390699,"byte_end":390771,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390776,"byte_end":390779,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ TODO: Document all radio requirements","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":390784,"byte_end":390825,"line_start":151,"line_end":151,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1953},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"security","qualname":"::security","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":3748},{"krate":0,"index":3750},{"krate":0,"index":1983},{"krate":0,"index":3752},{"krate":0,"index":3754},{"krate":0,"index":1985},{"krate":0,"index":3756},{"krate":0,"index":3759},{"krate":0,"index":1987},{"krate":0,"index":1989},{"krate":0,"index":1992},{"krate":0,"index":3762},{"krate":0,"index":3769},{"krate":0,"index":3771},{"krate":0,"index":3772},{"krate":0,"index":3774},{"krate":0,"index":3780},{"krate":0,"index":3786},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3799},{"krate":0,"index":1995},{"krate":0,"index":3809},{"krate":0,"index":3841},{"krate":0,"index":3843},{"krate":0,"index":3844},{"krate":0,"index":3802},{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3853},{"krate":0,"index":3867},{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3872},{"krate":0,"index":3846},{"krate":0,"index":3848},{"krate":0,"index":3850},{"krate":0,"index":3888},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3901},{"krate":0,"index":3881},{"krate":0,"index":3883},{"krate":0,"index":3885},{"krate":0,"index":3907},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":1998},{"krate":0,"index":2011},{"krate":0,"index":2013},{"krate":0,"index":3920},{"krate":0,"index":3928},{"krate":0,"index":3930},{"krate":0,"index":3931},{"krate":0,"index":3933},{"krate":0,"index":3913},{"krate":0,"index":3915},{"krate":0,"index":3917},{"krate":0,"index":3939},{"krate":0,"index":3941},{"krate":0,"index":3942},{"krate":0,"index":3943},{"krate":0,"index":3946},{"krate":0,"index":3947},{"krate":0,"index":3949},{"krate":0,"index":3951},{"krate":0,"index":3953},{"krate":0,"index":3955},{"krate":0,"index":3958},{"krate":0,"index":3966},{"krate":0,"index":3968},{"krate":0,"index":3970},{"krate":0,"index":3972},{"krate":0,"index":3974},{"krate":0,"index":3998},{"krate":0,"index":4001},{"krate":0,"index":4003},{"krate":0,"index":4006},{"krate":0,"index":4008},{"krate":0,"index":4011},{"krate":0,"index":4013},{"krate":0,"index":4016},{"krate":0,"index":4018},{"krate":0,"index":4021},{"krate":0,"index":4024},{"krate":0,"index":2016}],"decl_id":null,"docs":" The LE Security Manager protocol.","sig":null,"attributes":[{"value":"/ The LE Security Manager protocol.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":390884,"byte_end":390921,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":390922,"byte_end":390925,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The Security Manager is a mandatory part of BLE and is connected to L2CAP channel `0x0006` when","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":390926,"byte_end":391025,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ the Link-Layer connection is established.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391026,"byte_end":391071,"line_start":4,"line_end":4,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391072,"byte_end":391075,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # BLE Security","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391076,"byte_end":391094,"line_start":6,"line_end":6,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391095,"byte_end":391098,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ As is tradition, BLE security is a complexity nightmare. This section hopes to clear up a few","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391099,"byte_end":391196,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ things and tries to define terms used throughout the code and specficiation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391197,"byte_end":391277,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391278,"byte_end":391281,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Pairing and Bonding","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391282,"byte_end":391308,"line_start":11,"line_end":11,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391309,"byte_end":391312,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ * **Pairing** is the process of generating and exchanging connection-specific keys in order to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391313,"byte_end":391411,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/   accomplish an encrypted Link-Layer connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391412,"byte_end":391464,"line_start":14,"line_end":14,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391465,"byte_end":391468,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/   This is done by having the *Security Managers* of the devices talk to each other to perform","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391469,"byte_end":391566,"line_start":16,"line_end":16,"column_start":1,"column_end":98}},{"value":"/   the key exchange, and then using *LL Control PDUs* to enable the negotiated encryption","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391567,"byte_end":391659,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/   parameters.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391660,"byte_end":391677,"line_start":18,"line_end":18,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391678,"byte_end":391681,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ * **Bonding** means permanently storing the shared keys derived by *Pairing* in order to reuse","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391682,"byte_end":391780,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/   them for later connections.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391781,"byte_end":391814,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391815,"byte_end":391818,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/   The way keys are stored is inherently platform- and application-dependent, we just have to","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391819,"byte_end":391915,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/   provide interfaces to export and import key sets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391916,"byte_end":391971,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391972,"byte_end":391975,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Most times, when talking about *pairing*, the *bonding* part is implied. If it were not, you","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":391976,"byte_end":392072,"line_start":26,"line_end":26,"column_start":1,"column_end":97}},{"value":"/ would constantly have to re-pair devices when reconnecting them.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392073,"byte_end":392141,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392142,"byte_end":392145,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ## LE Legacy Pairing vs. LE Secure Connections","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392146,"byte_end":392196,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392197,"byte_end":392200,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Bluetooth's security track record is an actual record in that it is so atrociously bad that this","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392201,"byte_end":392301,"line_start":31,"line_end":31,"column_start":1,"column_end":101}},{"value":"/ protocol should have never seen the light of the day. Alas, here we are.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392302,"byte_end":392378,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392379,"byte_end":392382,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ LE security is generally able to utilize *AES-128-CCM* for encryption, which isn't broken by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392383,"byte_end":392479,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ itself (unlike the \"export-grade\" encryption used by earlier Bluetooth versions). However, the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392480,"byte_end":392578,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ way the AES key is exchanged differs between *LE Legacy Pairing* and *LE Secure Connections*","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392579,"byte_end":392675,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"/ pairing, which hugely impacts actual security.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392676,"byte_end":392726,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392727,"byte_end":392730,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ### LE Legacy Pairing","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392731,"byte_end":392756,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392757,"byte_end":392760,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ For BLE 4.0 and 4.1, only the *LE Legacy Pairing* (as it is now known as) was available. Like","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392761,"byte_end":392858,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"/ every awfully designed protocol, they've rolled their own crypto and use their own key exchange","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392859,"byte_end":392958,"line_start":42,"line_end":42,"column_start":1,"column_end":100}},{"value":"/ procedure (with the usual catastrophic consequences). First, a shared 128-bit **T**emporary","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":392959,"byte_end":393054,"line_start":43,"line_end":43,"column_start":1,"column_end":96}},{"value":"/ **K**ey (TK) is obtained, which is then used to generate the 128-bit **S**hort-**T**erm **K**ey","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393055,"byte_end":393154,"line_start":44,"line_end":44,"column_start":1,"column_end":100}},{"value":"/ (STK) that is used to initially encrypt the connection while other keys are exchanged.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393155,"byte_end":393245,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393246,"byte_end":393249,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The STK is generated from the TK by mixing in random values from master (`Mrand`) and slave","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393250,"byte_end":393345,"line_start":47,"line_end":47,"column_start":1,"column_end":96}},{"value":"/ (`Srand`), which are exchanged in plain text. If a passive eavesdropper manages to obtain TK,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393346,"byte_end":393443,"line_start":48,"line_end":48,"column_start":1,"column_end":98}},{"value":"/ they only need to listen for the `Mrand` and `Srand` value and can then compute the STK and","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393444,"byte_end":393539,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ decrypt the connection.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393540,"byte_end":393567,"line_start":50,"line_end":50,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393568,"byte_end":393571,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ There are 3 methods of determining the TK:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393572,"byte_end":393618,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/ * *\"Just Works\"*: TK=0","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393619,"byte_end":393645,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/ * *Passkey Entry*: A 6-digit number is displayed on one device and input on the other device.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393646,"byte_end":393743,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/   The number is directly used as the TK (after zero-padding it to 128 bits).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393744,"byte_end":393824,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ * *Out-of-Band* (OOB): The 128-bit TK is provided by an external mechanism (eg. NFC).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393825,"byte_end":393914,"line_start":56,"line_end":56,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393915,"byte_end":393918,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ \"Just Works\" obviously is broken without any effort other than listening for the exchanged","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":393919,"byte_end":394013,"line_start":58,"line_end":58,"column_start":1,"column_end":95}},{"value":"/ `Mrand` and `Srand` values.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394014,"byte_end":394045,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394046,"byte_end":394049,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ The Passkey Entry method only allows 1000000 different TKs (equivalent to using 20-bit keys)","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394050,"byte_end":394146,"line_start":61,"line_end":61,"column_start":1,"column_end":97}},{"value":"/ and does not do any key derivation. This makes it trivial to brute-force the TK by running the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394147,"byte_end":394245,"line_start":62,"line_end":62,"column_start":1,"column_end":99}},{"value":"/ STK derivation up to a million times.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394246,"byte_end":394287,"line_start":63,"line_end":63,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394288,"byte_end":394291,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ **The only way to perform *LE Legacy Pairing* with meaningful protection against passive","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394292,"byte_end":394384,"line_start":65,"line_end":65,"column_start":1,"column_end":93}},{"value":"/ eavesdropping is by using a secure Out-of-Band channel for agreeing on the TK.**","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394385,"byte_end":394469,"line_start":66,"line_end":66,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394470,"byte_end":394473,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ### LE Secure Connections pairing","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394474,"byte_end":394511,"line_start":68,"line_end":68,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394512,"byte_end":394515,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Added with BLE 4.2, this finally uses established cryptography to do everything. It uses ECDH on","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394516,"byte_end":394616,"line_start":70,"line_end":70,"column_start":1,"column_end":101}},{"value":"/ the P-256 curve (aka \"secp256r1\" or \"prime256v1\").","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394617,"byte_end":394671,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394672,"byte_end":394675,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Using ECDH immediately protects against passive eavesdropping. MITM-protection works similarly","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394676,"byte_end":394774,"line_start":73,"line_end":73,"column_start":1,"column_end":99}},{"value":"/ to what *LE Legacy Pairing* attempted to do, but is actually relevant here since the base key","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394775,"byte_end":394872,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"/ exchange isn't broken to begin with. There are several user confirmation processes that can","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394873,"byte_end":394968,"line_start":75,"line_end":75,"column_start":1,"column_end":96}},{"value":"/ offer MITM-protection:","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394969,"byte_end":394995,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":394996,"byte_end":394999,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ * *\"Just Works\"*: No MITM-protection. Uses the *Numeric Comparison* protocol internally, with","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395000,"byte_end":395097,"line_start":78,"line_end":78,"column_start":1,"column_end":98}},{"value":"/   automatic confirmation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395098,"byte_end":395127,"line_start":79,"line_end":79,"column_start":1,"column_end":30}},{"value":"/ * *Numeric Comparison*: Both devices display a 6-digit confirmation value and the user is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395128,"byte_end":395221,"line_start":80,"line_end":80,"column_start":1,"column_end":94}},{"value":"/   required to compare them and confirm on each device if they're equal.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395222,"byte_end":395297,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"/ * *Passkey Entry*: Either a generated passkey is displayed on one device and input on the other,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395298,"byte_end":395398,"line_start":82,"line_end":82,"column_start":1,"column_end":101}},{"value":"/   or the user inputs the same passkey into both devices.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395399,"byte_end":395459,"line_start":83,"line_end":83,"column_start":1,"column_end":61}},{"value":"/ * *Out-of-Band* (OOB): An Out-of-Band mechanism is used to exchange random nonces and confirm","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395460,"byte_end":395557,"line_start":84,"line_end":84,"column_start":1,"column_end":98}},{"value":"/   values. The mechanism has to be secure against MITM.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395558,"byte_end":395616,"line_start":85,"line_end":85,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395617,"byte_end":395620,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ## LE Privacy","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395621,"byte_end":395638,"line_start":87,"line_end":87,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395639,"byte_end":395642,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ BLE devices are normally extremely easy to track. Since many people use BLE devices, and device","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395643,"byte_end":395742,"line_start":89,"line_end":89,"column_start":1,"column_end":100}},{"value":"/ addresses are device-unique, they can be very easily used to identify and track people just by","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395743,"byte_end":395841,"line_start":90,"line_end":90,"column_start":1,"column_end":99}},{"value":"/ recording BLE advertisements.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395842,"byte_end":395875,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395876,"byte_end":395879,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The LE privacy feature can prevent this by changing the device address over time. Bonded devices","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395880,"byte_end":395980,"line_start":93,"line_end":93,"column_start":1,"column_end":101}},{"value":"/ can still *resolve* this address by using a shared **I**dentity **R**esolving **K**ey (IRK).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":395981,"byte_end":396077,"line_start":94,"line_end":94,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396078,"byte_end":396081,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ This feature is not related to encryption or authentication of connections.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396082,"byte_end":396161,"line_start":96,"line_end":96,"column_start":1,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396367,"byte_end":396380,"line_start":105,"line_end":105,"column_start":11,"column_end":24},"name":"SecurityLevel","qualname":"::security::SecurityLevel","value":"SecurityLevel","parent":null,"children":[{"krate":0,"index":1982}],"decl_id":null,"docs":" Supported security levels.\n","sig":null,"attributes":[{"value":"/ Supported security levels.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396326,"byte_end":396356,"line_start":104,"line_end":104,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396448,"byte_end":396451,"line_start":107,"line_end":107,"column_start":11,"column_end":14},"name":"MTU","qualname":"::security::SecurityLevel::MTU","value":"u8","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" The L2CAP MTU required by this security level.\n","sig":null,"attributes":[{"value":"/ The L2CAP MTU required by this security level.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396387,"byte_end":396437,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":3748},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396563,"byte_end":396573,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"NoSecurity","qualname":"::security::NoSecurity","value":"","parent":null,"children":[],"decl_id":null,"docs":" *LE Secure Connections* are not supported and will not be established.\n","sig":null,"attributes":[{"value":"/ *LE Secure Connections* are not supported and will not be established.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396460,"byte_end":396534,"line_start":110,"line_end":110,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":3752},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396779,"byte_end":396796,"line_start":120,"line_end":120,"column_start":12,"column_end":29},"name":"SecureConnections","qualname":"::security::SecureConnections","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicates support for *LE Secure Connections*.\n","sig":null,"attributes":[{"value":"/ Indicates support for *LE Secure Connections*.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396700,"byte_end":396750,"line_start":118,"line_end":118,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":3756},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":397042,"byte_end":397057,"line_start":130,"line_end":130,"column_start":12,"column_end":27},"name":"SecurityManager","qualname":"::security::SecurityManager","value":"SecurityManager {  }","parent":null,"children":[{"krate":0,"index":3758}],"decl_id":null,"docs":" The LE Security Manager.","sig":null,"attributes":[{"value":"/ The LE Security Manager.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396928,"byte_end":396956,"line_start":126,"line_end":126,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396957,"byte_end":396960,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Manages pairing and key generation and exchange.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396961,"byte_end":397013,"line_start":128,"line_end":128,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":397145,"byte_end":397156,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"no_security","qualname":"<SecurityManager<NoSecurity>>::no_security","value":"pub fn no_security() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3854},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":400610,"byte_end":400621,"line_start":238,"line_end":238,"column_start":9,"column_end":20},"name":"DisplayOnly","qualname":"::security::IoCapabilities::DisplayOnly","value":"IoCapabilities::DisplayOnly","parent":{"krate":0,"index":3853},"children":[],"decl_id":null,"docs":" Device can display a 6-digit number, but has no input capabilities.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3856},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":400725,"byte_end":400737,"line_start":241,"line_end":241,"column_start":9,"column_end":21},"name":"DisplayYesNo","qualname":"::security::IoCapabilities::DisplayYesNo","value":"IoCapabilities::DisplayYesNo","parent":{"krate":0,"index":3853},"children":[],"decl_id":null,"docs":" Device can display a 6-digit number and the user can input \"Yes\" or \"No\".\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3858},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":400842,"byte_end":400854,"line_start":244,"line_end":244,"column_start":9,"column_end":21},"name":"KeyboardOnly","qualname":"::security::IoCapabilities::KeyboardOnly","value":"IoCapabilities::KeyboardOnly","parent":{"krate":0,"index":3853},"children":[],"decl_id":null,"docs":" Device does not have output capability, but the user can input a passcode.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3860},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":400940,"byte_end":400955,"line_start":247,"line_end":247,"column_start":9,"column_end":24},"name":"NoInputNoOutput","qualname":"::security::IoCapabilities::NoInputNoOutput","value":"IoCapabilities::NoInputNoOutput","parent":{"krate":0,"index":3853},"children":[],"decl_id":null,"docs":" Device has no meaningful input and output capabilities.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3862},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401065,"byte_end":401080,"line_start":250,"line_end":250,"column_start":9,"column_end":24},"name":"KeyboardDisplay","qualname":"::security::IoCapabilities::KeyboardDisplay","value":"IoCapabilities::KeyboardDisplay","parent":{"krate":0,"index":3853},"children":[],"decl_id":null,"docs":" Device can display a 6-digit passcode and allows passcode entry via a keyboard.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3853},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":400501,"byte_end":400515,"line_start":236,"line_end":236,"column_start":14,"column_end":28},"name":"IoCapabilities","qualname":"::security::IoCapabilities","value":"pub enum IoCapabilities {\n    DisplayOnly,\n    DisplayYesNo,\n    KeyboardOnly,\n    NoInputNoOutput,\n    KeyboardDisplay,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":3854},{"krate":0,"index":3856},{"krate":0,"index":3858},{"krate":0,"index":3860},{"krate":0,"index":3862},{"krate":0,"index":3864}],"decl_id":null,"docs":" Describes the I/O capabilities of a device that can be used for the pairing process.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3889},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401199,"byte_end":401209,"line_start":257,"line_end":257,"column_start":9,"column_end":19},"name":"NotPresent","qualname":"::security::Oob::NotPresent","value":"Oob::NotPresent","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3891},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401226,"byte_end":401233,"line_start":258,"line_end":258,"column_start":9,"column_end":16},"name":"Present","qualname":"::security::Oob::Present","value":"Oob::Present","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3888},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401181,"byte_end":401184,"line_start":256,"line_end":256,"column_start":14,"column_end":17},"name":"Oob","qualname":"::security::Oob","value":"pub enum Oob { NotPresent, Present, Unknown(u8), }","parent":null,"children":[{"krate":0,"index":3889},{"krate":0,"index":3891},{"krate":0,"index":3893}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3907},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401352,"byte_end":401359,"line_start":264,"line_end":264,"column_start":12,"column_end":19},"name":"AuthReq","qualname":"::security::AuthReq","value":"","parent":null,"children":[],"decl_id":null,"docs":" Authentication requirements exchanged during pairing requests.\n","sig":null,"attributes":[{"value":"/ Authentication requirements exchanged during pairing requests.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401251,"byte_end":401317,"line_start":262,"line_end":262,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401593,"byte_end":401605,"line_start":273,"line_end":273,"column_start":12,"column_end":24},"name":"bonding_type","qualname":"<AuthReq>::bonding_type","value":"pub fn bonding_type(&Self) -> BondingType","parent":null,"children":[],"decl_id":null,"docs":" Returns the requested bonding.\n","sig":null,"attributes":[{"value":"/ Returns the requested bonding.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401547,"byte_end":401581,"line_start":272,"line_end":272,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401703,"byte_end":401719,"line_start":277,"line_end":277,"column_start":12,"column_end":28},"name":"set_bonding_type","qualname":"<AuthReq>::set_bonding_type","value":"pub fn set_bonding_type(&mut Self, BondingType)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401886,"byte_end":401890,"line_start":282,"line_end":282,"column_start":12,"column_end":16},"name":"mitm","qualname":"<AuthReq>::mitm","value":"pub fn mitm(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether MITM protection is requested.\n","sig":null,"attributes":[{"value":"/ Returns whether MITM protection is requested.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401825,"byte_end":401874,"line_start":281,"line_end":281,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401964,"byte_end":401972,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"set_mitm","qualname":"<AuthReq>::set_mitm","value":"pub fn set_mitm(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402426,"byte_end":402443,"line_start":295,"line_end":295,"column_start":12,"column_end":29},"name":"secure_connection","qualname":"<AuthReq>::secure_connection","value":"pub fn secure_connection(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether *LE Secure Connection* pairing is supported and requested.","sig":null,"attributes":[{"value":"/ Returns whether *LE Secure Connection* pairing is supported and requested.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402096,"byte_end":402174,"line_start":290,"line_end":290,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402179,"byte_end":402182,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ If this returns `false`, *LE Legacy Pairing* will be used. Note that Rubble does not support","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402187,"byte_end":402283,"line_start":292,"line_end":292,"column_start":5,"column_end":101}},{"value":"/ *LE Legacy Pairing* at the moment since it has serious security problems (refer to the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402288,"byte_end":402378,"line_start":293,"line_end":293,"column_start":5,"column_end":95}},{"value":"/ module docs for more info).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402383,"byte_end":402414,"line_start":294,"line_end":294,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402595,"byte_end":402616,"line_start":300,"line_end":300,"column_start":12,"column_end":33},"name":"set_secure_connection","qualname":"<AuthReq>::set_secure_connection","value":"pub fn set_secure_connection(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets whether *LE Secure Connection* pairing is supported and requested.\n","sig":null,"attributes":[{"value":"/ Sets whether *LE Secure Connection* pairing is supported and requested.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402508,"byte_end":402583,"line_start":299,"line_end":299,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402739,"byte_end":402747,"line_start":304,"line_end":304,"column_start":12,"column_end":20},"name":"keypress","qualname":"<AuthReq>::keypress","value":"pub fn keypress(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402825,"byte_end":402837,"line_start":308,"line_end":308,"column_start":12,"column_end":24},"name":"set_keypress","qualname":"<AuthReq>::set_keypress","value":"pub fn set_keypress(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3921},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":404050,"byte_end":404059,"line_start":345,"line_end":345,"column_start":9,"column_end":18},"name":"NoBonding","qualname":"::security::BondingType::NoBonding","value":"BondingType::NoBonding","parent":{"krate":0,"index":3920},"children":[],"decl_id":null,"docs":" No bonding should be performed; the exchanged keys should not be permanently stored.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3923},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":404178,"byte_end":404185,"line_start":348,"line_end":348,"column_start":9,"column_end":16},"name":"Bonding","qualname":"::security::BondingType::Bonding","value":"BondingType::Bonding","parent":{"krate":0,"index":3920},"children":[],"decl_id":null,"docs":" Permanently store the exchanged keys to allow resuming encryption on future connections.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3920},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":403773,"byte_end":403784,"line_start":340,"line_end":340,"column_start":14,"column_end":25},"name":"BondingType","qualname":"::security::BondingType","value":"pub enum BondingType { NoBonding, Bonding, Unknown(u8), }","parent":null,"children":[{"krate":0,"index":3921},{"krate":0,"index":3923},{"krate":0,"index":3925}],"decl_id":null,"docs":" Whether to perform bonding in addition to pairing.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2019},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"time","qualname":"::time","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","parent":null,"children":[{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2027},{"krate":0,"index":2030},{"krate":0,"index":2033},{"krate":0,"index":4041},{"krate":0,"index":4044},{"krate":0,"index":4045},{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4051},{"krate":0,"index":4052},{"krate":0,"index":4054},{"krate":0,"index":4056},{"krate":0,"index":2036},{"krate":0,"index":2045},{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2065},{"krate":0,"index":4059},{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":2067},{"krate":0,"index":2072},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2083},{"krate":0,"index":2085},{"krate":0,"index":2087},{"krate":0,"index":2089}],"decl_id":null,"docs":" Time APIs for obtaining the current time and calculating with points in time and durations.","sig":null,"attributes":[{"value":"/ Time APIs for obtaining the current time and calculating with points in time and durations.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":404637,"byte_end":404732,"line_start":1,"line_end":1,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":404733,"byte_end":404736,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These APIs are made for the BLE stack and are not meant to be general-purpose. The APIs here","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":404737,"byte_end":404833,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ have microsecond resolution and use 32-bit arithmetic wherever possible.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":404834,"byte_end":404910,"line_start":4,"line_end":4,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":4041},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405269,"byte_end":405277,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Duration","qualname":"::time::Duration","value":"","parent":null,"children":[],"decl_id":null,"docs":" A duration with microsecond resolution.","sig":null,"attributes":[{"value":"/ A duration with microsecond resolution.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":404977,"byte_end":405020,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405021,"byte_end":405024,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This can represent a maximum duration of about 1 hour. Overflows will result in a panic, but","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405025,"byte_end":405121,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ shouldn't happen since the BLE stack doesn't deal with durations that large.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405122,"byte_end":405202,"line_start":12,"line_end":12,"column_start":1,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":2037},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405383,"byte_end":405388,"line_start":18,"line_end":18,"column_start":15,"column_end":20},"name":"T_IFS","qualname":"::time::Duration::T_IFS","value":"Self","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" The duration of the interframe spacing between BLE packets.\n","sig":null,"attributes":[{"value":"/ The duration of the interframe spacing between BLE packets.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405305,"byte_end":405368,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405486,"byte_end":405497,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"from_micros","qualname":"<Duration>::from_micros","value":"pub fn from_micros(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Duration`] from a number of microseconds.\n","sig":null,"attributes":[{"value":"/ Creates a [`Duration`] from a number of microseconds.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405417,"byte_end":405474,"line_start":20,"line_end":20,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2039},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405642,"byte_end":405653,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"from_millis","qualname":"<Duration>::from_millis","value":"pub fn from_millis(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Duration`] representing the given number of milliseconds.\n","sig":null,"attributes":[{"value":"/ Creates a [`Duration`] representing the given number of milliseconds.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405557,"byte_end":405630,"line_start":25,"line_end":25,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2040},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405804,"byte_end":405813,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"from_secs","qualname":"<Duration>::from_secs","value":"pub fn from_secs(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Duration`] representing a number of seconds.\n","sig":null,"attributes":[{"value":"/ Creates a [`Duration`] representing a number of seconds.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405732,"byte_end":405792,"line_start":30,"line_end":30,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2041},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405963,"byte_end":405973,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"whole_secs","qualname":"<Duration>::whole_secs","value":"pub fn whole_secs(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of whole seconds that fit in `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of whole seconds that fit in `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405892,"byte_end":405951,"line_start":35,"line_end":35,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406104,"byte_end":406116,"line_start":41,"line_end":41,"column_start":12,"column_end":24},"name":"whole_millis","qualname":"<Duration>::whole_millis","value":"pub fn whole_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of whole milliseconds that fit in `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of whole milliseconds that fit in `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406028,"byte_end":406092,"line_start":40,"line_end":40,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406240,"byte_end":406249,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"as_micros","qualname":"<Duration>::as_micros","value":"pub fn as_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds represented by `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of microseconds represented by `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406167,"byte_end":406228,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2044},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406362,"byte_end":406375,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"subsec_micros","qualname":"<Duration>::subsec_micros","value":"pub fn subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the fractional part of microseconds in `self`.\n","sig":null,"attributes":[{"value":"/ Returns the fractional part of microseconds in `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406292,"byte_end":406350,"line_start":50,"line_end":50,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4059},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408907,"byte_end":408914,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"Instant","qualname":"::time::Instant","value":"","parent":null,"children":[],"decl_id":null,"docs":" A point in time, relative to an unspecfied epoch.","sig":null,"attributes":[{"value":"/ A point in time, relative to an unspecfied epoch.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408349,"byte_end":408402,"line_start":137,"line_end":137,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408403,"byte_end":408406,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This has microsecond resolution and may wrap around after >1 hour. Apart from the wraparound, it","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408407,"byte_end":408507,"line_start":139,"line_end":139,"column_start":1,"column_end":101}},{"value":"/ is monotonic.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408508,"byte_end":408525,"line_start":140,"line_end":140,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408526,"byte_end":408529,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ `Instant`s are obtained from an implementation of [`Timer`]. `Instant`s created from different","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408530,"byte_end":408628,"line_start":142,"line_end":142,"column_start":1,"column_end":99}},{"value":"/ [`Timer`] instances (even when using the same implementation) are not compatible, and mixing","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408629,"byte_end":408725,"line_start":143,"line_end":143,"column_start":1,"column_end":97}},{"value":"/ them in operations causes unspecified results. [`Duration`]s are independent of the [`Timer`]","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408726,"byte_end":408823,"line_start":144,"line_end":144,"column_start":1,"column_end":98}},{"value":"/ implementation and thus can be mixed freely.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408824,"byte_end":408872,"line_start":145,"line_end":145,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":2068},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409160,"byte_end":409176,"line_start":153,"line_end":153,"column_start":15,"column_end":31},"name":"MAX_TIME_BETWEEN","qualname":"::time::Instant::MAX_TIME_BETWEEN","value":"Duration","parent":{"krate":0,"index":2067},"children":[],"decl_id":null,"docs":" The maximum time between two `Instant`s that can be handled by [`Instant::duration_since`].","sig":null,"attributes":[{"value":"/ The maximum time between two `Instant`s that can be handled by [`Instant::duration_since`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408941,"byte_end":409036,"line_start":150,"line_end":150,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409041,"byte_end":409044,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ This is defined to be a value of a few minutes, intended to be sufficient for the BLE stack.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409049,"byte_end":409145,"line_start":152,"line_end":152,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409482,"byte_end":409497,"line_start":161,"line_end":161,"column_start":12,"column_end":27},"name":"from_raw_micros","qualname":"<Instant>::from_raw_micros","value":"pub fn from_raw_micros(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an `Instant` from raw microseconds since an arbitrary implementation-defined\n reference point.","sig":null,"attributes":[{"value":"/ Creates an `Instant` from raw microseconds since an arbitrary implementation-defined","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409237,"byte_end":409325,"line_start":155,"line_end":155,"column_start":5,"column_end":93}},{"value":"/ reference point.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409330,"byte_end":409350,"line_start":156,"line_end":156,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409355,"byte_end":409358,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This should only be called from a [`Timer`] implementation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409363,"byte_end":409426,"line_start":158,"line_end":158,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409431,"byte_end":409434,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ [`Timer`]: trait.Timer.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409439,"byte_end":409470,"line_start":160,"line_end":160,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409752,"byte_end":409762,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"raw_micros","qualname":"<Instant>::raw_micros","value":"pub fn raw_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw value from which this `Instant` was created.","sig":null,"attributes":[{"value":"/ Returns the raw value from which this `Instant` was created.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409556,"byte_end":409620,"line_start":165,"line_end":165,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409625,"byte_end":409628,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ This should only be called from a [`Timer`] implementation.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409633,"byte_end":409696,"line_start":167,"line_end":167,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409701,"byte_end":409704,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ [`Timer`]: trait.Timer.html","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409709,"byte_end":409740,"line_start":169,"line_end":169,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410501,"byte_end":410515,"line_start":184,"line_end":184,"column_start":12,"column_end":26},"name":"duration_since","qualname":"<Instant>::duration_since","value":"pub fn duration_since(&Self, Instant) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Calculates the duration of time that has passed between `earlier` and `self`.","sig":null,"attributes":[{"value":"/ Calculates the duration of time that has passed between `earlier` and `self`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409805,"byte_end":409886,"line_start":174,"line_end":174,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409891,"byte_end":409894,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The maximum duration that can be calculated by this method is defined as","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409899,"byte_end":409975,"line_start":176,"line_end":176,"column_start":5,"column_end":81}},{"value":"/ [`Instant::MAX_TIME_BETWEEN`]. Calling this method when the `Instant`s are further apart is","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":409980,"byte_end":410075,"line_start":177,"line_end":177,"column_start":5,"column_end":100}},{"value":"/ an error and may panic. This is done as a safeguard, since `Instant`s can wrap around,","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410080,"byte_end":410170,"line_start":178,"line_end":178,"column_start":5,"column_end":95}},{"value":"/ which can cause the result of this function to be incorrect. It does not prevent that","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410175,"byte_end":410264,"line_start":179,"line_end":179,"column_start":5,"column_end":94}},{"value":"/ from happening, but makes unexpected durations show up much earlier.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410269,"byte_end":410341,"line_start":180,"line_end":180,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410346,"byte_end":410349,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Both `self` and `earlier` must have been created by the same [`Timer`], or the result of","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410354,"byte_end":410446,"line_start":182,"line_end":182,"column_start":5,"column_end":97}},{"value":"/ this function will be unspecified.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":410451,"byte_end":410489,"line_start":183,"line_end":183,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":2089},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413128,"byte_end":413133,"line_start":276,"line_end":276,"column_start":11,"column_end":16},"name":"Timer","qualname":"::time::Timer","value":"Timer","parent":null,"children":[{"krate":0,"index":2090}],"decl_id":null,"docs":" Trait for time providers.","sig":null,"attributes":[{"value":"/ Trait for time providers.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":412872,"byte_end":412901,"line_start":270,"line_end":270,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":412902,"byte_end":412905,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ The hardware interface has to provide an implementation of `Timer` to the stack. The","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":412906,"byte_end":412994,"line_start":272,"line_end":272,"column_start":1,"column_end":89}},{"value":"/ implementation must have microsecond accuracy.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":412995,"byte_end":413045,"line_start":273,"line_end":273,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413046,"byte_end":413049,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ This trait can also be implemented by a mock timer for testing.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413050,"byte_end":413117,"line_start":275,"line_end":275,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413343,"byte_end":413346,"line_start":281,"line_end":281,"column_start":8,"column_end":11},"name":"now","qualname":"::time::Timer::now","value":"pub fn now(&Self) -> Instant","parent":{"krate":0,"index":2089},"children":[],"decl_id":null,"docs":" Obtain the current time as an [`Instant`].","sig":null,"attributes":[{"value":"/ Obtain the current time as an [`Instant`].","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413140,"byte_end":413186,"line_start":277,"line_end":277,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413191,"byte_end":413194,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ The [`Instant`]s returned by this function must never move backwards in time, except when","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413199,"byte_end":413292,"line_start":279,"line_end":279,"column_start":5,"column_end":98}},{"value":"/ the underlying value wraps around.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":413297,"byte_end":413335,"line_start":280,"line_end":280,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":2091},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uuid","qualname":"::uuid","value":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":4065},{"krate":0,"index":4068},{"krate":0,"index":4069},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4075},{"krate":0,"index":4076},{"krate":0,"index":4078},{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4085},{"krate":0,"index":4086},{"krate":0,"index":4088},{"krate":0,"index":4089},{"krate":0,"index":4091},{"krate":0,"index":4095},{"krate":0,"index":4096},{"krate":0,"index":4099},{"krate":0,"index":4100},{"krate":0,"index":4103},{"krate":0,"index":4104},{"krate":0,"index":2100},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121},{"krate":0,"index":2123},{"krate":0,"index":2125},{"krate":0,"index":2127},{"krate":0,"index":2129},{"krate":0,"index":2131},{"krate":0,"index":2133},{"krate":0,"index":2135},{"krate":0,"index":2137},{"krate":0,"index":4110},{"krate":0,"index":4117},{"krate":0,"index":4119},{"krate":0,"index":4120},{"krate":0,"index":4122},{"krate":0,"index":2139},{"krate":0,"index":2142},{"krate":0,"index":2144},{"krate":0,"index":2146}],"decl_id":null,"docs":" BLE UUIDs (16, 32 or 128 bits).","sig":null,"attributes":[{"value":"/ BLE UUIDs (16, 32 or 128 bits).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413369,"byte_end":413404,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413405,"byte_end":413408,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Bluetooth assigns UUIDs to identify services and characteristics. In order to save space, many","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413409,"byte_end":413507,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ common UUIDs can be represented and transmitted as 16- or 32-bit aliases instead of the full","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413508,"byte_end":413604,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ 128 bits.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413605,"byte_end":413618,"line_start":5,"line_end":5,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413619,"byte_end":413622,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The shorter UUIDs can be converted to their full 128-bit counterparts by making use of the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413623,"byte_end":413717,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ Bluetooth Base UUID, which is defined as `00000000-0000-1000-8000-00805F9B34FB`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413718,"byte_end":413802,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413803,"byte_end":413806,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ A 16-bit UUID alias can be converted to its 32-bit equivalent by zero-extending it: `0xABCD`","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413807,"byte_end":413903,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ becomes `0x0000ABCD`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413904,"byte_end":413929,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413930,"byte_end":413933,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A 32-bit UUID alias can then be converted to its full 128-bit equivalent by placing it in the","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":413934,"byte_end":414031,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ first 4 Bytes of the Base UUID. Hence `0x1234ABCD` would become","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414032,"byte_end":414099,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ `1234ABCD-0000-1000-8000-00805F9B34FB`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414100,"byte_end":414143,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":4065},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414340,"byte_end":414346,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Uuid16","qualname":"::uuid::Uuid16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit UUID alias.","sig":null,"attributes":[{"value":"/ A 16-bit UUID alias.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414191,"byte_end":414215,"line_start":20,"line_end":20,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414216,"byte_end":414219,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Can be converted to its 32- and 128-bit equivalents via `.into()`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414220,"byte_end":414290,"line_start":22,"line_end":22,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4067},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414347,"byte_end":414354,"line_start":24,"line_end":24,"column_start":19,"column_end":26},"name":"0","qualname":"::uuid::Uuid16::0","value":"u16","parent":{"krate":0,"index":4065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4078},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414498,"byte_end":414504,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Uuid32","qualname":"::uuid::Uuid32","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 32-bit UUID alias.","sig":null,"attributes":[{"value":"/ A 32-bit UUID alias.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414358,"byte_end":414382,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414383,"byte_end":414386,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Can be converted to its 128-bit equivalent via `.into()`.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414387,"byte_end":414448,"line_start":28,"line_end":28,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":4080},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414505,"byte_end":414512,"line_start":30,"line_end":30,"column_start":19,"column_end":26},"name":"0","qualname":"::uuid::Uuid32::0","value":"u32","parent":{"krate":0,"index":4078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4091},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414590,"byte_end":414597,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"Uuid128","qualname":"::uuid::Uuid128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A full 128-bit UUID.\n","sig":null,"attributes":[{"value":"/ A full 128-bit UUID.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414516,"byte_end":414540,"line_start":32,"line_end":32,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414805,"byte_end":414815,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<Uuid128>::from_bytes","value":"pub const fn from_bytes([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a 128-bit UUID from 16 raw bytes (encoded in big-endian).\n","sig":null,"attributes":[{"value":"/ Creates a 128-bit UUID from 16 raw bytes (encoded in big-endian).","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414718,"byte_end":414787,"line_start":39,"line_end":39,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":415028,"byte_end":415040,"line_start":47,"line_end":47,"column_start":18,"column_end":30},"name":"parse_static","qualname":"<Uuid128>::parse_static","value":"pub const fn parse_static(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Parses a UUID string literal, panicking when the string is malformed.","sig":null,"attributes":[{"value":"/ Parses a UUID string literal, panicking when the string is malformed.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414874,"byte_end":414947,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414952,"byte_end":414955,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is meant to be used in constant contexts.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414960,"byte_end":415010,"line_start":46,"line_end":46,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4111},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420612,"byte_end":420618,"line_start":235,"line_end":235,"column_start":5,"column_end":11},"name":"Uuid16","qualname":"::uuid::UuidKind::Uuid16","value":"UuidKind::Uuid16","parent":{"krate":0,"index":4110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4113},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420624,"byte_end":420630,"line_start":236,"line_end":236,"column_start":5,"column_end":11},"name":"Uuid32","qualname":"::uuid::UuidKind::Uuid32","value":"UuidKind::Uuid32","parent":{"krate":0,"index":4110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4115},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420636,"byte_end":420643,"line_start":237,"line_end":237,"column_start":5,"column_end":12},"name":"Uuid128","qualname":"::uuid::UuidKind::Uuid128","value":"UuidKind::Uuid128","parent":{"krate":0,"index":4110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4110},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420597,"byte_end":420605,"line_start":234,"line_end":234,"column_start":10,"column_end":18},"name":"UuidKind","qualname":"::uuid::UuidKind","value":"pub enum UuidKind { Uuid16, Uuid32, Uuid128, }","parent":null,"children":[{"krate":0,"index":4111},{"krate":0,"index":4113},{"krate":0,"index":4115}],"decl_id":null,"docs":" List of the supported UUID types.\n","sig":null,"attributes":[{"value":"/ List of the supported UUID types.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420505,"byte_end":420542,"line_start":232,"line_end":232,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":2139},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420865,"byte_end":420871,"line_start":245,"line_end":245,"column_start":11,"column_end":17},"name":"IsUuid","qualname":"::uuid::IsUuid","value":"IsUuid: for<'a> FromBytes + ToBytes + Copy","parent":null,"children":[{"krate":0,"index":2141}],"decl_id":null,"docs":" Marker for UUID types.","sig":null,"attributes":[{"value":"/ Marker for UUID types.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420648,"byte_end":420674,"line_start":240,"line_end":240,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420675,"byte_end":420678,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ This is useful when being generic over the specific type of UUID used. It","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420679,"byte_end":420756,"line_start":242,"line_end":242,"column_start":1,"column_end":78}},{"value":"/ also brings in the `ToBytes` and `FromBytes` trait bounds that are likely","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420757,"byte_end":420834,"line_start":243,"line_end":243,"column_start":1,"column_end":78}},{"value":"/ needed as well.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420835,"byte_end":420854,"line_start":244,"line_end":244,"column_start":1,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":2141},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420924,"byte_end":420928,"line_start":246,"line_end":246,"column_start":11,"column_end":15},"name":"KIND","qualname":"::uuid::IsUuid::KIND","value":"UuidKind","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1558,"byte_end":1575,"line_start":49,"line_end":49,"column_start":11,"column_end":28},"name":"BLUETOOTH_VERSION","qualname":"::BLUETOOTH_VERSION","value":"VersionNumber","parent":null,"children":[],"decl_id":null,"docs":" Version of the Bluetooth specification implemented by Rubble.\n","sig":null,"attributes":[{"value":"/ Version of the Bluetooth specification implemented by Rubble.","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1482,"byte_end":1547,"line_start":48,"line_end":48,"column_start":1,"column_end":66}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":4432,"byte_end":4440,"line_start":66,"line_end":66,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":4795,"byte_end":4803,"line_start":79,"line_end":79,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":4960,"byte_end":4968,"line_start":85,"line_end":85,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5165,"byte_end":5168,"line_start":95,"line_end":95,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5322,"byte_end":5325,"line_start":101,"line_end":101,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14493,"byte_end":14499,"line_start":13,"line_end":13,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14966,"byte_end":14972,"line_start":29,"line_end":29,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15107,"byte_end":15113,"line_start":35,"line_end":35,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15244,"byte_end":15250,"line_start":41,"line_end":41,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15391,"byte_end":15397,"line_start":47,"line_end":47,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15715,"byte_end":15729,"line_start":61,"line_end":61,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16207,"byte_end":16221,"line_start":74,"line_end":74,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16442,"byte_end":16456,"line_start":83,"line_end":83,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16801,"byte_end":16812,"line_start":95,"line_end":95,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19698,"byte_end":19706,"line_start":57,"line_end":57,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":20450,"byte_end":20463,"line_start":88,"line_end":88,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":21138,"byte_end":21151,"line_start":110,"line_end":110,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":21393,"byte_end":21406,"line_start":119,"line_end":119,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":21950,"byte_end":21964,"line_start":139,"line_end":139,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":22590,"byte_end":22604,"line_start":160,"line_end":160,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":22971,"byte_end":22985,"line_start":171,"line_end":171,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25308,"byte_end":25314,"line_start":237,"line_end":237,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":29708,"byte_end":29714,"line_start":393,"line_end":393,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":34981,"byte_end":34987,"line_start":503,"line_end":503,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":39940,"byte_end":39946,"line_start":643,"line_end":643,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42642,"byte_end":42657,"line_start":18,"line_end":18,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":44311,"byte_end":44319,"line_start":63,"line_end":63,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":44470,"byte_end":44478,"line_start":69,"line_end":69,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":58983,"byte_end":58998,"line_start":415,"line_end":415,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":59690,"byte_end":59705,"line_start":436,"line_end":436,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60226,"byte_end":60243,"line_start":452,"line_end":452,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61465,"byte_end":61472,"line_start":13,"line_end":13,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61814,"byte_end":61821,"line_start":23,"line_end":23,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62079,"byte_end":62086,"line_start":32,"line_end":32,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62548,"byte_end":62555,"line_start":47,"line_end":47,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62674,"byte_end":62681,"line_start":53,"line_end":53,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62795,"byte_end":62802,"line_start":59,"line_end":59,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62898,"byte_end":62905,"line_start":65,"line_end":65,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":63010,"byte_end":63017,"line_start":71,"line_end":71,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":63116,"byte_end":63123,"line_start":77,"line_end":77,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":63299,"byte_end":63306,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7763,"byte_end":7772,"line_start":56,"line_end":56,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8381,"byte_end":8407,"line_start":84,"line_end":84,"column_start":6,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8939,"byte_end":8965,"line_start":101,"line_end":101,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13747,"byte_end":13759,"line_start":211,"line_end":211,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64020,"byte_end":64026,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66119,"byte_end":66132,"line_start":77,"line_end":77,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66373,"byte_end":66386,"line_start":84,"line_end":84,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72390,"byte_end":72397,"line_start":63,"line_end":63,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72575,"byte_end":72580,"line_start":74,"line_end":74,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72780,"byte_end":72787,"line_start":83,"line_end":83,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72889,"byte_end":72896,"line_start":89,"line_end":89,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72936,"byte_end":72941,"line_start":90,"line_end":90,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73015,"byte_end":73022,"line_start":92,"line_end":92,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73193,"byte_end":73200,"line_start":98,"line_end":98,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73357,"byte_end":73364,"line_start":104,"line_end":104,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":74144,"byte_end":74151,"line_start":125,"line_end":125,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75052,"byte_end":75059,"line_start":145,"line_end":145,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75352,"byte_end":75359,"line_start":156,"line_end":156,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75622,"byte_end":75629,"line_start":165,"line_end":165,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76308,"byte_end":76315,"line_start":185,"line_end":185,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76644,"byte_end":76651,"line_start":194,"line_end":194,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77053,"byte_end":77064,"line_start":208,"line_end":208,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78026,"byte_end":78036,"line_start":239,"line_end":239,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83560,"byte_end":83570,"line_start":387,"line_end":387,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90130,"byte_end":90135,"line_start":581,"line_end":581,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90202,"byte_end":90207,"line_start":583,"line_end":583,"column_start":54,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90363,"byte_end":90368,"line_start":592,"line_end":592,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90823,"byte_end":90828,"line_start":615,"line_end":615,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91051,"byte_end":91056,"line_start":625,"line_end":625,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100831,"byte_end":100843,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100952,"byte_end":100964,"line_start":21,"line_end":21,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":101983,"byte_end":101996,"line_start":53,"line_end":53,"column_start":6,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":102182,"byte_end":102195,"line_start":62,"line_end":62,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95447,"byte_end":95463,"line_start":60,"line_end":60,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95588,"byte_end":95604,"line_start":67,"line_end":67,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":98177,"byte_end":98180,"line_start":127,"line_end":127,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":98952,"byte_end":98955,"line_start":150,"line_end":150,"column_start":24,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106614,"byte_end":106619,"line_start":27,"line_end":27,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114239,"byte_end":114251,"line_start":42,"line_end":42,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114460,"byte_end":114472,"line_start":53,"line_end":53,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107483,"byte_end":107502,"line_start":18,"line_end":18,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":108524,"byte_end":108543,"line_start":47,"line_end":47,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109948,"byte_end":109964,"line_start":93,"line_end":93,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":112261,"byte_end":112277,"line_start":157,"line_end":157,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\signaling.rs","byte_start":138545,"byte_end":138559,"line_start":34,"line_end":34,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\signaling.rs","byte_start":138635,"byte_end":138649,"line_start":40,"line_end":40,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\signaling.rs","byte_start":138839,"byte_end":138853,"line_start":47,"line_end":47,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119514,"byte_end":119521,"line_start":59,"line_end":59,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120745,"byte_end":120752,"line_start":94,"line_end":94,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120887,"byte_end":120894,"line_start":100,"line_end":100,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121025,"byte_end":121032,"line_start":106,"line_end":106,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121174,"byte_end":121181,"line_start":112,"line_end":112,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":122542,"byte_end":122553,"line_start":148,"line_end":148,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123155,"byte_end":123166,"line_start":165,"line_end":165,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123589,"byte_end":123600,"line_start":180,"line_end":180,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125255,"byte_end":125268,"line_start":226,"line_end":226,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125824,"byte_end":125837,"line_start":241,"line_end":241,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126294,"byte_end":126307,"line_start":256,"line_end":256,"column_start":64,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128443,"byte_end":128449,"line_start":311,"line_end":311,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128564,"byte_end":128570,"line_start":316,"line_end":316,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128801,"byte_end":128807,"line_start":324,"line_end":324,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129109,"byte_end":129116,"line_start":337,"line_end":337,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129524,"byte_end":129531,"line_start":353,"line_end":353,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129856,"byte_end":129866,"line_start":367,"line_end":367,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130831,"byte_end":130837,"line_start":399,"line_end":399,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134742,"byte_end":134754,"line_start":506,"line_end":506,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":137317,"byte_end":137329,"line_start":568,"line_end":568,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":137497,"byte_end":137509,"line_start":576,"line_end":576,"column_start":54,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163765,"byte_end":163776,"line_start":70,"line_end":70,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":165940,"byte_end":165951,"line_start":126,"line_end":126,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167478,"byte_end":167490,"line_start":171,"line_end":171,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":169106,"byte_end":169118,"line_start":211,"line_end":211,"column_start":39,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170151,"byte_end":170163,"line_start":244,"line_end":244,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170783,"byte_end":170788,"line_start":264,"line_end":264,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172683,"byte_end":172694,"line_start":311,"line_end":311,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172932,"byte_end":172936,"line_start":323,"line_end":323,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":179285,"byte_end":179288,"line_start":113,"line_end":113,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1191},{"krate":0,"index":1193},{"krate":0,"index":1195},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":187256,"byte_end":187259,"line_start":324,"line_end":324,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188034,"byte_end":188052,"line_start":351,"line_end":351,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189817,"byte_end":189835,"line_start":407,"line_end":407,"column_start":24,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":192251,"byte_end":192257,"line_start":479,"line_end":479,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198068,"byte_end":198074,"line_start":657,"line_end":657,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199136,"byte_end":199142,"line_start":686,"line_end":686,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201534,"byte_end":201540,"line_start":766,"line_end":766,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201881,"byte_end":201887,"line_start":777,"line_end":777,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202051,"byte_end":202057,"line_start":784,"line_end":784,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203307,"byte_end":203314,"line_start":823,"line_end":823,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204197,"byte_end":204207,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206614,"byte_end":206624,"line_start":85,"line_end":85,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206893,"byte_end":206903,"line_start":95,"line_end":95,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":207051,"byte_end":207061,"line_start":101,"line_end":101,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208558,"byte_end":208567,"line_start":11,"line_end":11,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208705,"byte_end":208714,"line_start":21,"line_end":21,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208866,"byte_end":208875,"line_start":27,"line_end":27,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209010,"byte_end":209019,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":309630,"byte_end":309640,"line_start":60,"line_end":60,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":327750,"byte_end":327760,"line_start":515,"line_end":515,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":329171,"byte_end":329181,"line_start":558,"line_end":558,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332766,"byte_end":332772,"line_start":65,"line_end":65,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335507,"byte_end":335513,"line_start":165,"line_end":165,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335879,"byte_end":335885,"line_start":177,"line_end":177,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336049,"byte_end":336055,"line_start":184,"line_end":184,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336914,"byte_end":336917,"line_start":219,"line_end":219,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337165,"byte_end":337168,"line_start":228,"line_end":228,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337497,"byte_end":337500,"line_start":239,"line_end":239,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":338198,"byte_end":338201,"line_start":257,"line_end":257,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":338478,"byte_end":338481,"line_start":266,"line_end":266,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339199,"byte_end":339212,"line_start":19,"line_end":19,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339904,"byte_end":339917,"line_start":43,"line_end":43,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":340093,"byte_end":340106,"line_start":50,"line_end":50,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344320,"byte_end":344330,"line_start":67,"line_end":67,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1533}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344473,"byte_end":344483,"line_start":74,"line_end":74,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344638,"byte_end":344648,"line_start":80,"line_end":80,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344835,"byte_end":344845,"line_start":87,"line_end":87,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345277,"byte_end":345285,"line_start":13,"line_end":13,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345743,"byte_end":345758,"line_start":27,"line_end":27,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346212,"byte_end":346227,"line_start":41,"line_end":41,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346636,"byte_end":346651,"line_start":55,"line_end":55,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346936,"byte_end":346951,"line_start":64,"line_end":64,"column_start":67,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347307,"byte_end":347316,"line_start":76,"line_end":76,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348219,"byte_end":348229,"line_start":104,"line_end":104,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349191,"byte_end":349213,"line_start":21,"line_end":21,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351658,"byte_end":351680,"line_start":90,"line_end":90,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":352390,"byte_end":352412,"line_start":111,"line_end":111,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353288,"byte_end":353308,"line_start":139,"line_end":139,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356768,"byte_end":356778,"line_start":243,"line_end":243,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1645},{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":359002,"byte_end":359012,"line_start":302,"line_end":302,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":360408,"byte_end":360418,"line_start":335,"line_end":335,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1653}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371229,"byte_end":371236,"line_start":153,"line_end":153,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373048,"byte_end":373059,"line_start":214,"line_end":214,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373683,"byte_end":373697,"line_start":239,"line_end":239,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":374900,"byte_end":374914,"line_start":280,"line_end":280,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1736},{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381258,"byte_end":381267,"line_start":22,"line_end":22,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1803},{"krate":0,"index":1807},{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384623,"byte_end":384629,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1827},{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384820,"byte_end":384826,"line_start":19,"line_end":19,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384974,"byte_end":384980,"line_start":25,"line_end":25,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385123,"byte_end":385129,"line_start":31,"line_end":31,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385275,"byte_end":385281,"line_start":37,"line_end":37,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385486,"byte_end":385492,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385612,"byte_end":385618,"line_start":54,"line_end":54,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385732,"byte_end":385738,"line_start":60,"line_end":60,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148441,"byte_end":148450,"line_start":235,"line_end":235,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386970,"byte_end":386988,"line_start":27,"line_end":27,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389021,"byte_end":389032,"line_start":96,"line_end":96,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396598,"byte_end":396608,"line_start":113,"line_end":113,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1984}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396821,"byte_end":396838,"line_start":121,"line_end":121,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":397104,"byte_end":397119,"line_start":134,"line_end":134,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1988}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":397277,"byte_end":397292,"line_start":142,"line_end":142,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1991}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":398120,"byte_end":398135,"line_start":167,"line_end":167,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1994}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":399362,"byte_end":399369,"line_start":200,"line_end":200,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401371,"byte_end":401378,"line_start":266,"line_end":266,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402995,"byte_end":403002,"line_start":313,"line_end":313,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2012}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":403368,"byte_end":403375,"line_start":324,"line_end":324,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":404481,"byte_end":404496,"line_start":362,"line_end":362,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2017},{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405290,"byte_end":405298,"line_start":16,"line_end":16,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406441,"byte_end":406449,"line_start":56,"line_end":56,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2047}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406619,"byte_end":406627,"line_start":64,"line_end":64,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2049},{"krate":0,"index":2050}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406749,"byte_end":406757,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2052}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406853,"byte_end":406861,"line_start":78,"line_end":78,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2055}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":407032,"byte_end":407040,"line_start":86,"line_end":86,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2057},{"krate":0,"index":2058}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":407158,"byte_end":407166,"line_start":94,"line_end":94,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":407271,"byte_end":407279,"line_start":100,"line_end":100,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2062}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408077,"byte_end":408085,"line_start":125,"line_end":125,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2064}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408228,"byte_end":408236,"line_start":131,"line_end":131,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2066}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408927,"byte_end":408934,"line_start":149,"line_end":149,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411012,"byte_end":411019,"line_start":200,"line_end":200,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411250,"byte_end":411257,"line_start":209,"line_end":209,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2077}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411415,"byte_end":411422,"line_start":217,"line_end":217,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2079}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411628,"byte_end":411635,"line_start":224,"line_end":224,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2081},{"krate":0,"index":2082}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411835,"byte_end":411842,"line_start":233,"line_end":233,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411947,"byte_end":411954,"line_start":239,"line_end":239,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":412745,"byte_end":412752,"line_start":264,"line_end":264,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2088}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414615,"byte_end":414622,"line_start":36,"line_end":36,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417148,"byte_end":417154,"line_start":115,"line_end":115,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417254,"byte_end":417261,"line_start":121,"line_end":121,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417365,"byte_end":417372,"line_start":127,"line_end":127,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2114}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417556,"byte_end":417562,"line_start":135,"line_end":135,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417716,"byte_end":417722,"line_start":141,"line_end":141,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2118}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417876,"byte_end":417883,"line_start":147,"line_end":147,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418029,"byte_end":418035,"line_start":153,"line_end":153,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418228,"byte_end":418234,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418427,"byte_end":418434,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418605,"byte_end":418611,"line_start":174,"line_end":174,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418750,"byte_end":418756,"line_start":180,"line_end":180,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2130}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418895,"byte_end":418902,"line_start":186,"line_end":186,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":419513,"byte_end":419519,"line_start":199,"line_end":199,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":419658,"byte_end":419664,"line_start":205,"line_end":205,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":419803,"byte_end":419810,"line_start":211,"line_end":211,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420959,"byte_end":420965,"line_start":249,"line_end":249,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2143}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":421032,"byte_end":421038,"line_start":253,"line_end":253,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":421105,"byte_end":421112,"line_start":257,"line_end":257,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2147}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1235,"byte_end":1238,"line_start":30,"line_end":30,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":30}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1248,"byte_end":1254,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":346}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1264,"byte_end":1269,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":428}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1279,"byte_end":1285,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":620}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1295,"byte_end":1299,"line_start":34,"line_end":34,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":644}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1320,"byte_end":1324,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":737}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107155,"byte_end":107169,"line_start":6,"line_end":6,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":738}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1334,"byte_end":1339,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":810}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1021}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144220,"byte_end":144232,"line_start":120,"line_end":120,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1022}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144242,"byte_end":144253,"line_start":121,"line_end":121,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1131}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144309,"byte_end":144313,"line_start":125,"line_end":125,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1449}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144357,"byte_end":144363,"line_start":128,"line_end":128,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1542}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144373,"byte_end":144377,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1595}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":144387,"byte_end":144392,"line_start":130,"line_end":130,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1654}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1363,"byte_end":1366,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1933}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1376,"byte_end":1384,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1953}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1394,"byte_end":1398,"line_start":41,"line_end":41,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2019}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\lib.rs","byte_start":1408,"byte_end":1412,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2091}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":4432,"byte_end":4440,"line_start":66,"line_end":66,"column_start":37,"column_end":45},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2155},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":4795,"byte_end":4803,"line_start":79,"line_end":79,"column_start":40,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2155},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":4960,"byte_end":4968,"line_start":85,"line_end":85,"column_start":35,"column_end":43},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2155},"to":{"krate":1,"index":2913}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5165,"byte_end":5168,"line_start":95,"line_end":95,"column_start":39,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2165},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\utils.rs","byte_start":5322,"byte_end":5325,"line_start":101,"line_end":101,"column_start":42,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2165},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14493,"byte_end":14499,"line_start":13,"line_end":13,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":14966,"byte_end":14972,"line_start":29,"line_end":29,"column_start":21,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2175},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15107,"byte_end":15113,"line_start":35,"line_end":35,"column_start":24,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2175},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15244,"byte_end":15250,"line_start":41,"line_end":41,"column_start":24,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2175},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15391,"byte_end":15397,"line_start":47,"line_end":47,"column_start":18,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2175},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":15715,"byte_end":15729,"line_start":61,"line_end":61,"column_start":6,"column_end":20},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16207,"byte_end":16221,"line_start":74,"line_end":74,"column_start":24,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2189},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16442,"byte_end":16456,"line_start":83,"line_end":83,"column_start":18,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2189},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\handle.rs","byte_start":16801,"byte_end":16812,"line_start":95,"line_end":95,"column_start":6,"column_end":17},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":19698,"byte_end":19706,"line_start":57,"line_end":57,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2273},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":20450,"byte_end":20463,"line_start":88,"line_end":88,"column_start":10,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":21138,"byte_end":21151,"line_start":110,"line_end":110,"column_start":28,"column_end":41},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2278},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":21393,"byte_end":21406,"line_start":119,"line_end":119,"column_start":22,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2278},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":21950,"byte_end":21964,"line_start":139,"line_end":139,"column_start":10,"column_end":24},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2285},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":22590,"byte_end":22604,"line_start":160,"line_end":160,"column_start":28,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2285},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":22971,"byte_end":22985,"line_start":171,"line_end":171,"column_start":22,"column_end":36},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2285},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":25308,"byte_end":25314,"line_start":237,"line_end":237,"column_start":6,"column_end":12},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":29708,"byte_end":29714,"line_start":393,"line_end":393,"column_start":28,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2370},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":34981,"byte_end":34987,"line_start":503,"line_end":503,"column_start":22,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2370},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\pdus.rs","byte_start":39940,"byte_end":39946,"line_start":643,"line_end":643,"column_start":6,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":42642,"byte_end":42657,"line_start":18,"line_end":18,"column_start":28,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":44311,"byte_end":44319,"line_start":63,"line_end":63,"column_start":30,"column_end":38},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":202},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":44470,"byte_end":44478,"line_start":69,"line_end":69,"column_start":33,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":202},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":58983,"byte_end":58998,"line_start":415,"line_end":415,"column_start":44,"column_end":59},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":949}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":59690,"byte_end":59705,"line_start":436,"line_end":436,"column_start":41,"column_end":56},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":951}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\server.rs","byte_start":60226,"byte_end":60243,"line_start":452,"line_end":452,"column_start":32,"column_end":49},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61465,"byte_end":61472,"line_start":13,"line_end":13,"column_start":24,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2455},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":61814,"byte_end":61821,"line_start":23,"line_end":23,"column_start":18,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2455},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62079,"byte_end":62086,"line_start":32,"line_end":32,"column_start":20,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2667}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62548,"byte_end":62555,"line_start":47,"line_end":47,"column_start":28,"column_end":35},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2667}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62674,"byte_end":62681,"line_start":53,"line_end":53,"column_start":29,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2667}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62795,"byte_end":62802,"line_start":59,"line_end":59,"column_start":23,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":62898,"byte_end":62905,"line_start":65,"line_end":65,"column_start":23,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":63010,"byte_end":63017,"line_start":71,"line_end":71,"column_start":24,"column_end":31},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":63116,"byte_end":63123,"line_start":77,"line_end":77,"column_start":24,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2919}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\uuid.rs","byte_start":63299,"byte_end":63306,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":7763,"byte_end":7772,"line_start":56,"line_end":56,"column_start":22,"column_end":31},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8381,"byte_end":8407,"line_start":84,"line_end":84,"column_start":6,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":8939,"byte_end":8965,"line_start":101,"line_end":101,"column_start":18,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":316},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\att\\mod.rs","byte_start":13747,"byte_end":13759,"line_start":211,"line_end":211,"column_start":28,"column_end":40},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":339},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":64020,"byte_end":64026,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66119,"byte_end":66132,"line_start":77,"line_end":77,"column_start":23,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\beacon.rs","byte_start":66373,"byte_end":66386,"line_start":84,"line_end":84,"column_start":41,"column_end":54},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72390,"byte_end":72397,"line_start":63,"line_end":63,"column_start":37,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72575,"byte_end":72580,"line_start":74,"line_end":74,"column_start":31,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":460},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72780,"byte_end":72787,"line_start":83,"line_end":83,"column_start":31,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72889,"byte_end":72896,"line_start":89,"line_end":89,"column_start":30,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":3026}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":72936,"byte_end":72941,"line_start":90,"line_end":90,"column_start":30,"column_end":35},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":460},"to":{"krate":1,"index":3026}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73015,"byte_end":73022,"line_start":92,"line_end":92,"column_start":63,"column_end":70},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73193,"byte_end":73200,"line_start":98,"line_end":98,"column_start":63,"column_end":70},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":73357,"byte_end":73364,"line_start":104,"line_end":104,"column_start":21,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":74144,"byte_end":74151,"line_start":125,"line_end":125,"column_start":46,"column_end":53},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":451},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75052,"byte_end":75059,"line_start":145,"line_end":145,"column_start":46,"column_end":53},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":451},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75352,"byte_end":75359,"line_start":156,"line_end":156,"column_start":43,"column_end":50},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":451},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":75622,"byte_end":75629,"line_start":165,"line_end":165,"column_start":35,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76308,"byte_end":76315,"line_start":185,"line_end":185,"column_start":35,"column_end":42},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":76644,"byte_end":76651,"line_start":194,"line_end":194,"column_start":35,"column_end":42},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":77053,"byte_end":77064,"line_start":208,"line_end":208,"column_start":48,"column_end":59},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":521},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":78026,"byte_end":78036,"line_start":239,"line_end":239,"column_start":10,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":83560,"byte_end":83570,"line_start":387,"line_end":387,"column_start":10,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":88794,"byte_end":88799,"line_start":537,"line_end":537,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90130,"byte_end":90135,"line_start":581,"line_end":581,"column_start":52,"column_end":57},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2468},"to":{"krate":1,"index":3026}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90202,"byte_end":90207,"line_start":583,"line_end":583,"column_start":54,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2468},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90363,"byte_end":90368,"line_start":592,"line_end":592,"column_start":15,"column_end":20},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":90823,"byte_end":90828,"line_start":615,"line_end":615,"column_start":30,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2468},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\bytes.rs","byte_start":91051,"byte_end":91056,"line_start":625,"line_end":625,"column_start":33,"column_end":38},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2468},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100831,"byte_end":100843,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":100952,"byte_end":100964,"line_start":21,"line_end":21,"column_start":23,"column_end":35},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":672},"to":{"krate":0,"index":711}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":101983,"byte_end":101996,"line_start":53,"line_end":53,"column_start":6,"column_end":19},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\p256.rs","byte_start":102182,"byte_end":102195,"line_start":62,"line_end":62,"column_start":20,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":680},"to":{"krate":0,"index":715}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95447,"byte_end":95463,"line_start":60,"line_end":60,"column_start":6,"column_end":22},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":95588,"byte_end":95604,"line_start":67,"line_end":67,"column_start":23,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2489},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":96710,"byte_end":96715,"line_start":96,"line_end":96,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":715}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":98177,"byte_end":98180,"line_start":127,"line_end":127,"column_start":22,"column_end":25},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":720},"to":{"krate":14,"index":140}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\ecdh\\mod.rs","byte_start":98952,"byte_end":98955,"line_start":150,"line_end":150,"column_start":24,"column_end":27},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":720},"to":{"krate":14,"index":145}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\error.rs","byte_start":106614,"byte_end":106619,"line_start":27,"line_end":27,"column_start":23,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2492},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114239,"byte_end":114251,"line_start":42,"line_end":42,"column_start":6,"column_end":18},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\characteristic.rs","byte_start":114460,"byte_end":114472,"line_start":53,"line_end":53,"column_start":25,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":753},"to":{"krate":0,"index":750}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":107483,"byte_end":107502,"line_start":18,"line_end":18,"column_start":6,"column_end":25},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":108524,"byte_end":108543,"line_start":47,"line_end":47,"column_start":28,"column_end":47},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":790},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":109948,"byte_end":109964,"line_start":93,"line_end":93,"column_start":6,"column_end":22},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\gatt\\mod.rs","byte_start":112261,"byte_end":112277,"line_start":157,"line_end":157,"column_start":28,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":800},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\signaling.rs","byte_start":138545,"byte_end":138559,"line_start":34,"line_end":34,"column_start":6,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\signaling.rs","byte_start":138635,"byte_end":138649,"line_start":40,"line_end":40,"column_start":22,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":825},"to":{"krate":0,"index":949}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\signaling.rs","byte_start":138839,"byte_end":138853,"line_start":47,"line_end":47,"column_start":19,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":825},"to":{"krate":0,"index":951}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":119514,"byte_end":119521,"line_start":59,"line_end":59,"column_start":6,"column_end":13},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2895},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120745,"byte_end":120752,"line_start":94,"line_end":94,"column_start":21,"column_end":28},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2895},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":120887,"byte_end":120894,"line_start":100,"line_end":100,"column_start":24,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2895},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121025,"byte_end":121032,"line_start":106,"line_end":106,"column_start":24,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2895},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":121174,"byte_end":121181,"line_start":112,"line_end":112,"column_start":18,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2895},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":122542,"byte_end":122553,"line_start":148,"line_end":148,"column_start":10,"column_end":21},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123155,"byte_end":123166,"line_start":165,"line_end":165,"column_start":23,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":123589,"byte_end":123600,"line_start":180,"line_end":180,"column_start":21,"column_end":32},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125255,"byte_end":125268,"line_start":226,"line_end":226,"column_start":6,"column_end":19},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":125824,"byte_end":125837,"line_start":241,"line_end":241,"column_start":28,"column_end":41},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":126294,"byte_end":126307,"line_start":256,"line_end":256,"column_start":64,"column_end":77},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":931},"to":{"krate":0,"index":906}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":127959,"byte_end":127970,"line_start":294,"line_end":294,"column_start":21,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":949},"to":{"krate":0,"index":951}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128443,"byte_end":128449,"line_start":311,"line_end":311,"column_start":6,"column_end":12},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128564,"byte_end":128570,"line_start":316,"line_end":316,"column_start":28,"column_end":34},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2912},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":128801,"byte_end":128807,"line_start":324,"line_end":324,"column_start":18,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2912},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129109,"byte_end":129116,"line_start":337,"line_end":337,"column_start":46,"column_end":53},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129524,"byte_end":129531,"line_start":353,"line_end":353,"column_start":30,"column_end":37},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":129856,"byte_end":129866,"line_start":367,"line_end":367,"column_start":24,"column_end":34},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":130831,"byte_end":130837,"line_start":399,"line_end":399,"column_start":10,"column_end":16},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":134742,"byte_end":134754,"line_start":506,"line_end":506,"column_start":41,"column_end":53},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":137317,"byte_end":137329,"line_start":568,"line_end":568,"column_start":51,"column_end":63},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":995},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\l2cap\\mod.rs","byte_start":137497,"byte_end":137509,"line_start":576,"line_end":576,"column_start":54,"column_end":66},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":995},"to":{"krate":1,"index":3240}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":163765,"byte_end":163776,"line_start":70,"line_end":70,"column_start":22,"column_end":33},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":165940,"byte_end":165951,"line_start":126,"line_end":126,"column_start":28,"column_end":39},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2923},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":167478,"byte_end":167490,"line_start":171,"line_end":171,"column_start":21,"column_end":33},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":169106,"byte_end":169118,"line_start":211,"line_end":211,"column_start":39,"column_end":51},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2960},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170151,"byte_end":170163,"line_start":244,"line_end":244,"column_start":33,"column_end":45},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2960},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":170783,"byte_end":170788,"line_start":264,"line_end":264,"column_start":6,"column_end":11},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172683,"byte_end":172694,"line_start":311,"line_end":311,"column_start":26,"column_end":37},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2923},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\ad_structure.rs","byte_start":172932,"byte_end":172936,"line_start":323,"line_end":323,"column_start":6,"column_end":10},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":179285,"byte_end":179288,"line_start":113,"line_end":113,"column_start":10,"column_end":13},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":187256,"byte_end":187259,"line_start":324,"line_end":324,"column_start":28,"column_end":31},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":188034,"byte_end":188052,"line_start":351,"line_end":351,"column_start":6,"column_end":24},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":189817,"byte_end":189835,"line_start":407,"line_end":407,"column_start":24,"column_end":42},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3115},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":192251,"byte_end":192257,"line_start":479,"line_end":479,"column_start":6,"column_end":12},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":198068,"byte_end":198074,"line_start":657,"line_end":657,"column_start":21,"column_end":27},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1216},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":199136,"byte_end":199142,"line_start":686,"line_end":686,"column_start":6,"column_end":12},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201534,"byte_end":201540,"line_start":766,"line_end":766,"column_start":21,"column_end":27},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3153},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":201881,"byte_end":201887,"line_start":777,"line_end":777,"column_start":28,"column_end":34},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3153},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":202051,"byte_end":202057,"line_start":784,"line_end":784,"column_start":18,"column_end":24},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3153},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\advertising.rs","byte_start":203307,"byte_end":203314,"line_start":823,"line_end":823,"column_start":6,"column_end":13},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":204197,"byte_end":204207,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206614,"byte_end":206624,"line_start":85,"line_end":85,"column_start":23,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3193},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":206893,"byte_end":206903,"line_start":95,"line_end":95,"column_start":21,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3193},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\channel_map.rs","byte_start":207051,"byte_end":207061,"line_start":101,"line_end":101,"column_start":27,"column_end":37},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3193},"to":{"krate":0,"index":616}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208558,"byte_end":208567,"line_start":11,"line_end":11,"column_start":23,"column_end":32},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3209},"to":{"krate":0,"index":616}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208705,"byte_end":208714,"line_start":21,"line_end":21,"column_start":21,"column_end":30},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3209},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":208866,"byte_end":208875,"line_start":27,"line_end":27,"column_start":24,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3209},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\comp_id.rs","byte_start":209010,"byte_end":209019,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":309630,"byte_end":309640,"line_start":60,"line_end":60,"column_start":17,"column_end":27},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":327750,"byte_end":327760,"line_start":515,"line_end":515,"column_start":17,"column_end":27},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\connection.rs","byte_start":329171,"byte_end":329181,"line_start":558,"line_end":558,"column_start":6,"column_end":16},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":332766,"byte_end":332772,"line_start":65,"line_end":65,"column_start":6,"column_end":12},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335507,"byte_end":335513,"line_start":165,"line_end":165,"column_start":21,"column_end":27},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3238},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":335879,"byte_end":335885,"line_start":177,"line_end":177,"column_start":28,"column_end":34},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3238},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336049,"byte_end":336055,"line_start":184,"line_end":184,"column_start":18,"column_end":24},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3238},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":336914,"byte_end":336917,"line_start":219,"line_end":219,"column_start":10,"column_end":13},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337165,"byte_end":337168,"line_start":228,"line_end":228,"column_start":13,"column_end":16},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":337497,"byte_end":337500,"line_start":239,"line_end":239,"column_start":37,"column_end":40},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":338198,"byte_end":338201,"line_start":257,"line_end":257,"column_start":39,"column_end":42},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3268},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\data.rs","byte_start":338478,"byte_end":338481,"line_start":266,"line_end":266,"column_start":34,"column_end":37},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3268},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339199,"byte_end":339212,"line_start":19,"line_end":19,"column_start":6,"column_end":19},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":339904,"byte_end":339917,"line_start":43,"line_end":43,"column_start":21,"column_end":34},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3297},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\device_address.rs","byte_start":340093,"byte_end":340106,"line_start":50,"line_end":50,"column_start":23,"column_end":36},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3297},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344320,"byte_end":344330,"line_start":67,"line_end":67,"column_start":6,"column_end":16},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344473,"byte_end":344483,"line_start":74,"line_end":74,"column_start":18,"column_end":28},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3313},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344638,"byte_end":344648,"line_start":80,"line_end":80,"column_start":28,"column_end":38},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3313},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\features.rs","byte_start":344835,"byte_end":344845,"line_start":87,"line_end":87,"column_start":23,"column_end":33},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3313},"to":{"krate":0,"index":616}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345277,"byte_end":345285,"line_start":13,"line_end":13,"column_start":24,"column_end":32},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1555},"to":{"krate":0,"index":1553}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":345743,"byte_end":345758,"line_start":27,"line_end":27,"column_start":49,"column_end":64},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346212,"byte_end":346227,"line_start":41,"line_end":41,"column_start":10,"column_end":25},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346636,"byte_end":346651,"line_start":55,"line_end":55,"column_start":6,"column_end":21},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":346936,"byte_end":346951,"line_start":64,"line_end":64,"column_start":67,"column_end":82},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1559},"to":{"krate":0,"index":1553}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":347307,"byte_end":347316,"line_start":76,"line_end":76,"column_start":42,"column_end":51},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\filter.rs","byte_start":348219,"byte_end":348229,"line_start":104,"line_end":104,"column_start":24,"column_end":34},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":349191,"byte_end":349213,"line_start":21,"line_end":21,"column_start":6,"column_end":28},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":351658,"byte_end":351680,"line_start":90,"line_end":90,"column_start":28,"column_end":50},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3435},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":352390,"byte_end":352412,"line_start":111,"line_end":111,"column_start":18,"column_end":40},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3435},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":353288,"byte_end":353308,"line_start":139,"line_end":139,"column_start":6,"column_end":26},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":356768,"byte_end":356778,"line_start":243,"line_end":243,"column_start":6,"column_end":16},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":359002,"byte_end":359012,"line_start":302,"line_end":302,"column_start":28,"column_end":38},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3489},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\llcp.rs","byte_start":360408,"byte_end":360418,"line_start":335,"line_end":335,"column_start":22,"column_end":32},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3489},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":371229,"byte_end":371236,"line_start":153,"line_end":153,"column_start":9,"column_end":16},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373048,"byte_end":373059,"line_start":214,"line_end":214,"column_start":6,"column_end":17},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":373683,"byte_end":373697,"line_start":239,"line_end":239,"column_start":23,"column_end":37},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1718},"to":{"krate":0,"index":1681}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\queue.rs","byte_start":374900,"byte_end":374914,"line_start":280,"line_end":280,"column_start":23,"column_end":37},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1729},"to":{"krate":0,"index":1689}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\responder.rs","byte_start":381258,"byte_end":381267,"line_start":22,"line_end":22,"column_start":17,"column_end":26},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1793},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384623,"byte_end":384629,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384820,"byte_end":384826,"line_start":19,"line_end":19,"column_start":23,"column_end":29},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3669},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":384974,"byte_end":384980,"line_start":25,"line_end":25,"column_start":21,"column_end":27},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3669},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385123,"byte_end":385129,"line_start":31,"line_end":31,"column_start":24,"column_end":30},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3669},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385275,"byte_end":385281,"line_start":37,"line_end":37,"column_start":14,"column_end":20},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3669},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385486,"byte_end":385492,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3669},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385612,"byte_end":385618,"line_start":54,"line_end":54,"column_start":20,"column_end":26},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3669},"to":{"krate":1,"index":3114}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\seq_num.rs","byte_start":385732,"byte_end":385738,"line_start":60,"line_end":60,"column_start":32,"column_end":38},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3669},"to":{"krate":1,"index":3114}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\link\\mod.rs","byte_start":148441,"byte_end":148450,"line_start":235,"line_end":235,"column_start":17,"column_end":26},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":386970,"byte_end":386988,"line_start":27,"line_end":27,"column_start":6,"column_end":24},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\phy.rs","byte_start":389021,"byte_end":389032,"line_start":96,"line_end":96,"column_start":6,"column_end":17},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396598,"byte_end":396608,"line_start":113,"line_end":113,"column_start":24,"column_end":34},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3748},"to":{"krate":0,"index":1981}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":396821,"byte_end":396838,"line_start":121,"line_end":121,"column_start":24,"column_end":41},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3752},"to":{"krate":0,"index":1981}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":397104,"byte_end":397119,"line_start":134,"line_end":134,"column_start":6,"column_end":21},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":397277,"byte_end":397292,"line_start":142,"line_end":142,"column_start":40,"column_end":55},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3756},"to":{"krate":0,"index":949}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":398120,"byte_end":398135,"line_start":167,"line_end":167,"column_start":37,"column_end":52},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3756},"to":{"krate":0,"index":951}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":399362,"byte_end":399369,"line_start":200,"line_end":200,"column_start":28,"column_end":35},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3786},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":401371,"byte_end":401378,"line_start":266,"line_end":266,"column_start":6,"column_end":13},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":402995,"byte_end":403002,"line_start":313,"line_end":313,"column_start":21,"column_end":28},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":3907},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":403368,"byte_end":403375,"line_start":324,"line_end":324,"column_start":22,"column_end":29},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":3907},"to":{"krate":0,"index":616}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\security.rs","byte_start":404481,"byte_end":404496,"line_start":362,"line_end":362,"column_start":22,"column_end":37},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":616}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":405290,"byte_end":405298,"line_start":16,"line_end":16,"column_start":6,"column_end":14},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":4041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406441,"byte_end":406449,"line_start":56,"line_end":56,"column_start":14,"column_end":22},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406619,"byte_end":406627,"line_start":64,"line_end":64,"column_start":24,"column_end":32},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406749,"byte_end":406757,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":3114}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":406853,"byte_end":406861,"line_start":78,"line_end":78,"column_start":14,"column_end":22},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":3088}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":407032,"byte_end":407040,"line_start":86,"line_end":86,"column_start":24,"column_end":32},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":3088}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":407158,"byte_end":407166,"line_start":94,"line_end":94,"column_start":20,"column_end":28},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":407271,"byte_end":407279,"line_start":100,"line_end":100,"column_start":23,"column_end":31},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408077,"byte_end":408085,"line_start":125,"line_end":125,"column_start":21,"column_end":29},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":4041},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408228,"byte_end":408236,"line_start":131,"line_end":131,"column_start":24,"column_end":32},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":4041},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":408927,"byte_end":408934,"line_start":149,"line_end":149,"column_start":6,"column_end":13},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":4059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411012,"byte_end":411019,"line_start":200,"line_end":200,"column_start":23,"column_end":30},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":3088}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411250,"byte_end":411257,"line_start":209,"line_end":209,"column_start":24,"column_end":31},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":3083}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411415,"byte_end":411422,"line_start":217,"line_end":217,"column_start":30,"column_end":37},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":3114}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411628,"byte_end":411635,"line_start":224,"line_end":224,"column_start":24,"column_end":31},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":3088}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411835,"byte_end":411842,"line_start":233,"line_end":233,"column_start":30,"column_end":37},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":411947,"byte_end":411954,"line_start":239,"line_end":239,"column_start":23,"column_end":30},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\time.rs","byte_start":412745,"byte_end":412752,"line_start":264,"line_end":264,"column_start":21,"column_end":28},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":414615,"byte_end":414622,"line_start":36,"line_end":36,"column_start":6,"column_end":13},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":4091},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417148,"byte_end":417154,"line_start":115,"line_end":115,"column_start":23,"column_end":29},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":4078},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417254,"byte_end":417261,"line_start":121,"line_end":121,"column_start":23,"column_end":30},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":4091},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417365,"byte_end":417372,"line_start":127,"line_end":127,"column_start":23,"column_end":30},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":4091},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417556,"byte_end":417562,"line_start":135,"line_end":135,"column_start":18,"column_end":24},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":4065},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417716,"byte_end":417722,"line_start":141,"line_end":141,"column_start":18,"column_end":24},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":4078},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":417876,"byte_end":417883,"line_start":147,"line_end":147,"column_start":18,"column_end":25},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":4091},"to":{"krate":0,"index":578}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418029,"byte_end":418035,"line_start":153,"line_end":153,"column_start":24,"column_end":30},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":4065},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418228,"byte_end":418234,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":4078},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418427,"byte_end":418434,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":4091},"to":{"krate":0,"index":580}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418605,"byte_end":418611,"line_start":174,"line_end":174,"column_start":21,"column_end":27},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":4065},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418750,"byte_end":418756,"line_start":180,"line_end":180,"column_start":21,"column_end":27},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":4078},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":418895,"byte_end":418902,"line_start":186,"line_end":186,"column_start":21,"column_end":28},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":4091},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":419513,"byte_end":419519,"line_start":199,"line_end":199,"column_start":24,"column_end":30},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":4065},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":419658,"byte_end":419664,"line_start":205,"line_end":205,"column_start":24,"column_end":30},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":4078},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":419803,"byte_end":419810,"line_start":211,"line_end":211,"column_start":24,"column_end":31},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":4091},"to":{"krate":24,"index":356}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420881,"byte_end":420890,"line_start":245,"line_end":245,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":580},"to":{"krate":0,"index":2139}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420897,"byte_end":420904,"line_start":245,"line_end":245,"column_start":43,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":578},"to":{"krate":0,"index":2139}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420907,"byte_end":420911,"line_start":245,"line_end":245,"column_start":53,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":2139}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":420959,"byte_end":420965,"line_start":249,"line_end":249,"column_start":17,"column_end":23},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":4065},"to":{"krate":0,"index":2139}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":421032,"byte_end":421038,"line_start":253,"line_end":253,"column_start":17,"column_end":23},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4078},"to":{"krate":0,"index":2139}},{"span":{"file_name":"C:\\Users\\Chris\\.cargo\\git\\checkouts\\rubble-1acc4a403ea48878\\cd6a3c3\\rubble\\src\\uuid.rs","byte_start":421105,"byte_end":421112,"line_start":257,"line_end":257,"column_start":17,"column_end":24},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":4091},"to":{"krate":0,"index":2139}}]}